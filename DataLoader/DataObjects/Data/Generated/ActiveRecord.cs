


using System;
using System.Reflection;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using SubSonic.DataProviders;
using SubSonic.Extensions;
using System.Linq.Expressions;
using SubSonic.Schema;
using System.Collections;
using SubSonic;
using SubSonic.Repository;
using System.ComponentModel;
using System.Data.Common;
using SubSonic.SqlGeneration.Schema;

namespace Jaxis.POS.Data
{
	public interface IWCFDataElement
	{
		IBaseDataObject CreateDBObject( );
	}

    public interface ICallOnCreated
    {
        void CallOnCreated( bool _CallOnCreated);
    }

    public static class ActiveRecordExtensions
    {
        public static T SingleOrDefault<T>( this IRepository<T> _repo, Expression<Func<T, bool>> expression ) where T : IActiveRecord
        {
            var results = _repo.Find( expression );
            T single = default( T );
            foreach ( T i in results )
            {
                single = i;
                single.SetIsLoaded( true );
                single.SetIsNew( false );
                break;
            }
            return single;
        }
    }

	public interface IBaseDataObject
	{
        bool IsNew();
        void SetIsNew(bool isNew);
        bool IsLoaded();
		void Save( );
	}

    public abstract class BaseDataObject<T> : IBaseDataObject where T : class, new( )
    {
		
        protected ITable tbl;
        
		protected bool _isNew;

        
		protected T m_Internal = default(T);

        public T GetInternalData( )
        {
            return m_Internal;
        }

        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }

        
		protected bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        
		protected List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

		public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

		public abstract void Save( );

    }



// Interface
    public interface IBanquetMenu : IWCFDataElement
    {
        
        Guid BanquetID { get; set; }
        
        Guid MenuItemID { get; set; }

        void Copy( IBanquetMenu _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataBanquetMenu : IBanquetMenu
    {
        [DataMember]
        public Guid BanquetID { get; set; }
        [DataMember]
        public Guid MenuItemID { get; set; }

        public void Copy( IBanquetMenu _Item )
        {
             MenuItemID = _Item.MenuItemID;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new BanquetMenu( this );
        }
    }


    /// <summary>
    /// A class which represents the BanquetMenus table in the RenAix Database.
    /// </summary>
    public partial class BanquetMenu : BaseDataObject<DataBanquetMenu>, IActiveRecord, ICallOnCreated, IBanquetMenu
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<BanquetMenu> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<BanquetMenu>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<BanquetMenu> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(BanquetMenu item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                BanquetMenu item=new BanquetMenu();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<BanquetMenu> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public BanquetMenu()
        {
            m_Internal = new DataBanquetMenu();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.BanquetID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public BanquetMenu( bool _CallOnCreated )
        {
            m_Internal = new DataBanquetMenu();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public BanquetMenu(string connectionString, string providerName) 
        {
            m_Internal = new DataBanquetMenu();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.BanquetID = Guid.NewGuid( );     
        }

        public BanquetMenu( IBanquetMenu _Item )
        {
            m_Internal = new DataBanquetMenu();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public BanquetMenu( DataBanquetMenu _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IBanquetMenu _Item )
        {
            m_Internal.MenuItemID = _Item.MenuItemID;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new BanquetMenu( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.BanquetID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                BanquetMenu.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<BanquetMenu>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public BanquetMenu(Expression<Func<BanquetMenu, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<BanquetMenu> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<BanquetMenu> _repo;
            
            if(db.TestMode)
            {
                BanquetMenu.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<BanquetMenu>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<BanquetMenu> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static BanquetMenu SingleOrDefault(Expression<Func<BanquetMenu, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static BanquetMenu SingleOrDefault(Expression<Func<BanquetMenu, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<BanquetMenu> repo = GetRepo(connectionString,providerName);
            BanquetMenu single = repo.SingleOrDefault<BanquetMenu>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<BanquetMenu, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<BanquetMenu, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyBanquetMenuLoaded = false;
        protected static BanquetMenu EmptyBanquetMenuMember = null;

        public static BanquetMenu GetByID(Guid? value) 
        {
            BanquetMenu rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static BanquetMenu GetByID(Guid value) 
        {
            BanquetMenu rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyBanquetMenuLoaded )
                    {
                        rc = EmptyBanquetMenuMember;
                    }
                    else
                    {
                        IsEmptyBanquetMenuLoaded = true;
                        rc = BanquetMenu.Find( L => L.BanquetID.Equals( value ) ).FirstOrDefault( );
                        EmptyBanquetMenuMember = rc;
                    }
                }
                else
                {
                    rc = BanquetMenu.Find( L => L.BanquetID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<BanquetMenu> Find(Expression<Func<BanquetMenu, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<BanquetMenu> Find(Expression<Func<BanquetMenu, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<BanquetMenu> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<BanquetMenu> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<BanquetMenu> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<BanquetMenu> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<BanquetMenu> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<BanquetMenu> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "BanquetID";
        }

        public object KeyValue()
        {
            return this.BanquetID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.MenuItemID )
//			{
//				rc = this.MenuItemID.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is BanquetMenu)
            {
                BanquetMenu compare=(BanquetMenu)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.BanquetID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.MenuItemID.ToString();
        }

        public string DescriptorColumn() 
        {
            return "MenuItemID";
        }

        public static string GetKeyColumn()
        {
            return "BanquetID";
        }        

        public static string GetDescriptorColumn()
        {
            return "MenuItemID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Banquet> BanquetsItem
        {
            get
            {
                  var repo=Jaxis.POS.Data.Banquet.GetRepo();
                  return from items in repo.GetAll()
                       where items.BanquetID == m_Internal.BanquetID
                       select items;
            }
        }
        public IQueryable<MenuItem> MenuItemsItem
        {
            get
            {
                  var repo=Jaxis.POS.Data.MenuItem.GetRepo();
                  return from items in repo.GetAll()
                       where items.MenuItemID == m_Internal.MenuItemID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.BanquetID;
            }
            set
            {
                m_Internal.BanquetID = value;
            }
        }


//        Guid _BanquetID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid BanquetID
        {
            get { return m_Internal.BanquetID; }
            set
            {
                if(m_Internal.BanquetID!=value){
                    m_Internal.BanquetID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BanquetID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _MenuItemID;
        [LocalData]
        public Guid MenuItemID
        {
            get { return m_Internal.MenuItemID; }
            set
            {
                if(m_Internal.MenuItemID!=value){
                    m_Internal.MenuItemID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MenuItemID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<BanquetMenu, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IBanquet : IWCFDataElement
    {
        
        Guid BanquetID { get; set; }
        
        string Name { get; set; }
        
        string CustomerName { get; set; }

        void Copy( IBanquet _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataBanquet : IBanquet
    {
        [DataMember]
        public Guid BanquetID { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string CustomerName { get; set; }

        public void Copy( IBanquet _Item )
        {
             Name = _Item.Name;			
             CustomerName = _Item.CustomerName;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Banquet( this );
        }
    }


    /// <summary>
    /// A class which represents the Banquets table in the RenAix Database.
    /// </summary>
    public partial class Banquet : BaseDataObject<DataBanquet>, IActiveRecord, ICallOnCreated, IBanquet
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Banquet> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Banquet>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Banquet> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Banquet item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Banquet item=new Banquet();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<Banquet> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public Banquet()
        {
            m_Internal = new DataBanquet();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.BanquetID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Banquet( bool _CallOnCreated )
        {
            m_Internal = new DataBanquet();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Banquet(string connectionString, string providerName) 
        {
            m_Internal = new DataBanquet();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.BanquetID = Guid.NewGuid( );     
        }

        public Banquet( IBanquet _Item )
        {
            m_Internal = new DataBanquet();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public Banquet( DataBanquet _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IBanquet _Item )
        {
            m_Internal.Name = _Item.Name;			
            m_Internal.CustomerName = _Item.CustomerName;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new Banquet( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.BanquetID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Banquet.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Banquet>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Banquet(Expression<Func<Banquet, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Banquet> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<Banquet> _repo;
            
            if(db.TestMode)
            {
                Banquet.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Banquet>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Banquet> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Banquet SingleOrDefault(Expression<Func<Banquet, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Banquet SingleOrDefault(Expression<Func<Banquet, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Banquet> repo = GetRepo(connectionString,providerName);
            Banquet single = repo.SingleOrDefault<Banquet>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Banquet, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Banquet, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyBanquetLoaded = false;
        protected static Banquet EmptyBanquetMember = null;

        public static Banquet GetByID(Guid? value) 
        {
            Banquet rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Banquet GetByID(Guid value) 
        {
            Banquet rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyBanquetLoaded )
                    {
                        rc = EmptyBanquetMember;
                    }
                    else
                    {
                        IsEmptyBanquetLoaded = true;
                        rc = Banquet.Find( L => L.BanquetID.Equals( value ) ).FirstOrDefault( );
                        EmptyBanquetMember = rc;
                    }
                }
                else
                {
                    rc = Banquet.Find( L => L.BanquetID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Banquet> Find(Expression<Func<Banquet, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Banquet> Find(Expression<Func<Banquet, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Banquet> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Banquet> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Banquet> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Banquet> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Banquet> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Banquet> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "BanquetID";
        }

        public object KeyValue()
        {
            return this.BanquetID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Banquet)
            {
                Banquet compare=(Banquet)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.BanquetID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "BanquetID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<BanquetMenu> BanquetMenus
        {
            get
            {
                  var repo=Jaxis.POS.Data.BanquetMenu.GetRepo();
                  return from items in repo.GetAll()
                       where items.BanquetID == m_Internal.BanquetID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.BanquetID;
            }
            set
            {
                m_Internal.BanquetID = value;
            }
        }


//        Guid _BanquetID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid BanquetID
        {
            get { return m_Internal.BanquetID; }
            set
            {
                if(m_Internal.BanquetID!=value){
                    m_Internal.BanquetID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BanquetID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CustomerName;
        [LocalData]
        public string CustomerName
        {
            get { return m_Internal.CustomerName; }
            set
            {
                if(m_Internal.CustomerName!=value){
                    m_Internal.CustomerName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Banquet, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IDailyWeatherForecast : IWCFDataElement
    {
        
        Guid DailyWeatherForecastID { get; set; }
        
        DateTime ForecastDate { get; set; }
        
        string Summary { get; set; }
        
        string Icon { get; set; }
        
        long SunriseTime { get; set; }
        
        long SunsetTime { get; set; }
        
        double MoonPhase { get; set; }
        
        double PrecipAccumulation { get; set; }
        
        double PrecipIntensity { get; set; }
        
        double PrecipIntensityMax { get; set; }
        
        long PrecipIntensityMaxTime { get; set; }
        
        double PrecipProbability { get; set; }
        
        string PrecipType { get; set; }
        
        double TemperatureMin { get; set; }
        
        long TemperatureMinTime { get; set; }
        
        double TemperatureMax { get; set; }
        
        long TemperatureMaxTime { get; set; }
        
        double ApparentTemperatureMin { get; set; }
        
        long ApparentTemperatureMinTime { get; set; }
        
        double ApparentTemperatureMax { get; set; }
        
        long ApparentTemperatureMaxTime { get; set; }
        
        double DewPoint { get; set; }
        
        double WindSpeed { get; set; }
        
        double WindBearing { get; set; }
        
        double CloudCover { get; set; }
        
        double Humidity { get; set; }
        
        double Pressure { get; set; }
        
        double Visibility { get; set; }
        
        double Ozone { get; set; }
        
        DateTime QueryDate { get; set; }
        
        decimal Lat { get; set; }
        
        decimal Lon { get; set; }

        void Copy( IDailyWeatherForecast _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataDailyWeatherForecast : IDailyWeatherForecast
    {
        [DataMember]
        public Guid DailyWeatherForecastID { get; set; }
        [DataMember]
        public DateTime ForecastDate { get; set; }
        [DataMember]
        public string Summary { get; set; }
        [DataMember]
        public string Icon { get; set; }
        [DataMember]
        public long SunriseTime { get; set; }
        [DataMember]
        public long SunsetTime { get; set; }
        [DataMember]
        public double MoonPhase { get; set; }
        [DataMember]
        public double PrecipAccumulation { get; set; }
        [DataMember]
        public double PrecipIntensity { get; set; }
        [DataMember]
        public double PrecipIntensityMax { get; set; }
        [DataMember]
        public long PrecipIntensityMaxTime { get; set; }
        [DataMember]
        public double PrecipProbability { get; set; }
        [DataMember]
        public string PrecipType { get; set; }
        [DataMember]
        public double TemperatureMin { get; set; }
        [DataMember]
        public long TemperatureMinTime { get; set; }
        [DataMember]
        public double TemperatureMax { get; set; }
        [DataMember]
        public long TemperatureMaxTime { get; set; }
        [DataMember]
        public double ApparentTemperatureMin { get; set; }
        [DataMember]
        public long ApparentTemperatureMinTime { get; set; }
        [DataMember]
        public double ApparentTemperatureMax { get; set; }
        [DataMember]
        public long ApparentTemperatureMaxTime { get; set; }
        [DataMember]
        public double DewPoint { get; set; }
        [DataMember]
        public double WindSpeed { get; set; }
        [DataMember]
        public double WindBearing { get; set; }
        [DataMember]
        public double CloudCover { get; set; }
        [DataMember]
        public double Humidity { get; set; }
        [DataMember]
        public double Pressure { get; set; }
        [DataMember]
        public double Visibility { get; set; }
        [DataMember]
        public double Ozone { get; set; }
        [DataMember]
        public DateTime QueryDate { get; set; }
        [DataMember]
        public decimal Lat { get; set; }
        [DataMember]
        public decimal Lon { get; set; }

        public void Copy( IDailyWeatherForecast _Item )
        {
             ForecastDate = _Item.ForecastDate;			
             Summary = _Item.Summary;			
             Icon = _Item.Icon;			
             SunriseTime = _Item.SunriseTime;			
             SunsetTime = _Item.SunsetTime;			
             MoonPhase = _Item.MoonPhase;			
             PrecipAccumulation = _Item.PrecipAccumulation;			
             PrecipIntensity = _Item.PrecipIntensity;			
             PrecipIntensityMax = _Item.PrecipIntensityMax;			
             PrecipIntensityMaxTime = _Item.PrecipIntensityMaxTime;			
             PrecipProbability = _Item.PrecipProbability;			
             PrecipType = _Item.PrecipType;			
             TemperatureMin = _Item.TemperatureMin;			
             TemperatureMinTime = _Item.TemperatureMinTime;			
             TemperatureMax = _Item.TemperatureMax;			
             TemperatureMaxTime = _Item.TemperatureMaxTime;			
             ApparentTemperatureMin = _Item.ApparentTemperatureMin;			
             ApparentTemperatureMinTime = _Item.ApparentTemperatureMinTime;			
             ApparentTemperatureMax = _Item.ApparentTemperatureMax;			
             ApparentTemperatureMaxTime = _Item.ApparentTemperatureMaxTime;			
             DewPoint = _Item.DewPoint;			
             WindSpeed = _Item.WindSpeed;			
             WindBearing = _Item.WindBearing;			
             CloudCover = _Item.CloudCover;			
             Humidity = _Item.Humidity;			
             Pressure = _Item.Pressure;			
             Visibility = _Item.Visibility;			
             Ozone = _Item.Ozone;			
             QueryDate = _Item.QueryDate;			
             Lat = _Item.Lat;			
             Lon = _Item.Lon;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new DailyWeatherForecast( this );
        }
    }


    /// <summary>
    /// A class which represents the DailyWeatherForecast table in the RenAix Database.
    /// </summary>
    public partial class DailyWeatherForecast : BaseDataObject<DataDailyWeatherForecast>, IActiveRecord, ICallOnCreated, IDailyWeatherForecast
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<DailyWeatherForecast> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<DailyWeatherForecast>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<DailyWeatherForecast> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(DailyWeatherForecast item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                DailyWeatherForecast item=new DailyWeatherForecast();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<DailyWeatherForecast> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public DailyWeatherForecast()
        {
            m_Internal = new DataDailyWeatherForecast();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.DailyWeatherForecastID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public DailyWeatherForecast( bool _CallOnCreated )
        {
            m_Internal = new DataDailyWeatherForecast();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public DailyWeatherForecast(string connectionString, string providerName) 
        {
            m_Internal = new DataDailyWeatherForecast();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.DailyWeatherForecastID = Guid.NewGuid( );     
        }

        public DailyWeatherForecast( IDailyWeatherForecast _Item )
        {
            m_Internal = new DataDailyWeatherForecast();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public DailyWeatherForecast( DataDailyWeatherForecast _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IDailyWeatherForecast _Item )
        {
            m_Internal.ForecastDate = _Item.ForecastDate;			
            m_Internal.Summary = _Item.Summary;			
            m_Internal.Icon = _Item.Icon;			
            m_Internal.SunriseTime = _Item.SunriseTime;			
            m_Internal.SunsetTime = _Item.SunsetTime;			
            m_Internal.MoonPhase = _Item.MoonPhase;			
            m_Internal.PrecipAccumulation = _Item.PrecipAccumulation;			
            m_Internal.PrecipIntensity = _Item.PrecipIntensity;			
            m_Internal.PrecipIntensityMax = _Item.PrecipIntensityMax;			
            m_Internal.PrecipIntensityMaxTime = _Item.PrecipIntensityMaxTime;			
            m_Internal.PrecipProbability = _Item.PrecipProbability;			
            m_Internal.PrecipType = _Item.PrecipType;			
            m_Internal.TemperatureMin = _Item.TemperatureMin;			
            m_Internal.TemperatureMinTime = _Item.TemperatureMinTime;			
            m_Internal.TemperatureMax = _Item.TemperatureMax;			
            m_Internal.TemperatureMaxTime = _Item.TemperatureMaxTime;			
            m_Internal.ApparentTemperatureMin = _Item.ApparentTemperatureMin;			
            m_Internal.ApparentTemperatureMinTime = _Item.ApparentTemperatureMinTime;			
            m_Internal.ApparentTemperatureMax = _Item.ApparentTemperatureMax;			
            m_Internal.ApparentTemperatureMaxTime = _Item.ApparentTemperatureMaxTime;			
            m_Internal.DewPoint = _Item.DewPoint;			
            m_Internal.WindSpeed = _Item.WindSpeed;			
            m_Internal.WindBearing = _Item.WindBearing;			
            m_Internal.CloudCover = _Item.CloudCover;			
            m_Internal.Humidity = _Item.Humidity;			
            m_Internal.Pressure = _Item.Pressure;			
            m_Internal.Visibility = _Item.Visibility;			
            m_Internal.Ozone = _Item.Ozone;			
            m_Internal.QueryDate = _Item.QueryDate;			
            m_Internal.Lat = _Item.Lat;			
            m_Internal.Lon = _Item.Lon;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new DailyWeatherForecast( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.DailyWeatherForecastID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                DailyWeatherForecast.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DailyWeatherForecast>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public DailyWeatherForecast(Expression<Func<DailyWeatherForecast, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<DailyWeatherForecast> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<DailyWeatherForecast> _repo;
            
            if(db.TestMode)
            {
                DailyWeatherForecast.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DailyWeatherForecast>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<DailyWeatherForecast> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static DailyWeatherForecast SingleOrDefault(Expression<Func<DailyWeatherForecast, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static DailyWeatherForecast SingleOrDefault(Expression<Func<DailyWeatherForecast, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<DailyWeatherForecast> repo = GetRepo(connectionString,providerName);
            DailyWeatherForecast single = repo.SingleOrDefault<DailyWeatherForecast>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<DailyWeatherForecast, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<DailyWeatherForecast, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyDailyWeatherForecastLoaded = false;
        protected static DailyWeatherForecast EmptyDailyWeatherForecastMember = null;

        public static DailyWeatherForecast GetByID(Guid? value) 
        {
            DailyWeatherForecast rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static DailyWeatherForecast GetByID(Guid value) 
        {
            DailyWeatherForecast rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyDailyWeatherForecastLoaded )
                    {
                        rc = EmptyDailyWeatherForecastMember;
                    }
                    else
                    {
                        IsEmptyDailyWeatherForecastLoaded = true;
                        rc = DailyWeatherForecast.Find( L => L.DailyWeatherForecastID.Equals( value ) ).FirstOrDefault( );
                        EmptyDailyWeatherForecastMember = rc;
                    }
                }
                else
                {
                    rc = DailyWeatherForecast.Find( L => L.DailyWeatherForecastID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<DailyWeatherForecast> Find(Expression<Func<DailyWeatherForecast, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<DailyWeatherForecast> Find(Expression<Func<DailyWeatherForecast, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<DailyWeatherForecast> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<DailyWeatherForecast> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<DailyWeatherForecast> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<DailyWeatherForecast> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<DailyWeatherForecast> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<DailyWeatherForecast> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "DailyWeatherForecastID";
        }

        public object KeyValue()
        {
            return this.DailyWeatherForecastID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Summary )
//			{
//				rc = this.Summary.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is DailyWeatherForecast)
            {
                DailyWeatherForecast compare=(DailyWeatherForecast)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.DailyWeatherForecastID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Summary.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Summary";
        }

        public static string GetKeyColumn()
        {
            return "DailyWeatherForecastID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Summary";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.DailyWeatherForecastID;
            }
            set
            {
                m_Internal.DailyWeatherForecastID = value;
            }
        }


//        Guid _DailyWeatherForecastID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid DailyWeatherForecastID
        {
            get { return m_Internal.DailyWeatherForecastID; }
            set
            {
                if(m_Internal.DailyWeatherForecastID!=value){
                    m_Internal.DailyWeatherForecastID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DailyWeatherForecastID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _ForecastDate;
        [LocalData]
        public DateTime ForecastDate
        {
            get { return m_Internal.ForecastDate; }
            set
            {
                if(m_Internal.ForecastDate!=value){
                    m_Internal.ForecastDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ForecastDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Summary;
        [LocalData]
        public string Summary
        {
            get { return m_Internal.Summary; }
            set
            {
                if(m_Internal.Summary!=value){
                    m_Internal.Summary=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Summary");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Icon;
        [LocalData]
        public string Icon
        {
            get { return m_Internal.Icon; }
            set
            {
                if(m_Internal.Icon!=value){
                    m_Internal.Icon=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Icon");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        long _SunriseTime;
        [LocalData]
        public long SunriseTime
        {
            get { return m_Internal.SunriseTime; }
            set
            {
                if(m_Internal.SunriseTime!=value){
                    m_Internal.SunriseTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SunriseTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        long _SunsetTime;
        [LocalData]
        public long SunsetTime
        {
            get { return m_Internal.SunsetTime; }
            set
            {
                if(m_Internal.SunsetTime!=value){
                    m_Internal.SunsetTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SunsetTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _MoonPhase;
        [LocalData]
        public double MoonPhase
        {
            get { return m_Internal.MoonPhase; }
            set
            {
                if(m_Internal.MoonPhase!=value){
                    m_Internal.MoonPhase=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MoonPhase");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _PrecipAccumulation;
        [LocalData]
        public double PrecipAccumulation
        {
            get { return m_Internal.PrecipAccumulation; }
            set
            {
                if(m_Internal.PrecipAccumulation!=value){
                    m_Internal.PrecipAccumulation=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PrecipAccumulation");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _PrecipIntensity;
        [LocalData]
        public double PrecipIntensity
        {
            get { return m_Internal.PrecipIntensity; }
            set
            {
                if(m_Internal.PrecipIntensity!=value){
                    m_Internal.PrecipIntensity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PrecipIntensity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _PrecipIntensityMax;
        [LocalData]
        public double PrecipIntensityMax
        {
            get { return m_Internal.PrecipIntensityMax; }
            set
            {
                if(m_Internal.PrecipIntensityMax!=value){
                    m_Internal.PrecipIntensityMax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PrecipIntensityMax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        long _PrecipIntensityMaxTime;
        [LocalData]
        public long PrecipIntensityMaxTime
        {
            get { return m_Internal.PrecipIntensityMaxTime; }
            set
            {
                if(m_Internal.PrecipIntensityMaxTime!=value){
                    m_Internal.PrecipIntensityMaxTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PrecipIntensityMaxTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _PrecipProbability;
        [LocalData]
        public double PrecipProbability
        {
            get { return m_Internal.PrecipProbability; }
            set
            {
                if(m_Internal.PrecipProbability!=value){
                    m_Internal.PrecipProbability=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PrecipProbability");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PrecipType;
        [LocalData]
        public string PrecipType
        {
            get { return m_Internal.PrecipType; }
            set
            {
                if(m_Internal.PrecipType!=value){
                    m_Internal.PrecipType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PrecipType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _TemperatureMin;
        [LocalData]
        public double TemperatureMin
        {
            get { return m_Internal.TemperatureMin; }
            set
            {
                if(m_Internal.TemperatureMin!=value){
                    m_Internal.TemperatureMin=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TemperatureMin");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        long _TemperatureMinTime;
        [LocalData]
        public long TemperatureMinTime
        {
            get { return m_Internal.TemperatureMinTime; }
            set
            {
                if(m_Internal.TemperatureMinTime!=value){
                    m_Internal.TemperatureMinTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TemperatureMinTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _TemperatureMax;
        [LocalData]
        public double TemperatureMax
        {
            get { return m_Internal.TemperatureMax; }
            set
            {
                if(m_Internal.TemperatureMax!=value){
                    m_Internal.TemperatureMax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TemperatureMax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        long _TemperatureMaxTime;
        [LocalData]
        public long TemperatureMaxTime
        {
            get { return m_Internal.TemperatureMaxTime; }
            set
            {
                if(m_Internal.TemperatureMaxTime!=value){
                    m_Internal.TemperatureMaxTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TemperatureMaxTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _ApparentTemperatureMin;
        [LocalData]
        public double ApparentTemperatureMin
        {
            get { return m_Internal.ApparentTemperatureMin; }
            set
            {
                if(m_Internal.ApparentTemperatureMin!=value){
                    m_Internal.ApparentTemperatureMin=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ApparentTemperatureMin");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        long _ApparentTemperatureMinTime;
        [LocalData]
        public long ApparentTemperatureMinTime
        {
            get { return m_Internal.ApparentTemperatureMinTime; }
            set
            {
                if(m_Internal.ApparentTemperatureMinTime!=value){
                    m_Internal.ApparentTemperatureMinTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ApparentTemperatureMinTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _ApparentTemperatureMax;
        [LocalData]
        public double ApparentTemperatureMax
        {
            get { return m_Internal.ApparentTemperatureMax; }
            set
            {
                if(m_Internal.ApparentTemperatureMax!=value){
                    m_Internal.ApparentTemperatureMax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ApparentTemperatureMax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        long _ApparentTemperatureMaxTime;
        [LocalData]
        public long ApparentTemperatureMaxTime
        {
            get { return m_Internal.ApparentTemperatureMaxTime; }
            set
            {
                if(m_Internal.ApparentTemperatureMaxTime!=value){
                    m_Internal.ApparentTemperatureMaxTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ApparentTemperatureMaxTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _DewPoint;
        [LocalData]
        public double DewPoint
        {
            get { return m_Internal.DewPoint; }
            set
            {
                if(m_Internal.DewPoint!=value){
                    m_Internal.DewPoint=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DewPoint");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _WindSpeed;
        [LocalData]
        public double WindSpeed
        {
            get { return m_Internal.WindSpeed; }
            set
            {
                if(m_Internal.WindSpeed!=value){
                    m_Internal.WindSpeed=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WindSpeed");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _WindBearing;
        [LocalData]
        public double WindBearing
        {
            get { return m_Internal.WindBearing; }
            set
            {
                if(m_Internal.WindBearing!=value){
                    m_Internal.WindBearing=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WindBearing");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _CloudCover;
        [LocalData]
        public double CloudCover
        {
            get { return m_Internal.CloudCover; }
            set
            {
                if(m_Internal.CloudCover!=value){
                    m_Internal.CloudCover=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CloudCover");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _Humidity;
        [LocalData]
        public double Humidity
        {
            get { return m_Internal.Humidity; }
            set
            {
                if(m_Internal.Humidity!=value){
                    m_Internal.Humidity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Humidity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _Pressure;
        [LocalData]
        public double Pressure
        {
            get { return m_Internal.Pressure; }
            set
            {
                if(m_Internal.Pressure!=value){
                    m_Internal.Pressure=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Pressure");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _Visibility;
        [LocalData]
        public double Visibility
        {
            get { return m_Internal.Visibility; }
            set
            {
                if(m_Internal.Visibility!=value){
                    m_Internal.Visibility=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Visibility");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _Ozone;
        [LocalData]
        public double Ozone
        {
            get { return m_Internal.Ozone; }
            set
            {
                if(m_Internal.Ozone!=value){
                    m_Internal.Ozone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Ozone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _QueryDate;
        [LocalData]
        public DateTime QueryDate
        {
            get { return m_Internal.QueryDate; }
            set
            {
                if(m_Internal.QueryDate!=value){
                    m_Internal.QueryDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QueryDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Lat;
        [LocalData]
        public decimal Lat
        {
            get { return m_Internal.Lat; }
            set
            {
                if(m_Internal.Lat!=value){
                    m_Internal.Lat=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Lat");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Lon;
        [LocalData]
        public decimal Lon
        {
            get { return m_Internal.Lon; }
            set
            {
                if(m_Internal.Lon!=value){
                    m_Internal.Lon=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Lon");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<DailyWeatherForecast, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IDAT3 : IWCFDataElement
    {
        
        DateTime StayDate { get; set; }
        
        string MarketCategory { get; set; }
        
        string RateProgramTier { get; set; }
        
        string RateCategoryCode { get; set; }
        
        string MarketCode { get; set; }
        
        int? RoomNights { get; set; }
        
        decimal? ADRNet { get; set; }
        
        decimal? RevenueNet { get; set; }
        
        int? AdditionalDemand { get; set; }
        
        int? TotalDemand { get; set; }
        
        decimal? AverageRoomNights { get; set; }
        
        decimal? AverageRevenue { get; set; }

        void Copy( IDAT3 _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataDAT3 : IDAT3
    {
        [DataMember]
        public DateTime StayDate { get; set; }
        [DataMember]
        public string MarketCategory { get; set; }
        [DataMember]
        public string RateProgramTier { get; set; }
        [DataMember]
        public string RateCategoryCode { get; set; }
        [DataMember]
        public string MarketCode { get; set; }
        [DataMember]
        public int? RoomNights { get; set; }
        [DataMember]
        public decimal? ADRNet { get; set; }
        [DataMember]
        public decimal? RevenueNet { get; set; }
        [DataMember]
        public int? AdditionalDemand { get; set; }
        [DataMember]
        public int? TotalDemand { get; set; }
        [DataMember]
        public decimal? AverageRoomNights { get; set; }
        [DataMember]
        public decimal? AverageRevenue { get; set; }

        public void Copy( IDAT3 _Item )
        {
             MarketCategory = _Item.MarketCategory;			
             RateProgramTier = _Item.RateProgramTier;			
             RateCategoryCode = _Item.RateCategoryCode;			
             MarketCode = _Item.MarketCode;			
             RoomNights = _Item.RoomNights;			
             ADRNet = _Item.ADRNet;			
             RevenueNet = _Item.RevenueNet;			
             AdditionalDemand = _Item.AdditionalDemand;			
             TotalDemand = _Item.TotalDemand;			
             AverageRoomNights = _Item.AverageRoomNights;			
             AverageRevenue = _Item.AverageRevenue;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new DAT3( this );
        }
    }


    /// <summary>
    /// A class which represents the DAT3 table in the RenAix Database.
    /// </summary>
    public partial class DAT3 : BaseDataObject<DataDAT3>, IActiveRecord, ICallOnCreated, IDAT3
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<DAT3> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<DAT3>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<DAT3> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(DAT3 item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                DAT3 item=new DAT3();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<DAT3> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public DAT3()
        {
            m_Internal = new DataDAT3();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public DAT3( bool _CallOnCreated )
        {
            m_Internal = new DataDAT3();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public DAT3(string connectionString, string providerName) 
        {
            m_Internal = new DataDAT3();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public DAT3( IDAT3 _Item )
        {
            m_Internal = new DataDAT3();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public DAT3( DataDAT3 _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IDAT3 _Item )
        {
            m_Internal.MarketCategory = _Item.MarketCategory;			
            m_Internal.RateProgramTier = _Item.RateProgramTier;			
            m_Internal.RateCategoryCode = _Item.RateCategoryCode;			
            m_Internal.MarketCode = _Item.MarketCode;			
            m_Internal.RoomNights = _Item.RoomNights;			
            m_Internal.ADRNet = _Item.ADRNet;			
            m_Internal.RevenueNet = _Item.RevenueNet;			
            m_Internal.AdditionalDemand = _Item.AdditionalDemand;			
            m_Internal.TotalDemand = _Item.TotalDemand;			
            m_Internal.AverageRoomNights = _Item.AverageRoomNights;			
            m_Internal.AverageRevenue = _Item.AverageRevenue;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new DAT3( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                DAT3.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DAT3>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public DAT3(Expression<Func<DAT3, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<DAT3> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<DAT3> _repo;
            
            if(db.TestMode)
            {
                DAT3.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DAT3>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<DAT3> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static DAT3 SingleOrDefault(Expression<Func<DAT3, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static DAT3 SingleOrDefault(Expression<Func<DAT3, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<DAT3> repo = GetRepo(connectionString,providerName);
            DAT3 single = repo.SingleOrDefault<DAT3>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<DAT3, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<DAT3, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static DAT3 GetByID(DateTime value) 
        {
            return DAT3.Find( L => L.StayDate.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<DAT3> Find(Expression<Func<DAT3, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<DAT3> Find(Expression<Func<DAT3, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<DAT3> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<DAT3> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<DAT3> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<DAT3> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<DAT3> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<DAT3> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "StayDate";
        }

        public object KeyValue()
        {
            return this.StayDate;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.MarketCategory )
//			{
//				rc = this.MarketCategory.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is DAT3)
            {
                DAT3 compare=(DAT3)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.MarketCategory.ToString();
        }

        public string DescriptorColumn() 
        {
            return "MarketCategory";
        }

        public static string GetKeyColumn()
        {
            return "StayDate";
        }        

        public static string GetDescriptorColumn()
        {
            return "MarketCategory";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _StayDate;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime StayDate
        {
            get { return m_Internal.StayDate; }
            set
            {
                if(m_Internal.StayDate!=value){
                    m_Internal.StayDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StayDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MarketCategory;
        [LocalData]
        public string MarketCategory
        {
            get { return m_Internal.MarketCategory; }
            set
            {
                if(m_Internal.MarketCategory!=value){
                    m_Internal.MarketCategory=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MarketCategory");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RateProgramTier;
        [LocalData]
        public string RateProgramTier
        {
            get { return m_Internal.RateProgramTier; }
            set
            {
                if(m_Internal.RateProgramTier!=value){
                    m_Internal.RateProgramTier=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RateProgramTier");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RateCategoryCode;
        [LocalData]
        public string RateCategoryCode
        {
            get { return m_Internal.RateCategoryCode; }
            set
            {
                if(m_Internal.RateCategoryCode!=value){
                    m_Internal.RateCategoryCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RateCategoryCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MarketCode;
        [LocalData]
        public string MarketCode
        {
            get { return m_Internal.MarketCode; }
            set
            {
                if(m_Internal.MarketCode!=value){
                    m_Internal.MarketCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MarketCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _RoomNights;
        [LocalData]
        public int? RoomNights
        {
            get { return m_Internal.RoomNights; }
            set
            {
                if(m_Internal.RoomNights!=value){
                    m_Internal.RoomNights=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoomNights");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _ADRNet;
        [LocalData]
        public decimal? ADRNet
        {
            get { return m_Internal.ADRNet; }
            set
            {
                if(m_Internal.ADRNet!=value){
                    m_Internal.ADRNet=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ADRNet");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _RevenueNet;
        [LocalData]
        public decimal? RevenueNet
        {
            get { return m_Internal.RevenueNet; }
            set
            {
                if(m_Internal.RevenueNet!=value){
                    m_Internal.RevenueNet=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RevenueNet");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _AdditionalDemand;
        [LocalData]
        public int? AdditionalDemand
        {
            get { return m_Internal.AdditionalDemand; }
            set
            {
                if(m_Internal.AdditionalDemand!=value){
                    m_Internal.AdditionalDemand=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdditionalDemand");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalDemand;
        [LocalData]
        public int? TotalDemand
        {
            get { return m_Internal.TotalDemand; }
            set
            {
                if(m_Internal.TotalDemand!=value){
                    m_Internal.TotalDemand=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalDemand");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _AverageRoomNights;
        [LocalData]
        public decimal? AverageRoomNights
        {
            get { return m_Internal.AverageRoomNights; }
            set
            {
                if(m_Internal.AverageRoomNights!=value){
                    m_Internal.AverageRoomNights=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AverageRoomNights");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _AverageRevenue;
        [LocalData]
        public decimal? AverageRevenue
        {
            get { return m_Internal.AverageRevenue; }
            set
            {
                if(m_Internal.AverageRevenue!=value){
                    m_Internal.AverageRevenue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AverageRevenue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<DAT3, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IMenuItem : IWCFDataElement
    {
        
        Guid MenuItemID { get; set; }
        
        string Name { get; set; }
        
        string Description { get; set; }
        
        decimal Cost { get; set; }
        
        decimal Price { get; set; }
        
        DateTime InsertDate { get; set; }
        
        DateTime UpdateDate { get; set; }

        void Copy( IMenuItem _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataMenuItem : IMenuItem
    {
        [DataMember]
        public Guid MenuItemID { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public decimal Cost { get; set; }
        [DataMember]
        public decimal Price { get; set; }
        [DataMember]
        public DateTime InsertDate { get; set; }
        [DataMember]
        public DateTime UpdateDate { get; set; }

        public void Copy( IMenuItem _Item )
        {
             Name = _Item.Name;			
             Description = _Item.Description;			
             Cost = _Item.Cost;			
             Price = _Item.Price;			
             InsertDate = _Item.InsertDate;			
             UpdateDate = _Item.UpdateDate;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new MenuItem( this );
        }
    }


    /// <summary>
    /// A class which represents the MenuItems table in the RenAix Database.
    /// </summary>
    public partial class MenuItem : BaseDataObject<DataMenuItem>, IActiveRecord, ICallOnCreated, IMenuItem
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<MenuItem> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<MenuItem>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<MenuItem> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(MenuItem item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                MenuItem item=new MenuItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<MenuItem> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public MenuItem()
        {
            m_Internal = new DataMenuItem();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.MenuItemID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public MenuItem( bool _CallOnCreated )
        {
            m_Internal = new DataMenuItem();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public MenuItem(string connectionString, string providerName) 
        {
            m_Internal = new DataMenuItem();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.MenuItemID = Guid.NewGuid( );     
        }

        public MenuItem( IMenuItem _Item )
        {
            m_Internal = new DataMenuItem();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public MenuItem( DataMenuItem _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IMenuItem _Item )
        {
            m_Internal.Name = _Item.Name;			
            m_Internal.Description = _Item.Description;			
            m_Internal.Cost = _Item.Cost;			
            m_Internal.Price = _Item.Price;			
            m_Internal.InsertDate = _Item.InsertDate;			
            m_Internal.UpdateDate = _Item.UpdateDate;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new MenuItem( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.MenuItemID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                MenuItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public MenuItem(Expression<Func<MenuItem, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<MenuItem> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<MenuItem> _repo;
            
            if(db.TestMode)
            {
                MenuItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MenuItem> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static MenuItem SingleOrDefault(Expression<Func<MenuItem, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static MenuItem SingleOrDefault(Expression<Func<MenuItem, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<MenuItem> repo = GetRepo(connectionString,providerName);
            MenuItem single = repo.SingleOrDefault<MenuItem>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<MenuItem, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<MenuItem, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyMenuItemLoaded = false;
        protected static MenuItem EmptyMenuItemMember = null;

        public static MenuItem GetByID(Guid? value) 
        {
            MenuItem rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static MenuItem GetByID(Guid value) 
        {
            MenuItem rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyMenuItemLoaded )
                    {
                        rc = EmptyMenuItemMember;
                    }
                    else
                    {
                        IsEmptyMenuItemLoaded = true;
                        rc = MenuItem.Find( L => L.MenuItemID.Equals( value ) ).FirstOrDefault( );
                        EmptyMenuItemMember = rc;
                    }
                }
                else
                {
                    rc = MenuItem.Find( L => L.MenuItemID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<MenuItem> Find(Expression<Func<MenuItem, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MenuItem> Find(Expression<Func<MenuItem, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<MenuItem> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<MenuItem> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MenuItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MenuItem> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MenuItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<MenuItem> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "MenuItemID";
        }

        public object KeyValue()
        {
            return this.MenuItemID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is MenuItem)
            {
                MenuItem compare=(MenuItem)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.MenuItemID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "MenuItemID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<BanquetMenu> BanquetMenus
        {
            get
            {
                  var repo=Jaxis.POS.Data.BanquetMenu.GetRepo();
                  return from items in repo.GetAll()
                       where items.MenuItemID == m_Internal.MenuItemID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.MenuItemID;
            }
            set
            {
                m_Internal.MenuItemID = value;
            }
        }


//        Guid _MenuItemID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid MenuItemID
        {
            get { return m_Internal.MenuItemID; }
            set
            {
                if(m_Internal.MenuItemID!=value){
                    m_Internal.MenuItemID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MenuItemID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Description;
        [LocalData]
        public string Description
        {
            get { return m_Internal.Description; }
            set
            {
                if(m_Internal.Description!=value){
                    m_Internal.Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Cost;
        [LocalData]
        public decimal Cost
        {
            get { return m_Internal.Cost; }
            set
            {
                if(m_Internal.Cost!=value){
                    m_Internal.Cost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Cost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Price;
        [LocalData]
        public decimal Price
        {
            get { return m_Internal.Price; }
            set
            {
                if(m_Internal.Price!=value){
                    m_Internal.Price=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _InsertDate;
        [LocalData]
        public DateTime InsertDate
        {
            get { return m_Internal.InsertDate; }
            set
            {
                if(m_Internal.InsertDate!=value){
                    m_Internal.InsertDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InsertDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _UpdateDate;
        [LocalData]
        public DateTime UpdateDate
        {
            get { return m_Internal.UpdateDate; }
            set
            {
                if(m_Internal.UpdateDate!=value){
                    m_Internal.UpdateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<MenuItem, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IMicrosTimePeriod : IWCFDataElement
    {
        
        int TimePeriodID { get; set; }
        
        string TimePeriodName { get; set; }

        void Copy( IMicrosTimePeriod _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataMicrosTimePeriod : IMicrosTimePeriod
    {
        [DataMember]
        public int TimePeriodID { get; set; }
        [DataMember]
        public string TimePeriodName { get; set; }

        public void Copy( IMicrosTimePeriod _Item )
        {
             TimePeriodName = _Item.TimePeriodName;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new MicrosTimePeriod( this );
        }
    }


    /// <summary>
    /// A class which represents the MicrosTimePeriods table in the RenAix Database.
    /// </summary>
    public partial class MicrosTimePeriod : BaseDataObject<DataMicrosTimePeriod>, IActiveRecord, ICallOnCreated, IMicrosTimePeriod
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<MicrosTimePeriod> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<MicrosTimePeriod>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<MicrosTimePeriod> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(MicrosTimePeriod item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                MicrosTimePeriod item=new MicrosTimePeriod();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<MicrosTimePeriod> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public MicrosTimePeriod()
        {
            m_Internal = new DataMicrosTimePeriod();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public MicrosTimePeriod( bool _CallOnCreated )
        {
            m_Internal = new DataMicrosTimePeriod();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public MicrosTimePeriod(string connectionString, string providerName) 
        {
            m_Internal = new DataMicrosTimePeriod();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public MicrosTimePeriod( IMicrosTimePeriod _Item )
        {
            m_Internal = new DataMicrosTimePeriod();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public MicrosTimePeriod( DataMicrosTimePeriod _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IMicrosTimePeriod _Item )
        {
            m_Internal.TimePeriodName = _Item.TimePeriodName;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new MicrosTimePeriod( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                MicrosTimePeriod.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MicrosTimePeriod>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public MicrosTimePeriod(Expression<Func<MicrosTimePeriod, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<MicrosTimePeriod> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<MicrosTimePeriod> _repo;
            
            if(db.TestMode)
            {
                MicrosTimePeriod.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MicrosTimePeriod>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MicrosTimePeriod> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static MicrosTimePeriod SingleOrDefault(Expression<Func<MicrosTimePeriod, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static MicrosTimePeriod SingleOrDefault(Expression<Func<MicrosTimePeriod, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<MicrosTimePeriod> repo = GetRepo(connectionString,providerName);
            MicrosTimePeriod single = repo.SingleOrDefault<MicrosTimePeriod>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<MicrosTimePeriod, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<MicrosTimePeriod, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static MicrosTimePeriod GetByID(int value) 
        {
            return MicrosTimePeriod.Find( L => L.TimePeriodID.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<MicrosTimePeriod> Find(Expression<Func<MicrosTimePeriod, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MicrosTimePeriod> Find(Expression<Func<MicrosTimePeriod, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<MicrosTimePeriod> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<MicrosTimePeriod> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MicrosTimePeriod> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MicrosTimePeriod> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MicrosTimePeriod> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<MicrosTimePeriod> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "TimePeriodID";
        }

        public object KeyValue()
        {
            return this.TimePeriodID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.TimePeriodName )
//			{
//				rc = this.TimePeriodName.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is MicrosTimePeriod)
            {
                MicrosTimePeriod compare=(MicrosTimePeriod)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public override int GetHashCode() 
        {
            return this.TimePeriodID;
        }


        public string DescriptorValue()
        {
            return this.TimePeriodName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "TimePeriodName";
        }

        public static string GetKeyColumn()
        {
            return "TimePeriodID";
        }        

        public static string GetDescriptorColumn()
        {
            return "TimePeriodName";
        }
        
        #region ' Foreign Keys '
        #endregion



//        int _TimePeriodID;
        [SubSonicPrimaryKey]
        [LocalData]
        public int TimePeriodID
        {
            get { return m_Internal.TimePeriodID; }
            set
            {
                if(m_Internal.TimePeriodID!=value){
                    m_Internal.TimePeriodID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TimePeriodID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TimePeriodName;
        [LocalData]
        public string TimePeriodName
        {
            get { return m_Internal.TimePeriodName; }
            set
            {
                if(m_Internal.TimePeriodName!=value){
                    m_Internal.TimePeriodName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TimePeriodName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<MicrosTimePeriod, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IPOSEstablisment : IWCFDataElement
    {
        
        Guid EstablishmentID { get; set; }
        
        string Establishment { get; set; }
        
        int? EstablishmentNumber { get; set; }

        void Copy( IPOSEstablisment _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataPOSEstablisment : IPOSEstablisment
    {
        [DataMember]
        public Guid EstablishmentID { get; set; }
        [DataMember]
        public string Establishment { get; set; }
        [DataMember]
        public int? EstablishmentNumber { get; set; }

        public void Copy( IPOSEstablisment _Item )
        {
             Establishment = _Item.Establishment;			
             EstablishmentNumber = _Item.EstablishmentNumber;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new POSEstablisment( this );
        }
    }


    /// <summary>
    /// A class which represents the POSEstablisments table in the RenAix Database.
    /// </summary>
    public partial class POSEstablisment : BaseDataObject<DataPOSEstablisment>, IActiveRecord, ICallOnCreated, IPOSEstablisment
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<POSEstablisment> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<POSEstablisment>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<POSEstablisment> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(POSEstablisment item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                POSEstablisment item=new POSEstablisment();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<POSEstablisment> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public POSEstablisment()
        {
            m_Internal = new DataPOSEstablisment();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.EstablishmentID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public POSEstablisment( bool _CallOnCreated )
        {
            m_Internal = new DataPOSEstablisment();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public POSEstablisment(string connectionString, string providerName) 
        {
            m_Internal = new DataPOSEstablisment();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.EstablishmentID = Guid.NewGuid( );     
        }

        public POSEstablisment( IPOSEstablisment _Item )
        {
            m_Internal = new DataPOSEstablisment();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public POSEstablisment( DataPOSEstablisment _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IPOSEstablisment _Item )
        {
            m_Internal.Establishment = _Item.Establishment;			
            m_Internal.EstablishmentNumber = _Item.EstablishmentNumber;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new POSEstablisment( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.EstablishmentID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                POSEstablisment.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSEstablisment>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public POSEstablisment(Expression<Func<POSEstablisment, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<POSEstablisment> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<POSEstablisment> _repo;
            
            if(db.TestMode)
            {
                POSEstablisment.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSEstablisment>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<POSEstablisment> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static POSEstablisment SingleOrDefault(Expression<Func<POSEstablisment, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static POSEstablisment SingleOrDefault(Expression<Func<POSEstablisment, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<POSEstablisment> repo = GetRepo(connectionString,providerName);
            POSEstablisment single = repo.SingleOrDefault<POSEstablisment>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<POSEstablisment, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<POSEstablisment, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyPOSEstablismentLoaded = false;
        protected static POSEstablisment EmptyPOSEstablismentMember = null;

        public static POSEstablisment GetByID(Guid? value) 
        {
            POSEstablisment rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static POSEstablisment GetByID(Guid value) 
        {
            POSEstablisment rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyPOSEstablismentLoaded )
                    {
                        rc = EmptyPOSEstablismentMember;
                    }
                    else
                    {
                        IsEmptyPOSEstablismentLoaded = true;
                        rc = POSEstablisment.Find( L => L.EstablishmentID.Equals( value ) ).FirstOrDefault( );
                        EmptyPOSEstablismentMember = rc;
                    }
                }
                else
                {
                    rc = POSEstablisment.Find( L => L.EstablishmentID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<POSEstablisment> Find(Expression<Func<POSEstablisment, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<POSEstablisment> Find(Expression<Func<POSEstablisment, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<POSEstablisment> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<POSEstablisment> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<POSEstablisment> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<POSEstablisment> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<POSEstablisment> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<POSEstablisment> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "EstablishmentID";
        }

        public object KeyValue()
        {
            return this.EstablishmentID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Establishment )
//			{
//				rc = this.Establishment.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is POSEstablisment)
            {
                POSEstablisment compare=(POSEstablisment)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.EstablishmentID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Establishment.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Establishment";
        }

        public static string GetKeyColumn()
        {
            return "EstablishmentID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Establishment";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.EstablishmentID;
            }
            set
            {
                m_Internal.EstablishmentID = value;
            }
        }


//        Guid _EstablishmentID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid EstablishmentID
        {
            get { return m_Internal.EstablishmentID; }
            set
            {
                if(m_Internal.EstablishmentID!=value){
                    m_Internal.EstablishmentID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EstablishmentID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Establishment;
        [LocalData]
        public string Establishment
        {
            get { return m_Internal.Establishment; }
            set
            {
                if(m_Internal.Establishment!=value){
                    m_Internal.Establishment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Establishment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EstablishmentNumber;
        [LocalData]
        public int? EstablishmentNumber
        {
            get { return m_Internal.EstablishmentNumber; }
            set
            {
                if(m_Internal.EstablishmentNumber!=value){
                    m_Internal.EstablishmentNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EstablishmentNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<POSEstablisment, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IPOSPaymentDatum : IWCFDataElement
    {
        
        Guid PaymentDataID { get; set; }
        
        Guid POSTicketID { get; set; }
        
        string AccountNumber { get; set; }
        
        string RoomNumber { get; set; }
        
        string CustomerName { get; set; }
        
        string PaymentType { get; set; }
        
        decimal Payment { get; set; }

        void Copy( IPOSPaymentDatum _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataPOSPaymentDatum : IPOSPaymentDatum
    {
        [DataMember]
        public Guid PaymentDataID { get; set; }
        [DataMember]
        public Guid POSTicketID { get; set; }
        [DataMember]
        public string AccountNumber { get; set; }
        [DataMember]
        public string RoomNumber { get; set; }
        [DataMember]
        public string CustomerName { get; set; }
        [DataMember]
        public string PaymentType { get; set; }
        [DataMember]
        public decimal Payment { get; set; }

        public void Copy( IPOSPaymentDatum _Item )
        {
             POSTicketID = _Item.POSTicketID;			
             AccountNumber = _Item.AccountNumber;			
             RoomNumber = _Item.RoomNumber;			
             CustomerName = _Item.CustomerName;			
             PaymentType = _Item.PaymentType;			
             Payment = _Item.Payment;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new POSPaymentDatum( this );
        }
    }


    /// <summary>
    /// A class which represents the POSPaymentData table in the RenAix Database.
    /// </summary>
    public partial class POSPaymentDatum : BaseDataObject<DataPOSPaymentDatum>, IActiveRecord, ICallOnCreated, IPOSPaymentDatum
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<POSPaymentDatum> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<POSPaymentDatum>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<POSPaymentDatum> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(POSPaymentDatum item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                POSPaymentDatum item=new POSPaymentDatum();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<POSPaymentDatum> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public POSPaymentDatum()
        {
            m_Internal = new DataPOSPaymentDatum();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.PaymentDataID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public POSPaymentDatum( bool _CallOnCreated )
        {
            m_Internal = new DataPOSPaymentDatum();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public POSPaymentDatum(string connectionString, string providerName) 
        {
            m_Internal = new DataPOSPaymentDatum();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.PaymentDataID = Guid.NewGuid( );     
        }

        public POSPaymentDatum( IPOSPaymentDatum _Item )
        {
            m_Internal = new DataPOSPaymentDatum();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public POSPaymentDatum( DataPOSPaymentDatum _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IPOSPaymentDatum _Item )
        {
            m_Internal.POSTicketID = _Item.POSTicketID;			
            m_Internal.AccountNumber = _Item.AccountNumber;			
            m_Internal.RoomNumber = _Item.RoomNumber;			
            m_Internal.CustomerName = _Item.CustomerName;			
            m_Internal.PaymentType = _Item.PaymentType;			
            m_Internal.Payment = _Item.Payment;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new POSPaymentDatum( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.PaymentDataID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                POSPaymentDatum.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSPaymentDatum>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public POSPaymentDatum(Expression<Func<POSPaymentDatum, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<POSPaymentDatum> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<POSPaymentDatum> _repo;
            
            if(db.TestMode)
            {
                POSPaymentDatum.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSPaymentDatum>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<POSPaymentDatum> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static POSPaymentDatum SingleOrDefault(Expression<Func<POSPaymentDatum, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static POSPaymentDatum SingleOrDefault(Expression<Func<POSPaymentDatum, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<POSPaymentDatum> repo = GetRepo(connectionString,providerName);
            POSPaymentDatum single = repo.SingleOrDefault<POSPaymentDatum>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<POSPaymentDatum, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<POSPaymentDatum, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyPOSPaymentDatumLoaded = false;
        protected static POSPaymentDatum EmptyPOSPaymentDatumMember = null;

        public static POSPaymentDatum GetByID(Guid? value) 
        {
            POSPaymentDatum rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static POSPaymentDatum GetByID(Guid value) 
        {
            POSPaymentDatum rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyPOSPaymentDatumLoaded )
                    {
                        rc = EmptyPOSPaymentDatumMember;
                    }
                    else
                    {
                        IsEmptyPOSPaymentDatumLoaded = true;
                        rc = POSPaymentDatum.Find( L => L.PaymentDataID.Equals( value ) ).FirstOrDefault( );
                        EmptyPOSPaymentDatumMember = rc;
                    }
                }
                else
                {
                    rc = POSPaymentDatum.Find( L => L.PaymentDataID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<POSPaymentDatum> Find(Expression<Func<POSPaymentDatum, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<POSPaymentDatum> Find(Expression<Func<POSPaymentDatum, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<POSPaymentDatum> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<POSPaymentDatum> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<POSPaymentDatum> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<POSPaymentDatum> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<POSPaymentDatum> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<POSPaymentDatum> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "PaymentDataID";
        }

        public object KeyValue()
        {
            return this.PaymentDataID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.AccountNumber )
//			{
//				rc = this.AccountNumber.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is POSPaymentDatum)
            {
                POSPaymentDatum compare=(POSPaymentDatum)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.PaymentDataID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.AccountNumber.ToString();
        }

        public string DescriptorColumn() 
        {
            return "AccountNumber";
        }

        public static string GetKeyColumn()
        {
            return "PaymentDataID";
        }        

        public static string GetDescriptorColumn()
        {
            return "AccountNumber";
        }
        
        #region ' Foreign Keys '
        public IQueryable<POSTicket> POSTicketsItem
        {
            get
            {
                  var repo=Jaxis.POS.Data.POSTicket.GetRepo();
                  return from items in repo.GetAll()
                       where items.POSTicketID == m_Internal.POSTicketID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.PaymentDataID;
            }
            set
            {
                m_Internal.PaymentDataID = value;
            }
        }


//        Guid _PaymentDataID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid PaymentDataID
        {
            get { return m_Internal.PaymentDataID; }
            set
            {
                if(m_Internal.PaymentDataID!=value){
                    m_Internal.PaymentDataID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaymentDataID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _POSTicketID;
        [LocalData]
        public Guid POSTicketID
        {
            get { return m_Internal.POSTicketID; }
            set
            {
                if(m_Internal.POSTicketID!=value){
                    m_Internal.POSTicketID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _AccountNumber;
        [LocalData]
        public string AccountNumber
        {
            get { return m_Internal.AccountNumber; }
            set
            {
                if(m_Internal.AccountNumber!=value){
                    m_Internal.AccountNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AccountNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RoomNumber;
        [LocalData]
        public string RoomNumber
        {
            get { return m_Internal.RoomNumber; }
            set
            {
                if(m_Internal.RoomNumber!=value){
                    m_Internal.RoomNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoomNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CustomerName;
        [LocalData]
        public string CustomerName
        {
            get { return m_Internal.CustomerName; }
            set
            {
                if(m_Internal.CustomerName!=value){
                    m_Internal.CustomerName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PaymentType;
        [LocalData]
        public string PaymentType
        {
            get { return m_Internal.PaymentType; }
            set
            {
                if(m_Internal.PaymentType!=value){
                    m_Internal.PaymentType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaymentType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Payment;
        [LocalData]
        public decimal Payment
        {
            get { return m_Internal.Payment; }
            set
            {
                if(m_Internal.Payment!=value){
                    m_Internal.Payment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Payment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<POSPaymentDatum, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IPOSTicketItemModifier : IWCFDataElement
    {
        
        Guid POSTicketITemModifierID { get; set; }
        
        Guid POSTicketItemID { get; set; }
        
        string Name { get; set; }
        
        decimal? Price { get; set; }

        void Copy( IPOSTicketItemModifier _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataPOSTicketItemModifier : IPOSTicketItemModifier
    {
        [DataMember]
        public Guid POSTicketITemModifierID { get; set; }
        [DataMember]
        public Guid POSTicketItemID { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public decimal? Price { get; set; }

        public void Copy( IPOSTicketItemModifier _Item )
        {
             POSTicketItemID = _Item.POSTicketItemID;			
             Name = _Item.Name;			
             Price = _Item.Price;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new POSTicketItemModifier( this );
        }
    }


    /// <summary>
    /// A class which represents the POSTicketItemModifiers table in the RenAix Database.
    /// </summary>
    public partial class POSTicketItemModifier : BaseDataObject<DataPOSTicketItemModifier>, IActiveRecord, ICallOnCreated, IPOSTicketItemModifier
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<POSTicketItemModifier> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<POSTicketItemModifier>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<POSTicketItemModifier> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(POSTicketItemModifier item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                POSTicketItemModifier item=new POSTicketItemModifier();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<POSTicketItemModifier> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public POSTicketItemModifier()
        {
            m_Internal = new DataPOSTicketItemModifier();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.POSTicketITemModifierID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public POSTicketItemModifier( bool _CallOnCreated )
        {
            m_Internal = new DataPOSTicketItemModifier();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public POSTicketItemModifier(string connectionString, string providerName) 
        {
            m_Internal = new DataPOSTicketItemModifier();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.POSTicketITemModifierID = Guid.NewGuid( );     
        }

        public POSTicketItemModifier( IPOSTicketItemModifier _Item )
        {
            m_Internal = new DataPOSTicketItemModifier();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public POSTicketItemModifier( DataPOSTicketItemModifier _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IPOSTicketItemModifier _Item )
        {
            m_Internal.POSTicketItemID = _Item.POSTicketItemID;			
            m_Internal.Name = _Item.Name;			
            m_Internal.Price = _Item.Price;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new POSTicketItemModifier( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.POSTicketITemModifierID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                POSTicketItemModifier.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSTicketItemModifier>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public POSTicketItemModifier(Expression<Func<POSTicketItemModifier, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<POSTicketItemModifier> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<POSTicketItemModifier> _repo;
            
            if(db.TestMode)
            {
                POSTicketItemModifier.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSTicketItemModifier>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<POSTicketItemModifier> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static POSTicketItemModifier SingleOrDefault(Expression<Func<POSTicketItemModifier, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static POSTicketItemModifier SingleOrDefault(Expression<Func<POSTicketItemModifier, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<POSTicketItemModifier> repo = GetRepo(connectionString,providerName);
            POSTicketItemModifier single = repo.SingleOrDefault<POSTicketItemModifier>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<POSTicketItemModifier, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<POSTicketItemModifier, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyPOSTicketItemModifierLoaded = false;
        protected static POSTicketItemModifier EmptyPOSTicketItemModifierMember = null;

        public static POSTicketItemModifier GetByID(Guid? value) 
        {
            POSTicketItemModifier rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static POSTicketItemModifier GetByID(Guid value) 
        {
            POSTicketItemModifier rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyPOSTicketItemModifierLoaded )
                    {
                        rc = EmptyPOSTicketItemModifierMember;
                    }
                    else
                    {
                        IsEmptyPOSTicketItemModifierLoaded = true;
                        rc = POSTicketItemModifier.Find( L => L.POSTicketITemModifierID.Equals( value ) ).FirstOrDefault( );
                        EmptyPOSTicketItemModifierMember = rc;
                    }
                }
                else
                {
                    rc = POSTicketItemModifier.Find( L => L.POSTicketITemModifierID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<POSTicketItemModifier> Find(Expression<Func<POSTicketItemModifier, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<POSTicketItemModifier> Find(Expression<Func<POSTicketItemModifier, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<POSTicketItemModifier> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<POSTicketItemModifier> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<POSTicketItemModifier> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<POSTicketItemModifier> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<POSTicketItemModifier> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<POSTicketItemModifier> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "POSTicketITemModifierID";
        }

        public object KeyValue()
        {
            return this.POSTicketITemModifierID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is POSTicketItemModifier)
            {
                POSTicketItemModifier compare=(POSTicketItemModifier)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.POSTicketITemModifierID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "POSTicketITemModifierID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<POSTicketItem> POSTicketItemsItem
        {
            get
            {
                  var repo=Jaxis.POS.Data.POSTicketItem.GetRepo();
                  return from items in repo.GetAll()
                       where items.POSTicketItemID == m_Internal.POSTicketItemID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.POSTicketITemModifierID;
            }
            set
            {
                m_Internal.POSTicketITemModifierID = value;
            }
        }


//        Guid _POSTicketITemModifierID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid POSTicketITemModifierID
        {
            get { return m_Internal.POSTicketITemModifierID; }
            set
            {
                if(m_Internal.POSTicketITemModifierID!=value){
                    m_Internal.POSTicketITemModifierID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketITemModifierID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _POSTicketItemID;
        [LocalData]
        public Guid POSTicketItemID
        {
            get { return m_Internal.POSTicketItemID; }
            set
            {
                if(m_Internal.POSTicketItemID!=value){
                    m_Internal.POSTicketItemID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketItemID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Price;
        [LocalData]
        public decimal? Price
        {
            get { return m_Internal.Price; }
            set
            {
                if(m_Internal.Price!=value){
                    m_Internal.Price=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<POSTicketItemModifier, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IPOSTicketItem : IWCFDataElement
    {
        
        Guid POSTicketItemID { get; set; }
        
        Guid POSTicketID { get; set; }
        
        string Comment { get; set; }
        
        string Description { get; set; }
        
        decimal? Price { get; set; }
        
        int Reconciled { get; set; }
        
        int Quantity { get; set; }
        
        int Status { get; set; }
        
        bool Credit { get; set; }

        void Copy( IPOSTicketItem _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataPOSTicketItem : IPOSTicketItem
    {
        [DataMember]
        public Guid POSTicketItemID { get; set; }
        [DataMember]
        public Guid POSTicketID { get; set; }
        [DataMember]
        public string Comment { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public int Reconciled { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public int Status { get; set; }
        [DataMember]
        public bool Credit { get; set; }

        public void Copy( IPOSTicketItem _Item )
        {
             POSTicketID = _Item.POSTicketID;			
             Comment = _Item.Comment;			
             Description = _Item.Description;			
             Price = _Item.Price;			
             Reconciled = _Item.Reconciled;			
             Quantity = _Item.Quantity;			
             Status = _Item.Status;			
             Credit = _Item.Credit;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new POSTicketItem( this );
        }
    }


    /// <summary>
    /// A class which represents the POSTicketItems table in the RenAix Database.
    /// </summary>
    public partial class POSTicketItem : BaseDataObject<DataPOSTicketItem>, IActiveRecord, ICallOnCreated, IPOSTicketItem
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<POSTicketItem> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<POSTicketItem>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<POSTicketItem> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(POSTicketItem item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                POSTicketItem item=new POSTicketItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<POSTicketItem> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public POSTicketItem()
        {
            m_Internal = new DataPOSTicketItem();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.POSTicketItemID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public POSTicketItem( bool _CallOnCreated )
        {
            m_Internal = new DataPOSTicketItem();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public POSTicketItem(string connectionString, string providerName) 
        {
            m_Internal = new DataPOSTicketItem();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.POSTicketItemID = Guid.NewGuid( );     
        }

        public POSTicketItem( IPOSTicketItem _Item )
        {
            m_Internal = new DataPOSTicketItem();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public POSTicketItem( DataPOSTicketItem _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IPOSTicketItem _Item )
        {
            m_Internal.POSTicketID = _Item.POSTicketID;			
            m_Internal.Comment = _Item.Comment;			
            m_Internal.Description = _Item.Description;			
            m_Internal.Price = _Item.Price;			
            m_Internal.Reconciled = _Item.Reconciled;			
            m_Internal.Quantity = _Item.Quantity;			
            m_Internal.Status = _Item.Status;			
            m_Internal.Credit = _Item.Credit;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new POSTicketItem( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.POSTicketItemID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                POSTicketItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSTicketItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public POSTicketItem(Expression<Func<POSTicketItem, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<POSTicketItem> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<POSTicketItem> _repo;
            
            if(db.TestMode)
            {
                POSTicketItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSTicketItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<POSTicketItem> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static POSTicketItem SingleOrDefault(Expression<Func<POSTicketItem, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static POSTicketItem SingleOrDefault(Expression<Func<POSTicketItem, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<POSTicketItem> repo = GetRepo(connectionString,providerName);
            POSTicketItem single = repo.SingleOrDefault<POSTicketItem>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<POSTicketItem, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<POSTicketItem, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyPOSTicketItemLoaded = false;
        protected static POSTicketItem EmptyPOSTicketItemMember = null;

        public static POSTicketItem GetByID(Guid? value) 
        {
            POSTicketItem rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static POSTicketItem GetByID(Guid value) 
        {
            POSTicketItem rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyPOSTicketItemLoaded )
                    {
                        rc = EmptyPOSTicketItemMember;
                    }
                    else
                    {
                        IsEmptyPOSTicketItemLoaded = true;
                        rc = POSTicketItem.Find( L => L.POSTicketItemID.Equals( value ) ).FirstOrDefault( );
                        EmptyPOSTicketItemMember = rc;
                    }
                }
                else
                {
                    rc = POSTicketItem.Find( L => L.POSTicketItemID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<POSTicketItem> Find(Expression<Func<POSTicketItem, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<POSTicketItem> Find(Expression<Func<POSTicketItem, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<POSTicketItem> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<POSTicketItem> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<POSTicketItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<POSTicketItem> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<POSTicketItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<POSTicketItem> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "POSTicketItemID";
        }

        public object KeyValue()
        {
            return this.POSTicketItemID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Comment )
//			{
//				rc = this.Comment.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is POSTicketItem)
            {
                POSTicketItem compare=(POSTicketItem)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.POSTicketItemID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Comment.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Comment";
        }

        public static string GetKeyColumn()
        {
            return "POSTicketItemID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Comment";
        }
        
        #region ' Foreign Keys '
        public IQueryable<POSTicket> POSTicketsItem
        {
            get
            {
                  var repo=Jaxis.POS.Data.POSTicket.GetRepo();
                  return from items in repo.GetAll()
                       where items.POSTicketID == m_Internal.POSTicketID
                       select items;
            }
        }
        public IQueryable<POSTicketItemModifier> POSTicketItemModifiers
        {
            get
            {
                  var repo=Jaxis.POS.Data.POSTicketItemModifier.GetRepo();
                  return from items in repo.GetAll()
                       where items.POSTicketItemID == m_Internal.POSTicketItemID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.POSTicketItemID;
            }
            set
            {
                m_Internal.POSTicketItemID = value;
            }
        }


//        Guid _POSTicketItemID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid POSTicketItemID
        {
            get { return m_Internal.POSTicketItemID; }
            set
            {
                if(m_Internal.POSTicketItemID!=value){
                    m_Internal.POSTicketItemID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketItemID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _POSTicketID;
        [LocalData]
        public Guid POSTicketID
        {
            get { return m_Internal.POSTicketID; }
            set
            {
                if(m_Internal.POSTicketID!=value){
                    m_Internal.POSTicketID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Comment;
        [LocalData]
        public string Comment
        {
            get { return m_Internal.Comment; }
            set
            {
                if(m_Internal.Comment!=value){
                    m_Internal.Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Description;
        [LocalData]
        public string Description
        {
            get { return m_Internal.Description; }
            set
            {
                if(m_Internal.Description!=value){
                    m_Internal.Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Price;
        [LocalData]
        public decimal? Price
        {
            get { return m_Internal.Price; }
            set
            {
                if(m_Internal.Price!=value){
                    m_Internal.Price=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Reconciled;
        [LocalData]
        public int Reconciled
        {
            get { return m_Internal.Reconciled; }
            set
            {
                if(m_Internal.Reconciled!=value){
                    m_Internal.Reconciled=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Reconciled");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Quantity;
        [LocalData]
        public int Quantity
        {
            get { return m_Internal.Quantity; }
            set
            {
                if(m_Internal.Quantity!=value){
                    m_Internal.Quantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Quantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Status;
        [LocalData]
        public int Status
        {
            get { return m_Internal.Status; }
            set
            {
                if(m_Internal.Status!=value){
                    m_Internal.Status=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Status");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        bool _Credit;
        [LocalData]
        public bool Credit
        {
            get { return m_Internal.Credit; }
            set
            {
                if(m_Internal.Credit!=value){
                    m_Internal.Credit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Credit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<POSTicketItem, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IPOSTicket : IWCFDataElement
    {
        
        Guid POSTicketID { get; set; }
        
        string CheckNumber { get; set; }
        
        string Comments { get; set; }
        
        DateTime TicketDate { get; set; }
        
        string Establishment { get; set; }
        
        string Server { get; set; }
        
        string ServerName { get; set; }
        
        int GuestCount { get; set; }
        
        string CustomerTable { get; set; }
        
        string RawData { get; set; }
        
        int TouchCount { get; set; }
        
        decimal TipAmount { get; set; }
        
        int? GuestCountModified { get; set; }
        
        decimal? TicketTotal { get; set; }
        
        string DataSource { get; set; }
        
        string TransactionID { get; set; }
        
        long? TransactionType { get; set; }

        void Copy( IPOSTicket _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataPOSTicket : IPOSTicket
    {
        [DataMember]
        public Guid POSTicketID { get; set; }
        [DataMember]
        public string CheckNumber { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public DateTime TicketDate { get; set; }
        [DataMember]
        public string Establishment { get; set; }
        [DataMember]
        public string Server { get; set; }
        [DataMember]
        public string ServerName { get; set; }
        [DataMember]
        public int GuestCount { get; set; }
        [DataMember]
        public string CustomerTable { get; set; }
        [DataMember]
        public string RawData { get; set; }
        [DataMember]
        public int TouchCount { get; set; }
        [DataMember]
        public decimal TipAmount { get; set; }
        [DataMember]
        public int? GuestCountModified { get; set; }
        [DataMember]
        public decimal? TicketTotal { get; set; }
        [DataMember]
        public string DataSource { get; set; }
        [DataMember]
        public string TransactionID { get; set; }
        [DataMember]
        public long? TransactionType { get; set; }

        public void Copy( IPOSTicket _Item )
        {
             CheckNumber = _Item.CheckNumber;			
             Comments = _Item.Comments;			
             TicketDate = _Item.TicketDate;			
             Establishment = _Item.Establishment;			
             Server = _Item.Server;			
             ServerName = _Item.ServerName;			
             GuestCount = _Item.GuestCount;			
             CustomerTable = _Item.CustomerTable;			
             RawData = _Item.RawData;			
             TouchCount = _Item.TouchCount;			
             TipAmount = _Item.TipAmount;			
             GuestCountModified = _Item.GuestCountModified;			
             TicketTotal = _Item.TicketTotal;			
             DataSource = _Item.DataSource;			
             TransactionID = _Item.TransactionID;			
             TransactionType = _Item.TransactionType;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new POSTicket( this );
        }
    }


    /// <summary>
    /// A class which represents the POSTickets table in the RenAix Database.
    /// </summary>
    public partial class POSTicket : BaseDataObject<DataPOSTicket>, IActiveRecord, ICallOnCreated, IPOSTicket
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<POSTicket> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<POSTicket>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<POSTicket> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(POSTicket item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                POSTicket item=new POSTicket();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<POSTicket> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public POSTicket()
        {
            m_Internal = new DataPOSTicket();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.POSTicketID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public POSTicket( bool _CallOnCreated )
        {
            m_Internal = new DataPOSTicket();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public POSTicket(string connectionString, string providerName) 
        {
            m_Internal = new DataPOSTicket();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.POSTicketID = Guid.NewGuid( );     
        }

        public POSTicket( IPOSTicket _Item )
        {
            m_Internal = new DataPOSTicket();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public POSTicket( DataPOSTicket _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IPOSTicket _Item )
        {
            m_Internal.CheckNumber = _Item.CheckNumber;			
            m_Internal.Comments = _Item.Comments;			
            m_Internal.TicketDate = _Item.TicketDate;			
            m_Internal.Establishment = _Item.Establishment;			
            m_Internal.Server = _Item.Server;			
            m_Internal.ServerName = _Item.ServerName;			
            m_Internal.GuestCount = _Item.GuestCount;			
            m_Internal.CustomerTable = _Item.CustomerTable;			
            m_Internal.RawData = _Item.RawData;			
            m_Internal.TouchCount = _Item.TouchCount;			
            m_Internal.TipAmount = _Item.TipAmount;			
            m_Internal.GuestCountModified = _Item.GuestCountModified;			
            m_Internal.TicketTotal = _Item.TicketTotal;			
            m_Internal.DataSource = _Item.DataSource;			
            m_Internal.TransactionID = _Item.TransactionID;			
            m_Internal.TransactionType = _Item.TransactionType;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new POSTicket( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.POSTicketID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                POSTicket.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSTicket>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public POSTicket(Expression<Func<POSTicket, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<POSTicket> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<POSTicket> _repo;
            
            if(db.TestMode)
            {
                POSTicket.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSTicket>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<POSTicket> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static POSTicket SingleOrDefault(Expression<Func<POSTicket, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static POSTicket SingleOrDefault(Expression<Func<POSTicket, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<POSTicket> repo = GetRepo(connectionString,providerName);
            POSTicket single = repo.SingleOrDefault<POSTicket>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<POSTicket, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<POSTicket, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyPOSTicketLoaded = false;
        protected static POSTicket EmptyPOSTicketMember = null;

        public static POSTicket GetByID(Guid? value) 
        {
            POSTicket rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static POSTicket GetByID(Guid value) 
        {
            POSTicket rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyPOSTicketLoaded )
                    {
                        rc = EmptyPOSTicketMember;
                    }
                    else
                    {
                        IsEmptyPOSTicketLoaded = true;
                        rc = POSTicket.Find( L => L.POSTicketID.Equals( value ) ).FirstOrDefault( );
                        EmptyPOSTicketMember = rc;
                    }
                }
                else
                {
                    rc = POSTicket.Find( L => L.POSTicketID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<POSTicket> Find(Expression<Func<POSTicket, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<POSTicket> Find(Expression<Func<POSTicket, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<POSTicket> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<POSTicket> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<POSTicket> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<POSTicket> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<POSTicket> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<POSTicket> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "POSTicketID";
        }

        public object KeyValue()
        {
            return this.POSTicketID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.CheckNumber )
//			{
//				rc = this.CheckNumber.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is POSTicket)
            {
                POSTicket compare=(POSTicket)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.POSTicketID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.CheckNumber.ToString();
        }

        public string DescriptorColumn() 
        {
            return "CheckNumber";
        }

        public static string GetKeyColumn()
        {
            return "POSTicketID";
        }        

        public static string GetDescriptorColumn()
        {
            return "CheckNumber";
        }
        
        #region ' Foreign Keys '
        public IQueryable<POSPaymentDatum> POSPaymentData
        {
            get
            {
                  var repo=Jaxis.POS.Data.POSPaymentDatum.GetRepo();
                  return from items in repo.GetAll()
                       where items.POSTicketID == m_Internal.POSTicketID
                       select items;
            }
        }
        public IQueryable<POSTicketItem> POSTicketItems
        {
            get
            {
                  var repo=Jaxis.POS.Data.POSTicketItem.GetRepo();
                  return from items in repo.GetAll()
                       where items.POSTicketID == m_Internal.POSTicketID
                       select items;
            }
        }
        public IQueryable<POSTVADatum> POSTVAData
        {
            get
            {
                  var repo=Jaxis.POS.Data.POSTVADatum.GetRepo();
                  return from items in repo.GetAll()
                       where items.POSTicketID == m_Internal.POSTicketID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.POSTicketID;
            }
            set
            {
                m_Internal.POSTicketID = value;
            }
        }


//        Guid _POSTicketID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid POSTicketID
        {
            get { return m_Internal.POSTicketID; }
            set
            {
                if(m_Internal.POSTicketID!=value){
                    m_Internal.POSTicketID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CheckNumber;
        [LocalData]
        public string CheckNumber
        {
            get { return m_Internal.CheckNumber; }
            set
            {
                if(m_Internal.CheckNumber!=value){
                    m_Internal.CheckNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Comments;
        [LocalData]
        public string Comments
        {
            get { return m_Internal.Comments; }
            set
            {
                if(m_Internal.Comments!=value){
                    m_Internal.Comments=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comments");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _TicketDate;
        [LocalData]
        public DateTime TicketDate
        {
            get { return m_Internal.TicketDate; }
            set
            {
                if(m_Internal.TicketDate!=value){
                    m_Internal.TicketDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Establishment;
        [LocalData]
        public string Establishment
        {
            get { return m_Internal.Establishment; }
            set
            {
                if(m_Internal.Establishment!=value){
                    m_Internal.Establishment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Establishment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Server;
        [LocalData]
        public string Server
        {
            get { return m_Internal.Server; }
            set
            {
                if(m_Internal.Server!=value){
                    m_Internal.Server=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Server");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ServerName;
        [LocalData]
        public string ServerName
        {
            get { return m_Internal.ServerName; }
            set
            {
                if(m_Internal.ServerName!=value){
                    m_Internal.ServerName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServerName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _GuestCount;
        [LocalData]
        public int GuestCount
        {
            get { return m_Internal.GuestCount; }
            set
            {
                if(m_Internal.GuestCount!=value){
                    m_Internal.GuestCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CustomerTable;
        [LocalData]
        public string CustomerTable
        {
            get { return m_Internal.CustomerTable; }
            set
            {
                if(m_Internal.CustomerTable!=value){
                    m_Internal.CustomerTable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerTable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RawData;
        [LocalData]
        public string RawData
        {
            get { return m_Internal.RawData; }
            set
            {
                if(m_Internal.RawData!=value){
                    m_Internal.RawData=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RawData");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _TouchCount;
        [LocalData]
        public int TouchCount
        {
            get { return m_Internal.TouchCount; }
            set
            {
                if(m_Internal.TouchCount!=value){
                    m_Internal.TouchCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TouchCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _TipAmount;
        [LocalData]
        public decimal TipAmount
        {
            get { return m_Internal.TipAmount; }
            set
            {
                if(m_Internal.TipAmount!=value){
                    m_Internal.TipAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TipAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _GuestCountModified;
        [LocalData]
        public int? GuestCountModified
        {
            get { return m_Internal.GuestCountModified; }
            set
            {
                if(m_Internal.GuestCountModified!=value){
                    m_Internal.GuestCountModified=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestCountModified");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TicketTotal;
        [LocalData]
        public decimal? TicketTotal
        {
            get { return m_Internal.TicketTotal; }
            set
            {
                if(m_Internal.TicketTotal!=value){
                    m_Internal.TicketTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TransactionID;
        [LocalData]
        public string TransactionID
        {
            get { return m_Internal.TransactionID; }
            set
            {
                if(m_Internal.TransactionID!=value){
                    m_Internal.TransactionID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        long? _TransactionType;
        [LocalData]
        public long? TransactionType
        {
            get { return m_Internal.TransactionType; }
            set
            {
                if(m_Internal.TransactionType!=value){
                    m_Internal.TransactionType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<POSTicket, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IPOSTVADatum : IWCFDataElement
    {
        
        Guid TVADataID { get; set; }
        
        Guid POSTicketID { get; set; }
        
        decimal Amount { get; set; }
        
        decimal? Percentage { get; set; }
        
        decimal Total { get; set; }

        void Copy( IPOSTVADatum _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataPOSTVADatum : IPOSTVADatum
    {
        [DataMember]
        public Guid TVADataID { get; set; }
        [DataMember]
        public Guid POSTicketID { get; set; }
        [DataMember]
        public decimal Amount { get; set; }
        [DataMember]
        public decimal? Percentage { get; set; }
        [DataMember]
        public decimal Total { get; set; }

        public void Copy( IPOSTVADatum _Item )
        {
             POSTicketID = _Item.POSTicketID;			
             Amount = _Item.Amount;			
             Percentage = _Item.Percentage;			
             Total = _Item.Total;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new POSTVADatum( this );
        }
    }


    /// <summary>
    /// A class which represents the POSTVAData table in the RenAix Database.
    /// </summary>
    public partial class POSTVADatum : BaseDataObject<DataPOSTVADatum>, IActiveRecord, ICallOnCreated, IPOSTVADatum
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<POSTVADatum> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<POSTVADatum>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<POSTVADatum> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(POSTVADatum item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                POSTVADatum item=new POSTVADatum();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<POSTVADatum> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public POSTVADatum()
        {
            m_Internal = new DataPOSTVADatum();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.TVADataID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public POSTVADatum( bool _CallOnCreated )
        {
            m_Internal = new DataPOSTVADatum();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public POSTVADatum(string connectionString, string providerName) 
        {
            m_Internal = new DataPOSTVADatum();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.TVADataID = Guid.NewGuid( );     
        }

        public POSTVADatum( IPOSTVADatum _Item )
        {
            m_Internal = new DataPOSTVADatum();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public POSTVADatum( DataPOSTVADatum _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IPOSTVADatum _Item )
        {
            m_Internal.POSTicketID = _Item.POSTicketID;			
            m_Internal.Amount = _Item.Amount;			
            m_Internal.Percentage = _Item.Percentage;			
            m_Internal.Total = _Item.Total;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new POSTVADatum( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.TVADataID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                POSTVADatum.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSTVADatum>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public POSTVADatum(Expression<Func<POSTVADatum, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<POSTVADatum> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<POSTVADatum> _repo;
            
            if(db.TestMode)
            {
                POSTVADatum.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSTVADatum>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<POSTVADatum> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static POSTVADatum SingleOrDefault(Expression<Func<POSTVADatum, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static POSTVADatum SingleOrDefault(Expression<Func<POSTVADatum, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<POSTVADatum> repo = GetRepo(connectionString,providerName);
            POSTVADatum single = repo.SingleOrDefault<POSTVADatum>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<POSTVADatum, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<POSTVADatum, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyPOSTVADatumLoaded = false;
        protected static POSTVADatum EmptyPOSTVADatumMember = null;

        public static POSTVADatum GetByID(Guid? value) 
        {
            POSTVADatum rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static POSTVADatum GetByID(Guid value) 
        {
            POSTVADatum rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyPOSTVADatumLoaded )
                    {
                        rc = EmptyPOSTVADatumMember;
                    }
                    else
                    {
                        IsEmptyPOSTVADatumLoaded = true;
                        rc = POSTVADatum.Find( L => L.TVADataID.Equals( value ) ).FirstOrDefault( );
                        EmptyPOSTVADatumMember = rc;
                    }
                }
                else
                {
                    rc = POSTVADatum.Find( L => L.TVADataID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<POSTVADatum> Find(Expression<Func<POSTVADatum, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<POSTVADatum> Find(Expression<Func<POSTVADatum, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<POSTVADatum> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<POSTVADatum> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<POSTVADatum> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<POSTVADatum> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<POSTVADatum> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<POSTVADatum> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "TVADataID";
        }

        public object KeyValue()
        {
            return this.TVADataID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.POSTicketID )
//			{
//				rc = this.POSTicketID.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is POSTVADatum)
            {
                POSTVADatum compare=(POSTVADatum)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.TVADataID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.POSTicketID.ToString();
        }

        public string DescriptorColumn() 
        {
            return "POSTicketID";
        }

        public static string GetKeyColumn()
        {
            return "TVADataID";
        }        

        public static string GetDescriptorColumn()
        {
            return "POSTicketID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<POSTicket> POSTicketsItem
        {
            get
            {
                  var repo=Jaxis.POS.Data.POSTicket.GetRepo();
                  return from items in repo.GetAll()
                       where items.POSTicketID == m_Internal.POSTicketID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.TVADataID;
            }
            set
            {
                m_Internal.TVADataID = value;
            }
        }


//        Guid _TVADataID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid TVADataID
        {
            get { return m_Internal.TVADataID; }
            set
            {
                if(m_Internal.TVADataID!=value){
                    m_Internal.TVADataID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TVADataID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _POSTicketID;
        [LocalData]
        public Guid POSTicketID
        {
            get { return m_Internal.POSTicketID; }
            set
            {
                if(m_Internal.POSTicketID!=value){
                    m_Internal.POSTicketID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Amount;
        [LocalData]
        public decimal Amount
        {
            get { return m_Internal.Amount; }
            set
            {
                if(m_Internal.Amount!=value){
                    m_Internal.Amount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Amount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Percentage;
        [LocalData]
        public decimal? Percentage
        {
            get { return m_Internal.Percentage; }
            set
            {
                if(m_Internal.Percentage!=value){
                    m_Internal.Percentage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Percentage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Total;
        [LocalData]
        public decimal Total
        {
            get { return m_Internal.Total; }
            set
            {
                if(m_Internal.Total!=value){
                    m_Internal.Total=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Total");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<POSTVADatum, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface ISageBalance : IWCFDataElement
    {
        
        long AccountCode { get; set; }
        
        int Category { get; set; }
        
        string CategoryName { get; set; }
        
        string CategoryNameEng { get; set; }
        
        decimal? Debit { get; set; }
        
        decimal? Credit { get; set; }
        
        decimal? SalesRecorded { get; set; }
        
        DateTime AccountingPeriod { get; set; }
        
        string DataSource { get; set; }

        void Copy( ISageBalance _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataSageBalance : ISageBalance
    {
        [DataMember]
        public long AccountCode { get; set; }
        [DataMember]
        public int Category { get; set; }
        [DataMember]
        public string CategoryName { get; set; }
        [DataMember]
        public string CategoryNameEng { get; set; }
        [DataMember]
        public decimal? Debit { get; set; }
        [DataMember]
        public decimal? Credit { get; set; }
        [DataMember]
        public decimal? SalesRecorded { get; set; }
        [DataMember]
        public DateTime AccountingPeriod { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( ISageBalance _Item )
        {
             Category = _Item.Category;			
             CategoryName = _Item.CategoryName;			
             CategoryNameEng = _Item.CategoryNameEng;			
             Debit = _Item.Debit;			
             Credit = _Item.Credit;			
             SalesRecorded = _Item.SalesRecorded;			
             AccountingPeriod = _Item.AccountingPeriod;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new SageBalance( this );
        }
    }


    /// <summary>
    /// A class which represents the SageBalance table in the RenAix Database.
    /// </summary>
    public partial class SageBalance : BaseDataObject<DataSageBalance>, IActiveRecord, ICallOnCreated, ISageBalance
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<SageBalance> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<SageBalance>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<SageBalance> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(SageBalance item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                SageBalance item=new SageBalance();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<SageBalance> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public SageBalance()
        {
            m_Internal = new DataSageBalance();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public SageBalance( bool _CallOnCreated )
        {
            m_Internal = new DataSageBalance();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public SageBalance(string connectionString, string providerName) 
        {
            m_Internal = new DataSageBalance();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public SageBalance( ISageBalance _Item )
        {
            m_Internal = new DataSageBalance();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public SageBalance( DataSageBalance _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( ISageBalance _Item )
        {
            m_Internal.Category = _Item.Category;			
            m_Internal.CategoryName = _Item.CategoryName;			
            m_Internal.CategoryNameEng = _Item.CategoryNameEng;			
            m_Internal.Debit = _Item.Debit;			
            m_Internal.Credit = _Item.Credit;			
            m_Internal.SalesRecorded = _Item.SalesRecorded;			
            m_Internal.AccountingPeriod = _Item.AccountingPeriod;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new SageBalance( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                SageBalance.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<SageBalance>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public SageBalance(Expression<Func<SageBalance, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<SageBalance> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<SageBalance> _repo;
            
            if(db.TestMode)
            {
                SageBalance.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<SageBalance>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SageBalance> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static SageBalance SingleOrDefault(Expression<Func<SageBalance, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static SageBalance SingleOrDefault(Expression<Func<SageBalance, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<SageBalance> repo = GetRepo(connectionString,providerName);
            SageBalance single = repo.SingleOrDefault<SageBalance>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<SageBalance, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<SageBalance, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static SageBalance GetByID(long value) 
        {
            return SageBalance.Find( L => L.AccountCode.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<SageBalance> Find(Expression<Func<SageBalance, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SageBalance> Find(Expression<Func<SageBalance, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<SageBalance> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<SageBalance> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SageBalance> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SageBalance> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SageBalance> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<SageBalance> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "AccountCode";
        }

        public object KeyValue()
        {
            return this.AccountCode;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.CategoryName )
//			{
//				rc = this.CategoryName.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is SageBalance)
            {
                SageBalance compare=(SageBalance)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.CategoryName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "CategoryName";
        }

        public static string GetKeyColumn()
        {
            return "AccountCode";
        }        

        public static string GetDescriptorColumn()
        {
            return "CategoryName";
        }
        
        #region ' Foreign Keys '
        #endregion



//        long _AccountCode;
        [SubSonicPrimaryKey]
        [LocalData]
        public long AccountCode
        {
            get { return m_Internal.AccountCode; }
            set
            {
                if(m_Internal.AccountCode!=value){
                    m_Internal.AccountCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AccountCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Category;
        [LocalData]
        public int Category
        {
            get { return m_Internal.Category; }
            set
            {
                if(m_Internal.Category!=value){
                    m_Internal.Category=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Category");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CategoryName;
        [LocalData]
        public string CategoryName
        {
            get { return m_Internal.CategoryName; }
            set
            {
                if(m_Internal.CategoryName!=value){
                    m_Internal.CategoryName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CategoryName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CategoryNameEng;
        [LocalData]
        public string CategoryNameEng
        {
            get { return m_Internal.CategoryNameEng; }
            set
            {
                if(m_Internal.CategoryNameEng!=value){
                    m_Internal.CategoryNameEng=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CategoryNameEng");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Debit;
        [LocalData]
        public decimal? Debit
        {
            get { return m_Internal.Debit; }
            set
            {
                if(m_Internal.Debit!=value){
                    m_Internal.Debit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Debit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Credit;
        [LocalData]
        public decimal? Credit
        {
            get { return m_Internal.Credit; }
            set
            {
                if(m_Internal.Credit!=value){
                    m_Internal.Credit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Credit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _SalesRecorded;
        [LocalData]
        public decimal? SalesRecorded
        {
            get { return m_Internal.SalesRecorded; }
            set
            {
                if(m_Internal.SalesRecorded!=value){
                    m_Internal.SalesRecorded=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SalesRecorded");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _AccountingPeriod;
        [LocalData]
        public DateTime AccountingPeriod
        {
            get { return m_Internal.AccountingPeriod; }
            set
            {
                if(m_Internal.AccountingPeriod!=value){
                    m_Internal.AccountingPeriod=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AccountingPeriod");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<SageBalance, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwCategoryDetail : IWCFDataElement
    {
        
        DateTime BUSINESS_DATE { get; set; }
        
        string Category { get; set; }
        
        int? CategoryID { get; set; }
        
        decimal? CASHIER_DEBIT { get; set; }
        
        decimal? CASHIER_CREDIT { get; set; }
        
        string GUEST_FULL_NAME { get; set; }
        
        int? TRX_CODE { get; set; }
        
        string TRX_DESC { get; set; }
        
        string BUSINESS_TIME { get; set; }
        
        string REFERENCE { get; set; }
        
        int? ROOM { get; set; }
        
        string ROOM_CLASS { get; set; }
        
        string CASHIER_NAME { get; set; }
        
        string CASH_ID_USER_NAME { get; set; }
        
        decimal? PRINT_CASHIER_CREDIT { get; set; }
        
        decimal? PRINT_CASHIER_DEBIT { get; set; }

        void Copy( IvwCategoryDetail _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwCategoryDetail : IvwCategoryDetail
    {
        [DataMember]
        public DateTime BUSINESS_DATE { get; set; }
        [DataMember]
        public string Category { get; set; }
        [DataMember]
        public int? CategoryID { get; set; }
        [DataMember]
        public decimal? CASHIER_DEBIT { get; set; }
        [DataMember]
        public decimal? CASHIER_CREDIT { get; set; }
        [DataMember]
        public string GUEST_FULL_NAME { get; set; }
        [DataMember]
        public int? TRX_CODE { get; set; }
        [DataMember]
        public string TRX_DESC { get; set; }
        [DataMember]
        public string BUSINESS_TIME { get; set; }
        [DataMember]
        public string REFERENCE { get; set; }
        [DataMember]
        public int? ROOM { get; set; }
        [DataMember]
        public string ROOM_CLASS { get; set; }
        [DataMember]
        public string CASHIER_NAME { get; set; }
        [DataMember]
        public string CASH_ID_USER_NAME { get; set; }
        [DataMember]
        public decimal? PRINT_CASHIER_CREDIT { get; set; }
        [DataMember]
        public decimal? PRINT_CASHIER_DEBIT { get; set; }

        public void Copy( IvwCategoryDetail _Item )
        {
             Category = _Item.Category;			
             CategoryID = _Item.CategoryID;			
             CASHIER_DEBIT = _Item.CASHIER_DEBIT;			
             CASHIER_CREDIT = _Item.CASHIER_CREDIT;			
             GUEST_FULL_NAME = _Item.GUEST_FULL_NAME;			
             TRX_CODE = _Item.TRX_CODE;			
             TRX_DESC = _Item.TRX_DESC;			
             BUSINESS_TIME = _Item.BUSINESS_TIME;			
             REFERENCE = _Item.REFERENCE;			
             ROOM = _Item.ROOM;			
             ROOM_CLASS = _Item.ROOM_CLASS;			
             CASHIER_NAME = _Item.CASHIER_NAME;			
             CASH_ID_USER_NAME = _Item.CASH_ID_USER_NAME;			
             PRINT_CASHIER_CREDIT = _Item.PRINT_CASHIER_CREDIT;			
             PRINT_CASHIER_DEBIT = _Item.PRINT_CASHIER_DEBIT;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwCategoryDetail( this );
        }
    }


    /// <summary>
    /// A class which represents the vwCategoryDetails table in the RenAix Database.
    /// </summary>
    public partial class vwCategoryDetail : BaseDataObject<DatavwCategoryDetail>, IActiveRecord, ICallOnCreated, IvwCategoryDetail
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwCategoryDetail> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwCategoryDetail>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwCategoryDetail> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwCategoryDetail item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwCategoryDetail item=new vwCategoryDetail();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwCategoryDetail> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwCategoryDetail()
        {
            m_Internal = new DatavwCategoryDetail();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwCategoryDetail( bool _CallOnCreated )
        {
            m_Internal = new DatavwCategoryDetail();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwCategoryDetail(string connectionString, string providerName) 
        {
            m_Internal = new DatavwCategoryDetail();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwCategoryDetail( IvwCategoryDetail _Item )
        {
            m_Internal = new DatavwCategoryDetail();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwCategoryDetail( DatavwCategoryDetail _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwCategoryDetail _Item )
        {
            m_Internal.Category = _Item.Category;			
            m_Internal.CategoryID = _Item.CategoryID;			
            m_Internal.CASHIER_DEBIT = _Item.CASHIER_DEBIT;			
            m_Internal.CASHIER_CREDIT = _Item.CASHIER_CREDIT;			
            m_Internal.GUEST_FULL_NAME = _Item.GUEST_FULL_NAME;			
            m_Internal.TRX_CODE = _Item.TRX_CODE;			
            m_Internal.TRX_DESC = _Item.TRX_DESC;			
            m_Internal.BUSINESS_TIME = _Item.BUSINESS_TIME;			
            m_Internal.REFERENCE = _Item.REFERENCE;			
            m_Internal.ROOM = _Item.ROOM;			
            m_Internal.ROOM_CLASS = _Item.ROOM_CLASS;			
            m_Internal.CASHIER_NAME = _Item.CASHIER_NAME;			
            m_Internal.CASH_ID_USER_NAME = _Item.CASH_ID_USER_NAME;			
            m_Internal.PRINT_CASHIER_CREDIT = _Item.PRINT_CASHIER_CREDIT;			
            m_Internal.PRINT_CASHIER_DEBIT = _Item.PRINT_CASHIER_DEBIT;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwCategoryDetail( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwCategoryDetail.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwCategoryDetail>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwCategoryDetail(Expression<Func<vwCategoryDetail, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwCategoryDetail> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwCategoryDetail> _repo;
            
            if(db.TestMode)
            {
                vwCategoryDetail.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwCategoryDetail>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwCategoryDetail> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwCategoryDetail SingleOrDefault(Expression<Func<vwCategoryDetail, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwCategoryDetail SingleOrDefault(Expression<Func<vwCategoryDetail, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwCategoryDetail> repo = GetRepo(connectionString,providerName);
            vwCategoryDetail single = repo.SingleOrDefault<vwCategoryDetail>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwCategoryDetail, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwCategoryDetail, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwCategoryDetail GetByID(DateTime value) 
        {
            return vwCategoryDetail.Find( L => L.BUSINESS_DATE.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwCategoryDetail> Find(Expression<Func<vwCategoryDetail, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwCategoryDetail> Find(Expression<Func<vwCategoryDetail, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwCategoryDetail> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwCategoryDetail> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwCategoryDetail> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwCategoryDetail> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwCategoryDetail> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwCategoryDetail> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "BUSINESS_DATE";
        }

        public object KeyValue()
        {
            return this.BUSINESS_DATE;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Category )
//			{
//				rc = this.Category.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwCategoryDetail)
            {
                vwCategoryDetail compare=(vwCategoryDetail)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Category.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Category";
        }

        public static string GetKeyColumn()
        {
            return "BUSINESS_DATE";
        }        

        public static string GetDescriptorColumn()
        {
            return "Category";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _BUSINESS_DATE;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime BUSINESS_DATE
        {
            get { return m_Internal.BUSINESS_DATE; }
            set
            {
                if(m_Internal.BUSINESS_DATE!=value){
                    m_Internal.BUSINESS_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BUSINESS_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Category;
        [LocalData]
        public string Category
        {
            get { return m_Internal.Category; }
            set
            {
                if(m_Internal.Category!=value){
                    m_Internal.Category=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Category");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _CategoryID;
        [LocalData]
        public int? CategoryID
        {
            get { return m_Internal.CategoryID; }
            set
            {
                if(m_Internal.CategoryID!=value){
                    m_Internal.CategoryID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CategoryID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _CASHIER_DEBIT;
        [LocalData]
        public decimal? CASHIER_DEBIT
        {
            get { return m_Internal.CASHIER_DEBIT; }
            set
            {
                if(m_Internal.CASHIER_DEBIT!=value){
                    m_Internal.CASHIER_DEBIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CASHIER_DEBIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _CASHIER_CREDIT;
        [LocalData]
        public decimal? CASHIER_CREDIT
        {
            get { return m_Internal.CASHIER_CREDIT; }
            set
            {
                if(m_Internal.CASHIER_CREDIT!=value){
                    m_Internal.CASHIER_CREDIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CASHIER_CREDIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _GUEST_FULL_NAME;
        [LocalData]
        public string GUEST_FULL_NAME
        {
            get { return m_Internal.GUEST_FULL_NAME; }
            set
            {
                if(m_Internal.GUEST_FULL_NAME!=value){
                    m_Internal.GUEST_FULL_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GUEST_FULL_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TRX_CODE;
        [LocalData]
        public int? TRX_CODE
        {
            get { return m_Internal.TRX_CODE; }
            set
            {
                if(m_Internal.TRX_CODE!=value){
                    m_Internal.TRX_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TRX_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TRX_DESC;
        [LocalData]
        public string TRX_DESC
        {
            get { return m_Internal.TRX_DESC; }
            set
            {
                if(m_Internal.TRX_DESC!=value){
                    m_Internal.TRX_DESC=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TRX_DESC");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _BUSINESS_TIME;
        [LocalData]
        public string BUSINESS_TIME
        {
            get { return m_Internal.BUSINESS_TIME; }
            set
            {
                if(m_Internal.BUSINESS_TIME!=value){
                    m_Internal.BUSINESS_TIME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BUSINESS_TIME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _REFERENCE;
        [LocalData]
        public string REFERENCE
        {
            get { return m_Internal.REFERENCE; }
            set
            {
                if(m_Internal.REFERENCE!=value){
                    m_Internal.REFERENCE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REFERENCE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ROOM;
        [LocalData]
        public int? ROOM
        {
            get { return m_Internal.ROOM; }
            set
            {
                if(m_Internal.ROOM!=value){
                    m_Internal.ROOM=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ROOM");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ROOM_CLASS;
        [LocalData]
        public string ROOM_CLASS
        {
            get { return m_Internal.ROOM_CLASS; }
            set
            {
                if(m_Internal.ROOM_CLASS!=value){
                    m_Internal.ROOM_CLASS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ROOM_CLASS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CASHIER_NAME;
        [LocalData]
        public string CASHIER_NAME
        {
            get { return m_Internal.CASHIER_NAME; }
            set
            {
                if(m_Internal.CASHIER_NAME!=value){
                    m_Internal.CASHIER_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CASHIER_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CASH_ID_USER_NAME;
        [LocalData]
        public string CASH_ID_USER_NAME
        {
            get { return m_Internal.CASH_ID_USER_NAME; }
            set
            {
                if(m_Internal.CASH_ID_USER_NAME!=value){
                    m_Internal.CASH_ID_USER_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CASH_ID_USER_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _PRINT_CASHIER_CREDIT;
        [LocalData]
        public decimal? PRINT_CASHIER_CREDIT
        {
            get { return m_Internal.PRINT_CASHIER_CREDIT; }
            set
            {
                if(m_Internal.PRINT_CASHIER_CREDIT!=value){
                    m_Internal.PRINT_CASHIER_CREDIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PRINT_CASHIER_CREDIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _PRINT_CASHIER_DEBIT;
        [LocalData]
        public decimal? PRINT_CASHIER_DEBIT
        {
            get { return m_Internal.PRINT_CASHIER_DEBIT; }
            set
            {
                if(m_Internal.PRINT_CASHIER_DEBIT!=value){
                    m_Internal.PRINT_CASHIER_DEBIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PRINT_CASHIER_DEBIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwCategoryDetail, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwCategorySummaryByMonth : IWCFDataElement
    {
        
        DateTime MONTH { get; set; }
        
        decimal Room { get; set; }
        
        decimal Tax { get; set; }
        
        decimal MarriotRewardsAndOther { get; set; }
        
        decimal Breakfast { get; set; }
        
        decimal OtherFood { get; set; }
        
        decimal FBPackageLost { get; set; }
        
        decimal FBPackageProfit { get; set; }
        
        decimal OtherPackageLoss { get; set; }
        
        decimal OtherPackageProfit { get; set; }
        
        decimal Minibar { get; set; }
        
        decimal Banquet { get; set; }
        
        decimal BanquetOther { get; set; }
        
        decimal Misc { get; set; }
        
        decimal? Total { get; set; }

        void Copy( IvwCategorySummaryByMonth _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwCategorySummaryByMonth : IvwCategorySummaryByMonth
    {
        [DataMember]
        public DateTime MONTH { get; set; }
        [DataMember]
        public decimal Room { get; set; }
        [DataMember]
        public decimal Tax { get; set; }
        [DataMember]
        public decimal MarriotRewardsAndOther { get; set; }
        [DataMember]
        public decimal Breakfast { get; set; }
        [DataMember]
        public decimal OtherFood { get; set; }
        [DataMember]
        public decimal FBPackageLost { get; set; }
        [DataMember]
        public decimal FBPackageProfit { get; set; }
        [DataMember]
        public decimal OtherPackageLoss { get; set; }
        [DataMember]
        public decimal OtherPackageProfit { get; set; }
        [DataMember]
        public decimal Minibar { get; set; }
        [DataMember]
        public decimal Banquet { get; set; }
        [DataMember]
        public decimal BanquetOther { get; set; }
        [DataMember]
        public decimal Misc { get; set; }
        [DataMember]
        public decimal? Total { get; set; }

        public void Copy( IvwCategorySummaryByMonth _Item )
        {
             Room = _Item.Room;			
             Tax = _Item.Tax;			
             MarriotRewardsAndOther = _Item.MarriotRewardsAndOther;			
             Breakfast = _Item.Breakfast;			
             OtherFood = _Item.OtherFood;			
             FBPackageLost = _Item.FBPackageLost;			
             FBPackageProfit = _Item.FBPackageProfit;			
             OtherPackageLoss = _Item.OtherPackageLoss;			
             OtherPackageProfit = _Item.OtherPackageProfit;			
             Minibar = _Item.Minibar;			
             Banquet = _Item.Banquet;			
             BanquetOther = _Item.BanquetOther;			
             Misc = _Item.Misc;			
             Total = _Item.Total;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwCategorySummaryByMonth( this );
        }
    }


    /// <summary>
    /// A class which represents the vwCategorySummaryByMonth table in the RenAix Database.
    /// </summary>
    public partial class vwCategorySummaryByMonth : BaseDataObject<DatavwCategorySummaryByMonth>, IActiveRecord, ICallOnCreated, IvwCategorySummaryByMonth
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwCategorySummaryByMonth> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwCategorySummaryByMonth>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwCategorySummaryByMonth> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwCategorySummaryByMonth item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwCategorySummaryByMonth item=new vwCategorySummaryByMonth();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwCategorySummaryByMonth> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwCategorySummaryByMonth()
        {
            m_Internal = new DatavwCategorySummaryByMonth();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwCategorySummaryByMonth( bool _CallOnCreated )
        {
            m_Internal = new DatavwCategorySummaryByMonth();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwCategorySummaryByMonth(string connectionString, string providerName) 
        {
            m_Internal = new DatavwCategorySummaryByMonth();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwCategorySummaryByMonth( IvwCategorySummaryByMonth _Item )
        {
            m_Internal = new DatavwCategorySummaryByMonth();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwCategorySummaryByMonth( DatavwCategorySummaryByMonth _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwCategorySummaryByMonth _Item )
        {
            m_Internal.Room = _Item.Room;			
            m_Internal.Tax = _Item.Tax;			
            m_Internal.MarriotRewardsAndOther = _Item.MarriotRewardsAndOther;			
            m_Internal.Breakfast = _Item.Breakfast;			
            m_Internal.OtherFood = _Item.OtherFood;			
            m_Internal.FBPackageLost = _Item.FBPackageLost;			
            m_Internal.FBPackageProfit = _Item.FBPackageProfit;			
            m_Internal.OtherPackageLoss = _Item.OtherPackageLoss;			
            m_Internal.OtherPackageProfit = _Item.OtherPackageProfit;			
            m_Internal.Minibar = _Item.Minibar;			
            m_Internal.Banquet = _Item.Banquet;			
            m_Internal.BanquetOther = _Item.BanquetOther;			
            m_Internal.Misc = _Item.Misc;			
            m_Internal.Total = _Item.Total;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwCategorySummaryByMonth( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwCategorySummaryByMonth.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwCategorySummaryByMonth>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwCategorySummaryByMonth(Expression<Func<vwCategorySummaryByMonth, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwCategorySummaryByMonth> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwCategorySummaryByMonth> _repo;
            
            if(db.TestMode)
            {
                vwCategorySummaryByMonth.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwCategorySummaryByMonth>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwCategorySummaryByMonth> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwCategorySummaryByMonth SingleOrDefault(Expression<Func<vwCategorySummaryByMonth, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwCategorySummaryByMonth SingleOrDefault(Expression<Func<vwCategorySummaryByMonth, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwCategorySummaryByMonth> repo = GetRepo(connectionString,providerName);
            vwCategorySummaryByMonth single = repo.SingleOrDefault<vwCategorySummaryByMonth>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwCategorySummaryByMonth, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwCategorySummaryByMonth, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwCategorySummaryByMonth GetByID(DateTime value) 
        {
            return vwCategorySummaryByMonth.Find( L => L.MONTH.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwCategorySummaryByMonth> Find(Expression<Func<vwCategorySummaryByMonth, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwCategorySummaryByMonth> Find(Expression<Func<vwCategorySummaryByMonth, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwCategorySummaryByMonth> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwCategorySummaryByMonth> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwCategorySummaryByMonth> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwCategorySummaryByMonth> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwCategorySummaryByMonth> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwCategorySummaryByMonth> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "MONTH";
        }

        public object KeyValue()
        {
            return this.MONTH;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Room )
//			{
//				rc = this.Room.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwCategorySummaryByMonth)
            {
                vwCategorySummaryByMonth compare=(vwCategorySummaryByMonth)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Room.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Room";
        }

        public static string GetKeyColumn()
        {
            return "MONTH";
        }        

        public static string GetDescriptorColumn()
        {
            return "Room";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _MONTH;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime MONTH
        {
            get { return m_Internal.MONTH; }
            set
            {
                if(m_Internal.MONTH!=value){
                    m_Internal.MONTH=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MONTH");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Room;
        [LocalData]
        public decimal Room
        {
            get { return m_Internal.Room; }
            set
            {
                if(m_Internal.Room!=value){
                    m_Internal.Room=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Room");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Tax;
        [LocalData]
        public decimal Tax
        {
            get { return m_Internal.Tax; }
            set
            {
                if(m_Internal.Tax!=value){
                    m_Internal.Tax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _MarriotRewardsAndOther;
        [LocalData]
        public decimal MarriotRewardsAndOther
        {
            get { return m_Internal.MarriotRewardsAndOther; }
            set
            {
                if(m_Internal.MarriotRewardsAndOther!=value){
                    m_Internal.MarriotRewardsAndOther=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MarriotRewardsAndOther");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Breakfast;
        [LocalData]
        public decimal Breakfast
        {
            get { return m_Internal.Breakfast; }
            set
            {
                if(m_Internal.Breakfast!=value){
                    m_Internal.Breakfast=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Breakfast");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _OtherFood;
        [LocalData]
        public decimal OtherFood
        {
            get { return m_Internal.OtherFood; }
            set
            {
                if(m_Internal.OtherFood!=value){
                    m_Internal.OtherFood=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OtherFood");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _FBPackageLost;
        [LocalData]
        public decimal FBPackageLost
        {
            get { return m_Internal.FBPackageLost; }
            set
            {
                if(m_Internal.FBPackageLost!=value){
                    m_Internal.FBPackageLost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FBPackageLost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _FBPackageProfit;
        [LocalData]
        public decimal FBPackageProfit
        {
            get { return m_Internal.FBPackageProfit; }
            set
            {
                if(m_Internal.FBPackageProfit!=value){
                    m_Internal.FBPackageProfit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FBPackageProfit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _OtherPackageLoss;
        [LocalData]
        public decimal OtherPackageLoss
        {
            get { return m_Internal.OtherPackageLoss; }
            set
            {
                if(m_Internal.OtherPackageLoss!=value){
                    m_Internal.OtherPackageLoss=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OtherPackageLoss");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _OtherPackageProfit;
        [LocalData]
        public decimal OtherPackageProfit
        {
            get { return m_Internal.OtherPackageProfit; }
            set
            {
                if(m_Internal.OtherPackageProfit!=value){
                    m_Internal.OtherPackageProfit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OtherPackageProfit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Minibar;
        [LocalData]
        public decimal Minibar
        {
            get { return m_Internal.Minibar; }
            set
            {
                if(m_Internal.Minibar!=value){
                    m_Internal.Minibar=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Minibar");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Banquet;
        [LocalData]
        public decimal Banquet
        {
            get { return m_Internal.Banquet; }
            set
            {
                if(m_Internal.Banquet!=value){
                    m_Internal.Banquet=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Banquet");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _BanquetOther;
        [LocalData]
        public decimal BanquetOther
        {
            get { return m_Internal.BanquetOther; }
            set
            {
                if(m_Internal.BanquetOther!=value){
                    m_Internal.BanquetOther=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BanquetOther");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Misc;
        [LocalData]
        public decimal Misc
        {
            get { return m_Internal.Misc; }
            set
            {
                if(m_Internal.Misc!=value){
                    m_Internal.Misc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Misc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Total;
        [LocalData]
        public decimal? Total
        {
            get { return m_Internal.Total; }
            set
            {
                if(m_Internal.Total!=value){
                    m_Internal.Total=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Total");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwCategorySummaryByMonth, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwCheckFoodGroup : IWCFDataElement
    {
        
        int Check_Seq { get; set; }
        
        int? Check_num { get; set; }
        
        int? Cover_Cnt { get; set; }
        
        decimal? sub_ttl { get; set; }
        
        int? EntreeCount { get; set; }
        
        int? PlatCount { get; set; }
        
        int? DessertCount { get; set; }

        void Copy( IvwCheckFoodGroup _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwCheckFoodGroup : IvwCheckFoodGroup
    {
        [DataMember]
        public int Check_Seq { get; set; }
        [DataMember]
        public int? Check_num { get; set; }
        [DataMember]
        public int? Cover_Cnt { get; set; }
        [DataMember]
        public decimal? sub_ttl { get; set; }
        [DataMember]
        public int? EntreeCount { get; set; }
        [DataMember]
        public int? PlatCount { get; set; }
        [DataMember]
        public int? DessertCount { get; set; }

        public void Copy( IvwCheckFoodGroup _Item )
        {
             Check_num = _Item.Check_num;			
             Cover_Cnt = _Item.Cover_Cnt;			
             sub_ttl = _Item.sub_ttl;			
             EntreeCount = _Item.EntreeCount;			
             PlatCount = _Item.PlatCount;			
             DessertCount = _Item.DessertCount;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwCheckFoodGroup( this );
        }
    }


    /// <summary>
    /// A class which represents the vwCheckFoodGroups table in the RenAix Database.
    /// </summary>
    public partial class vwCheckFoodGroup : BaseDataObject<DatavwCheckFoodGroup>, IActiveRecord, ICallOnCreated, IvwCheckFoodGroup
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwCheckFoodGroup> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwCheckFoodGroup>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwCheckFoodGroup> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwCheckFoodGroup item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwCheckFoodGroup item=new vwCheckFoodGroup();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwCheckFoodGroup> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwCheckFoodGroup()
        {
            m_Internal = new DatavwCheckFoodGroup();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwCheckFoodGroup( bool _CallOnCreated )
        {
            m_Internal = new DatavwCheckFoodGroup();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwCheckFoodGroup(string connectionString, string providerName) 
        {
            m_Internal = new DatavwCheckFoodGroup();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwCheckFoodGroup( IvwCheckFoodGroup _Item )
        {
            m_Internal = new DatavwCheckFoodGroup();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwCheckFoodGroup( DatavwCheckFoodGroup _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwCheckFoodGroup _Item )
        {
            m_Internal.Check_num = _Item.Check_num;			
            m_Internal.Cover_Cnt = _Item.Cover_Cnt;			
            m_Internal.sub_ttl = _Item.sub_ttl;			
            m_Internal.EntreeCount = _Item.EntreeCount;			
            m_Internal.PlatCount = _Item.PlatCount;			
            m_Internal.DessertCount = _Item.DessertCount;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwCheckFoodGroup( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwCheckFoodGroup.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwCheckFoodGroup>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwCheckFoodGroup(Expression<Func<vwCheckFoodGroup, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwCheckFoodGroup> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwCheckFoodGroup> _repo;
            
            if(db.TestMode)
            {
                vwCheckFoodGroup.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwCheckFoodGroup>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwCheckFoodGroup> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwCheckFoodGroup SingleOrDefault(Expression<Func<vwCheckFoodGroup, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwCheckFoodGroup SingleOrDefault(Expression<Func<vwCheckFoodGroup, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwCheckFoodGroup> repo = GetRepo(connectionString,providerName);
            vwCheckFoodGroup single = repo.SingleOrDefault<vwCheckFoodGroup>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwCheckFoodGroup, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwCheckFoodGroup, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwCheckFoodGroup GetByID(int value) 
        {
            return vwCheckFoodGroup.Find( L => L.Check_Seq.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwCheckFoodGroup> Find(Expression<Func<vwCheckFoodGroup, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwCheckFoodGroup> Find(Expression<Func<vwCheckFoodGroup, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwCheckFoodGroup> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwCheckFoodGroup> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwCheckFoodGroup> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwCheckFoodGroup> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwCheckFoodGroup> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwCheckFoodGroup> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Check_Seq";
        }

        public object KeyValue()
        {
            return this.Check_Seq;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Check_num )
//			{
//				rc = this.Check_num.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwCheckFoodGroup)
            {
                vwCheckFoodGroup compare=(vwCheckFoodGroup)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public override int GetHashCode() 
        {
            return this.Check_Seq;
        }


        public string DescriptorValue()
        {
            return this.Check_num.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Check_num";
        }

        public static string GetKeyColumn()
        {
            return "Check_Seq";
        }        

        public static string GetDescriptorColumn()
        {
            return "Check_num";
        }
        
        #region ' Foreign Keys '
        #endregion



//        int? _Check_Seq;
        [SubSonicPrimaryKey]
        [LocalData]
        public int Check_Seq
        {
            get { return m_Internal.Check_Seq; }
            set
            {
                if(m_Internal.Check_Seq!=value){
                    m_Internal.Check_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Check_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Check_num;
        [LocalData]
        public int? Check_num
        {
            get { return m_Internal.Check_num; }
            set
            {
                if(m_Internal.Check_num!=value){
                    m_Internal.Check_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Check_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Cover_Cnt;
        [LocalData]
        public int? Cover_Cnt
        {
            get { return m_Internal.Cover_Cnt; }
            set
            {
                if(m_Internal.Cover_Cnt!=value){
                    m_Internal.Cover_Cnt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Cover_Cnt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _sub_ttl;
        [LocalData]
        public decimal? sub_ttl
        {
            get { return m_Internal.sub_ttl; }
            set
            {
                if(m_Internal.sub_ttl!=value){
                    m_Internal.sub_ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="sub_ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EntreeCount;
        [LocalData]
        public int? EntreeCount
        {
            get { return m_Internal.EntreeCount; }
            set
            {
                if(m_Internal.EntreeCount!=value){
                    m_Internal.EntreeCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntreeCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _PlatCount;
        [LocalData]
        public int? PlatCount
        {
            get { return m_Internal.PlatCount; }
            set
            {
                if(m_Internal.PlatCount!=value){
                    m_Internal.PlatCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PlatCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _DessertCount;
        [LocalData]
        public int? DessertCount
        {
            get { return m_Internal.DessertCount; }
            set
            {
                if(m_Internal.DessertCount!=value){
                    m_Internal.DessertCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DessertCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwCheckFoodGroup, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwDailyGuestCount : IWCFDataElement
    {
        
        DateTime TicketDate { get; set; }
        
        string EstablishmentModified { get; set; }
        
        int? GuestCount { get; set; }
        
        int? ModifiedGuestCount { get; set; }

        void Copy( IvwDailyGuestCount _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwDailyGuestCount : IvwDailyGuestCount
    {
        [DataMember]
        public DateTime TicketDate { get; set; }
        [DataMember]
        public string EstablishmentModified { get; set; }
        [DataMember]
        public int? GuestCount { get; set; }
        [DataMember]
        public int? ModifiedGuestCount { get; set; }

        public void Copy( IvwDailyGuestCount _Item )
        {
             EstablishmentModified = _Item.EstablishmentModified;			
             GuestCount = _Item.GuestCount;			
             ModifiedGuestCount = _Item.ModifiedGuestCount;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDailyGuestCount( this );
        }
    }


    /// <summary>
    /// A class which represents the vwDailyGuestCount table in the RenAix Database.
    /// </summary>
    public partial class vwDailyGuestCount : BaseDataObject<DatavwDailyGuestCount>, IActiveRecord, ICallOnCreated, IvwDailyGuestCount
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwDailyGuestCount> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwDailyGuestCount>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwDailyGuestCount> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwDailyGuestCount item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwDailyGuestCount item=new vwDailyGuestCount();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwDailyGuestCount> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwDailyGuestCount()
        {
            m_Internal = new DatavwDailyGuestCount();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwDailyGuestCount( bool _CallOnCreated )
        {
            m_Internal = new DatavwDailyGuestCount();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwDailyGuestCount(string connectionString, string providerName) 
        {
            m_Internal = new DatavwDailyGuestCount();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwDailyGuestCount( IvwDailyGuestCount _Item )
        {
            m_Internal = new DatavwDailyGuestCount();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwDailyGuestCount( DatavwDailyGuestCount _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwDailyGuestCount _Item )
        {
            m_Internal.EstablishmentModified = _Item.EstablishmentModified;			
            m_Internal.GuestCount = _Item.GuestCount;			
            m_Internal.ModifiedGuestCount = _Item.ModifiedGuestCount;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDailyGuestCount( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwDailyGuestCount.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDailyGuestCount>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwDailyGuestCount(Expression<Func<vwDailyGuestCount, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwDailyGuestCount> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwDailyGuestCount> _repo;
            
            if(db.TestMode)
            {
                vwDailyGuestCount.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDailyGuestCount>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwDailyGuestCount> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwDailyGuestCount SingleOrDefault(Expression<Func<vwDailyGuestCount, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwDailyGuestCount SingleOrDefault(Expression<Func<vwDailyGuestCount, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwDailyGuestCount> repo = GetRepo(connectionString,providerName);
            vwDailyGuestCount single = repo.SingleOrDefault<vwDailyGuestCount>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwDailyGuestCount, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwDailyGuestCount, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwDailyGuestCount GetByID(DateTime value) 
        {
            return vwDailyGuestCount.Find( L => L.TicketDate.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwDailyGuestCount> Find(Expression<Func<vwDailyGuestCount, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwDailyGuestCount> Find(Expression<Func<vwDailyGuestCount, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwDailyGuestCount> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwDailyGuestCount> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwDailyGuestCount> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwDailyGuestCount> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwDailyGuestCount> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwDailyGuestCount> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "TicketDate";
        }

        public object KeyValue()
        {
            return this.TicketDate;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.EstablishmentModified )
//			{
//				rc = this.EstablishmentModified.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwDailyGuestCount)
            {
                vwDailyGuestCount compare=(vwDailyGuestCount)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.EstablishmentModified.ToString();
        }

        public string DescriptorColumn() 
        {
            return "EstablishmentModified";
        }

        public static string GetKeyColumn()
        {
            return "TicketDate";
        }        

        public static string GetDescriptorColumn()
        {
            return "EstablishmentModified";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _TicketDate;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime TicketDate
        {
            get { return m_Internal.TicketDate; }
            set
            {
                if(m_Internal.TicketDate!=value){
                    m_Internal.TicketDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EstablishmentModified;
        [LocalData]
        public string EstablishmentModified
        {
            get { return m_Internal.EstablishmentModified; }
            set
            {
                if(m_Internal.EstablishmentModified!=value){
                    m_Internal.EstablishmentModified=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EstablishmentModified");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _GuestCount;
        [LocalData]
        public int? GuestCount
        {
            get { return m_Internal.GuestCount; }
            set
            {
                if(m_Internal.GuestCount!=value){
                    m_Internal.GuestCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ModifiedGuestCount;
        [LocalData]
        public int? ModifiedGuestCount
        {
            get { return m_Internal.ModifiedGuestCount; }
            set
            {
                if(m_Internal.ModifiedGuestCount!=value){
                    m_Internal.ModifiedGuestCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedGuestCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwDailyGuestCount, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwDailyPOSTicketItem : IWCFDataElement
    {
        
        Guid POSTicketID { get; set; }
        
        string CheckNumber { get; set; }
        
        int? GuestCountModified { get; set; }
        
        DateTime? TicketDate { get; set; }
        
        string Establishment { get; set; }
        
        string ServerName { get; set; }
        
        string Description { get; set; }
        
        string Comment { get; set; }
        
        decimal? Price { get; set; }
        
        int? Dtl_Typ_Cnt { get; set; }
        
        int RecordType { get; set; }

        void Copy( IvwDailyPOSTicketItem _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwDailyPOSTicketItem : IvwDailyPOSTicketItem
    {
        [DataMember]
        public Guid POSTicketID { get; set; }
        [DataMember]
        public string CheckNumber { get; set; }
        [DataMember]
        public int? GuestCountModified { get; set; }
        [DataMember]
        public DateTime? TicketDate { get; set; }
        [DataMember]
        public string Establishment { get; set; }
        [DataMember]
        public string ServerName { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public string Comment { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public int? Dtl_Typ_Cnt { get; set; }
        [DataMember]
        public int RecordType { get; set; }

        public void Copy( IvwDailyPOSTicketItem _Item )
        {
             CheckNumber = _Item.CheckNumber;			
             GuestCountModified = _Item.GuestCountModified;			
             TicketDate = _Item.TicketDate;			
             Establishment = _Item.Establishment;			
             ServerName = _Item.ServerName;			
             Description = _Item.Description;			
             Comment = _Item.Comment;			
             Price = _Item.Price;			
             Dtl_Typ_Cnt = _Item.Dtl_Typ_Cnt;			
             RecordType = _Item.RecordType;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDailyPOSTicketItem( this );
        }
    }


    /// <summary>
    /// A class which represents the vwDailyPOSTicketItems table in the RenAix Database.
    /// </summary>
    public partial class vwDailyPOSTicketItem : BaseDataObject<DatavwDailyPOSTicketItem>, IActiveRecord, ICallOnCreated, IvwDailyPOSTicketItem
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwDailyPOSTicketItem> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwDailyPOSTicketItem>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwDailyPOSTicketItem> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwDailyPOSTicketItem item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwDailyPOSTicketItem item=new vwDailyPOSTicketItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwDailyPOSTicketItem> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwDailyPOSTicketItem()
        {
            m_Internal = new DatavwDailyPOSTicketItem();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.POSTicketID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwDailyPOSTicketItem( bool _CallOnCreated )
        {
            m_Internal = new DatavwDailyPOSTicketItem();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwDailyPOSTicketItem(string connectionString, string providerName) 
        {
            m_Internal = new DatavwDailyPOSTicketItem();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.POSTicketID = Guid.NewGuid( );     
        }

        public vwDailyPOSTicketItem( IvwDailyPOSTicketItem _Item )
        {
            m_Internal = new DatavwDailyPOSTicketItem();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwDailyPOSTicketItem( DatavwDailyPOSTicketItem _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwDailyPOSTicketItem _Item )
        {
            m_Internal.CheckNumber = _Item.CheckNumber;			
            m_Internal.GuestCountModified = _Item.GuestCountModified;			
            m_Internal.TicketDate = _Item.TicketDate;			
            m_Internal.Establishment = _Item.Establishment;			
            m_Internal.ServerName = _Item.ServerName;			
            m_Internal.Description = _Item.Description;			
            m_Internal.Comment = _Item.Comment;			
            m_Internal.Price = _Item.Price;			
            m_Internal.Dtl_Typ_Cnt = _Item.Dtl_Typ_Cnt;			
            m_Internal.RecordType = _Item.RecordType;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDailyPOSTicketItem( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.POSTicketID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwDailyPOSTicketItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDailyPOSTicketItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwDailyPOSTicketItem(Expression<Func<vwDailyPOSTicketItem, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwDailyPOSTicketItem> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwDailyPOSTicketItem> _repo;
            
            if(db.TestMode)
            {
                vwDailyPOSTicketItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDailyPOSTicketItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwDailyPOSTicketItem> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwDailyPOSTicketItem SingleOrDefault(Expression<Func<vwDailyPOSTicketItem, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwDailyPOSTicketItem SingleOrDefault(Expression<Func<vwDailyPOSTicketItem, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwDailyPOSTicketItem> repo = GetRepo(connectionString,providerName);
            vwDailyPOSTicketItem single = repo.SingleOrDefault<vwDailyPOSTicketItem>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwDailyPOSTicketItem, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwDailyPOSTicketItem, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyvwDailyPOSTicketItemLoaded = false;
        protected static vwDailyPOSTicketItem EmptyvwDailyPOSTicketItemMember = null;

        public static vwDailyPOSTicketItem GetByID(Guid? value) 
        {
            vwDailyPOSTicketItem rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static vwDailyPOSTicketItem GetByID(Guid value) 
        {
            vwDailyPOSTicketItem rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyvwDailyPOSTicketItemLoaded )
                    {
                        rc = EmptyvwDailyPOSTicketItemMember;
                    }
                    else
                    {
                        IsEmptyvwDailyPOSTicketItemLoaded = true;
                        rc = vwDailyPOSTicketItem.Find( L => L.POSTicketID.Equals( value ) ).FirstOrDefault( );
                        EmptyvwDailyPOSTicketItemMember = rc;
                    }
                }
                else
                {
                    rc = vwDailyPOSTicketItem.Find( L => L.POSTicketID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<vwDailyPOSTicketItem> Find(Expression<Func<vwDailyPOSTicketItem, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwDailyPOSTicketItem> Find(Expression<Func<vwDailyPOSTicketItem, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwDailyPOSTicketItem> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwDailyPOSTicketItem> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwDailyPOSTicketItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwDailyPOSTicketItem> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwDailyPOSTicketItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwDailyPOSTicketItem> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "POSTicketID";
        }

        public object KeyValue()
        {
            return this.POSTicketID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.CheckNumber )
//			{
//				rc = this.CheckNumber.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwDailyPOSTicketItem)
            {
                vwDailyPOSTicketItem compare=(vwDailyPOSTicketItem)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.POSTicketID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.CheckNumber.ToString();
        }

        public string DescriptorColumn() 
        {
            return "CheckNumber";
        }

        public static string GetKeyColumn()
        {
            return "POSTicketID";
        }        

        public static string GetDescriptorColumn()
        {
            return "CheckNumber";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.POSTicketID;
            }
            set
            {
                m_Internal.POSTicketID = value;
            }
        }


//        Guid _POSTicketID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid POSTicketID
        {
            get { return m_Internal.POSTicketID; }
            set
            {
                if(m_Internal.POSTicketID!=value){
                    m_Internal.POSTicketID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CheckNumber;
        [LocalData]
        public string CheckNumber
        {
            get { return m_Internal.CheckNumber; }
            set
            {
                if(m_Internal.CheckNumber!=value){
                    m_Internal.CheckNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _GuestCountModified;
        [LocalData]
        public int? GuestCountModified
        {
            get { return m_Internal.GuestCountModified; }
            set
            {
                if(m_Internal.GuestCountModified!=value){
                    m_Internal.GuestCountModified=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestCountModified");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _TicketDate;
        [LocalData]
        public DateTime? TicketDate
        {
            get { return m_Internal.TicketDate; }
            set
            {
                if(m_Internal.TicketDate!=value){
                    m_Internal.TicketDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Establishment;
        [LocalData]
        public string Establishment
        {
            get { return m_Internal.Establishment; }
            set
            {
                if(m_Internal.Establishment!=value){
                    m_Internal.Establishment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Establishment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ServerName;
        [LocalData]
        public string ServerName
        {
            get { return m_Internal.ServerName; }
            set
            {
                if(m_Internal.ServerName!=value){
                    m_Internal.ServerName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServerName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Description;
        [LocalData]
        public string Description
        {
            get { return m_Internal.Description; }
            set
            {
                if(m_Internal.Description!=value){
                    m_Internal.Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Comment;
        [LocalData]
        public string Comment
        {
            get { return m_Internal.Comment; }
            set
            {
                if(m_Internal.Comment!=value){
                    m_Internal.Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Price;
        [LocalData]
        public decimal? Price
        {
            get { return m_Internal.Price; }
            set
            {
                if(m_Internal.Price!=value){
                    m_Internal.Price=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Typ_Cnt;
        [LocalData]
        public int? Dtl_Typ_Cnt
        {
            get { return m_Internal.Dtl_Typ_Cnt; }
            set
            {
                if(m_Internal.Dtl_Typ_Cnt!=value){
                    m_Internal.Dtl_Typ_Cnt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Typ_Cnt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _RecordType;
        [LocalData]
        public int RecordType
        {
            get { return m_Internal.RecordType; }
            set
            {
                if(m_Internal.RecordType!=value){
                    m_Internal.RecordType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecordType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwDailyPOSTicketItem, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwDailyPOSTicket : IWCFDataElement
    {
        
        string Establishment { get; set; }
        
        string CheckNumber { get; set; }
        
        DateTime? TicketDate { get; set; }
        
        int? Server { get; set; }
        
        string ServerName { get; set; }
        
        int? GuestCount { get; set; }
        
        string CustomerTable { get; set; }
        
        string RawData { get; set; }
        
        int TouchCount { get; set; }
        
        decimal? TipAmount { get; set; }
        
        int? GuestCountModified { get; set; }
        
        decimal? TicketTotal { get; set; }
        
        decimal? PaymentTotal { get; set; }
        
        string EstablishmentModified { get; set; }
        
        Guid POSTicketID { get; set; }
        
        int? EntreeCount { get; set; }
        
        int? PlatCount { get; set; }
        
        int? DessertCount { get; set; }
        
        int RecordType { get; set; }
        
        long TransactionType { get; set; }
        
        decimal? DiscountTotal { get; set; }
        
        string TicketPeriod { get; set; }
        
        int? EstablishmentNumber { get; set; }
        
        DateTime? BusinessDate { get; set; }

        void Copy( IvwDailyPOSTicket _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwDailyPOSTicket : IvwDailyPOSTicket
    {
        [DataMember]
        public string Establishment { get; set; }
        [DataMember]
        public string CheckNumber { get; set; }
        [DataMember]
        public DateTime? TicketDate { get; set; }
        [DataMember]
        public int? Server { get; set; }
        [DataMember]
        public string ServerName { get; set; }
        [DataMember]
        public int? GuestCount { get; set; }
        [DataMember]
        public string CustomerTable { get; set; }
        [DataMember]
        public string RawData { get; set; }
        [DataMember]
        public int TouchCount { get; set; }
        [DataMember]
        public decimal? TipAmount { get; set; }
        [DataMember]
        public int? GuestCountModified { get; set; }
        [DataMember]
        public decimal? TicketTotal { get; set; }
        [DataMember]
        public decimal? PaymentTotal { get; set; }
        [DataMember]
        public string EstablishmentModified { get; set; }
        [DataMember]
        public Guid POSTicketID { get; set; }
        [DataMember]
        public int? EntreeCount { get; set; }
        [DataMember]
        public int? PlatCount { get; set; }
        [DataMember]
        public int? DessertCount { get; set; }
        [DataMember]
        public int RecordType { get; set; }
        [DataMember]
        public long TransactionType { get; set; }
        [DataMember]
        public decimal? DiscountTotal { get; set; }
        [DataMember]
        public string TicketPeriod { get; set; }
        [DataMember]
        public int? EstablishmentNumber { get; set; }
        [DataMember]
        public DateTime? BusinessDate { get; set; }

        public void Copy( IvwDailyPOSTicket _Item )
        {
             CheckNumber = _Item.CheckNumber;			
             TicketDate = _Item.TicketDate;			
             Server = _Item.Server;			
             ServerName = _Item.ServerName;			
             GuestCount = _Item.GuestCount;			
             CustomerTable = _Item.CustomerTable;			
             RawData = _Item.RawData;			
             TouchCount = _Item.TouchCount;			
             TipAmount = _Item.TipAmount;			
             GuestCountModified = _Item.GuestCountModified;			
             TicketTotal = _Item.TicketTotal;			
             PaymentTotal = _Item.PaymentTotal;			
             EstablishmentModified = _Item.EstablishmentModified;			
             POSTicketID = _Item.POSTicketID;			
             EntreeCount = _Item.EntreeCount;			
             PlatCount = _Item.PlatCount;			
             DessertCount = _Item.DessertCount;			
             RecordType = _Item.RecordType;			
             TransactionType = _Item.TransactionType;			
             DiscountTotal = _Item.DiscountTotal;			
             TicketPeriod = _Item.TicketPeriod;			
             EstablishmentNumber = _Item.EstablishmentNumber;			
             BusinessDate = _Item.BusinessDate;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDailyPOSTicket( this );
        }
    }


    /// <summary>
    /// A class which represents the vwDailyPOSTickets table in the RenAix Database.
    /// </summary>
    public partial class vwDailyPOSTicket : BaseDataObject<DatavwDailyPOSTicket>, IActiveRecord, ICallOnCreated, IvwDailyPOSTicket
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwDailyPOSTicket> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwDailyPOSTicket>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwDailyPOSTicket> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwDailyPOSTicket item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwDailyPOSTicket item=new vwDailyPOSTicket();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwDailyPOSTicket> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwDailyPOSTicket()
        {
            m_Internal = new DatavwDailyPOSTicket();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwDailyPOSTicket( bool _CallOnCreated )
        {
            m_Internal = new DatavwDailyPOSTicket();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwDailyPOSTicket(string connectionString, string providerName) 
        {
            m_Internal = new DatavwDailyPOSTicket();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwDailyPOSTicket( IvwDailyPOSTicket _Item )
        {
            m_Internal = new DatavwDailyPOSTicket();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwDailyPOSTicket( DatavwDailyPOSTicket _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwDailyPOSTicket _Item )
        {
            m_Internal.CheckNumber = _Item.CheckNumber;			
            m_Internal.TicketDate = _Item.TicketDate;			
            m_Internal.Server = _Item.Server;			
            m_Internal.ServerName = _Item.ServerName;			
            m_Internal.GuestCount = _Item.GuestCount;			
            m_Internal.CustomerTable = _Item.CustomerTable;			
            m_Internal.RawData = _Item.RawData;			
            m_Internal.TouchCount = _Item.TouchCount;			
            m_Internal.TipAmount = _Item.TipAmount;			
            m_Internal.GuestCountModified = _Item.GuestCountModified;			
            m_Internal.TicketTotal = _Item.TicketTotal;			
            m_Internal.PaymentTotal = _Item.PaymentTotal;			
            m_Internal.EstablishmentModified = _Item.EstablishmentModified;			
            m_Internal.POSTicketID = _Item.POSTicketID;			
            m_Internal.EntreeCount = _Item.EntreeCount;			
            m_Internal.PlatCount = _Item.PlatCount;			
            m_Internal.DessertCount = _Item.DessertCount;			
            m_Internal.RecordType = _Item.RecordType;			
            m_Internal.TransactionType = _Item.TransactionType;			
            m_Internal.DiscountTotal = _Item.DiscountTotal;			
            m_Internal.TicketPeriod = _Item.TicketPeriod;			
            m_Internal.EstablishmentNumber = _Item.EstablishmentNumber;			
            m_Internal.BusinessDate = _Item.BusinessDate;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDailyPOSTicket( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwDailyPOSTicket.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDailyPOSTicket>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwDailyPOSTicket(Expression<Func<vwDailyPOSTicket, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwDailyPOSTicket> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwDailyPOSTicket> _repo;
            
            if(db.TestMode)
            {
                vwDailyPOSTicket.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDailyPOSTicket>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwDailyPOSTicket> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwDailyPOSTicket SingleOrDefault(Expression<Func<vwDailyPOSTicket, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwDailyPOSTicket SingleOrDefault(Expression<Func<vwDailyPOSTicket, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwDailyPOSTicket> repo = GetRepo(connectionString,providerName);
            vwDailyPOSTicket single = repo.SingleOrDefault<vwDailyPOSTicket>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwDailyPOSTicket, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwDailyPOSTicket, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwDailyPOSTicket GetByID(string value) 
        {
            return vwDailyPOSTicket.Find( L => L.Establishment.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwDailyPOSTicket> Find(Expression<Func<vwDailyPOSTicket, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwDailyPOSTicket> Find(Expression<Func<vwDailyPOSTicket, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwDailyPOSTicket> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwDailyPOSTicket> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwDailyPOSTicket> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwDailyPOSTicket> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwDailyPOSTicket> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwDailyPOSTicket> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Establishment";
        }

        public object KeyValue()
        {
            return this.Establishment;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Establishment )
//			{
//				rc = this.Establishment.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwDailyPOSTicket)
            {
                vwDailyPOSTicket compare=(vwDailyPOSTicket)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Establishment.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Establishment";
        }

        public static string GetKeyColumn()
        {
            return "Establishment";
        }        

        public static string GetDescriptorColumn()
        {
            return "Establishment";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _Establishment;
        [SubSonicPrimaryKey]
        [LocalData]
        public string Establishment
        {
            get { return m_Internal.Establishment; }
            set
            {
                if(m_Internal.Establishment!=value){
                    m_Internal.Establishment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Establishment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CheckNumber;
        [LocalData]
        public string CheckNumber
        {
            get { return m_Internal.CheckNumber; }
            set
            {
                if(m_Internal.CheckNumber!=value){
                    m_Internal.CheckNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _TicketDate;
        [LocalData]
        public DateTime? TicketDate
        {
            get { return m_Internal.TicketDate; }
            set
            {
                if(m_Internal.TicketDate!=value){
                    m_Internal.TicketDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Server;
        [LocalData]
        public int? Server
        {
            get { return m_Internal.Server; }
            set
            {
                if(m_Internal.Server!=value){
                    m_Internal.Server=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Server");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ServerName;
        [LocalData]
        public string ServerName
        {
            get { return m_Internal.ServerName; }
            set
            {
                if(m_Internal.ServerName!=value){
                    m_Internal.ServerName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServerName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _GuestCount;
        [LocalData]
        public int? GuestCount
        {
            get { return m_Internal.GuestCount; }
            set
            {
                if(m_Internal.GuestCount!=value){
                    m_Internal.GuestCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CustomerTable;
        [LocalData]
        public string CustomerTable
        {
            get { return m_Internal.CustomerTable; }
            set
            {
                if(m_Internal.CustomerTable!=value){
                    m_Internal.CustomerTable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerTable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RawData;
        [LocalData]
        public string RawData
        {
            get { return m_Internal.RawData; }
            set
            {
                if(m_Internal.RawData!=value){
                    m_Internal.RawData=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RawData");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _TouchCount;
        [LocalData]
        public int TouchCount
        {
            get { return m_Internal.TouchCount; }
            set
            {
                if(m_Internal.TouchCount!=value){
                    m_Internal.TouchCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TouchCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TipAmount;
        [LocalData]
        public decimal? TipAmount
        {
            get { return m_Internal.TipAmount; }
            set
            {
                if(m_Internal.TipAmount!=value){
                    m_Internal.TipAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TipAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _GuestCountModified;
        [LocalData]
        public int? GuestCountModified
        {
            get { return m_Internal.GuestCountModified; }
            set
            {
                if(m_Internal.GuestCountModified!=value){
                    m_Internal.GuestCountModified=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestCountModified");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TicketTotal;
        [LocalData]
        public decimal? TicketTotal
        {
            get { return m_Internal.TicketTotal; }
            set
            {
                if(m_Internal.TicketTotal!=value){
                    m_Internal.TicketTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _PaymentTotal;
        [LocalData]
        public decimal? PaymentTotal
        {
            get { return m_Internal.PaymentTotal; }
            set
            {
                if(m_Internal.PaymentTotal!=value){
                    m_Internal.PaymentTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaymentTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EstablishmentModified;
        [LocalData]
        public string EstablishmentModified
        {
            get { return m_Internal.EstablishmentModified; }
            set
            {
                if(m_Internal.EstablishmentModified!=value){
                    m_Internal.EstablishmentModified=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EstablishmentModified");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _POSTicketID;
        [LocalData]
        public Guid POSTicketID
        {
            get { return m_Internal.POSTicketID; }
            set
            {
                if(m_Internal.POSTicketID!=value){
                    m_Internal.POSTicketID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EntreeCount;
        [LocalData]
        public int? EntreeCount
        {
            get { return m_Internal.EntreeCount; }
            set
            {
                if(m_Internal.EntreeCount!=value){
                    m_Internal.EntreeCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntreeCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _PlatCount;
        [LocalData]
        public int? PlatCount
        {
            get { return m_Internal.PlatCount; }
            set
            {
                if(m_Internal.PlatCount!=value){
                    m_Internal.PlatCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PlatCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _DessertCount;
        [LocalData]
        public int? DessertCount
        {
            get { return m_Internal.DessertCount; }
            set
            {
                if(m_Internal.DessertCount!=value){
                    m_Internal.DessertCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DessertCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _RecordType;
        [LocalData]
        public int RecordType
        {
            get { return m_Internal.RecordType; }
            set
            {
                if(m_Internal.RecordType!=value){
                    m_Internal.RecordType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecordType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        long _TransactionType;
        [LocalData]
        public long TransactionType
        {
            get { return m_Internal.TransactionType; }
            set
            {
                if(m_Internal.TransactionType!=value){
                    m_Internal.TransactionType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _DiscountTotal;
        [LocalData]
        public decimal? DiscountTotal
        {
            get { return m_Internal.DiscountTotal; }
            set
            {
                if(m_Internal.DiscountTotal!=value){
                    m_Internal.DiscountTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiscountTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TicketPeriod;
        [LocalData]
        public string TicketPeriod
        {
            get { return m_Internal.TicketPeriod; }
            set
            {
                if(m_Internal.TicketPeriod!=value){
                    m_Internal.TicketPeriod=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketPeriod");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EstablishmentNumber;
        [LocalData]
        public int? EstablishmentNumber
        {
            get { return m_Internal.EstablishmentNumber; }
            set
            {
                if(m_Internal.EstablishmentNumber!=value){
                    m_Internal.EstablishmentNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EstablishmentNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _BusinessDate;
        [LocalData]
        public DateTime? BusinessDate
        {
            get { return m_Internal.BusinessDate; }
            set
            {
                if(m_Internal.BusinessDate!=value){
                    m_Internal.BusinessDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BusinessDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwDailyPOSTicket, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwDailyTicketDataSummary : IWCFDataElement
    {
        
        DateTime TicketDate { get; set; }
        
        string EstablishmentModified { get; set; }
        
        long TransactionType { get; set; }
        
        decimal? TotalTicket { get; set; }
        
        decimal? TotalPayments { get; set; }
        
        decimal? TotalTips { get; set; }
        
        int? TotalTickets { get; set; }
        
        int? TotalGuests { get; set; }
        
        decimal? TotalDiscounts { get; set; }
        
        decimal MinibarLost { get; set; }
        
        decimal Amenitites { get; set; }

        void Copy( IvwDailyTicketDataSummary _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwDailyTicketDataSummary : IvwDailyTicketDataSummary
    {
        [DataMember]
        public DateTime TicketDate { get; set; }
        [DataMember]
        public string EstablishmentModified { get; set; }
        [DataMember]
        public long TransactionType { get; set; }
        [DataMember]
        public decimal? TotalTicket { get; set; }
        [DataMember]
        public decimal? TotalPayments { get; set; }
        [DataMember]
        public decimal? TotalTips { get; set; }
        [DataMember]
        public int? TotalTickets { get; set; }
        [DataMember]
        public int? TotalGuests { get; set; }
        [DataMember]
        public decimal? TotalDiscounts { get; set; }
        [DataMember]
        public decimal MinibarLost { get; set; }
        [DataMember]
        public decimal Amenitites { get; set; }

        public void Copy( IvwDailyTicketDataSummary _Item )
        {
             EstablishmentModified = _Item.EstablishmentModified;			
             TransactionType = _Item.TransactionType;			
             TotalTicket = _Item.TotalTicket;			
             TotalPayments = _Item.TotalPayments;			
             TotalTips = _Item.TotalTips;			
             TotalTickets = _Item.TotalTickets;			
             TotalGuests = _Item.TotalGuests;			
             TotalDiscounts = _Item.TotalDiscounts;			
             MinibarLost = _Item.MinibarLost;			
             Amenitites = _Item.Amenitites;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDailyTicketDataSummary( this );
        }
    }


    /// <summary>
    /// A class which represents the vwDailyTicketDataSummary table in the RenAix Database.
    /// </summary>
    public partial class vwDailyTicketDataSummary : BaseDataObject<DatavwDailyTicketDataSummary>, IActiveRecord, ICallOnCreated, IvwDailyTicketDataSummary
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwDailyTicketDataSummary> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwDailyTicketDataSummary>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwDailyTicketDataSummary> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwDailyTicketDataSummary item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwDailyTicketDataSummary item=new vwDailyTicketDataSummary();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwDailyTicketDataSummary> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwDailyTicketDataSummary()
        {
            m_Internal = new DatavwDailyTicketDataSummary();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwDailyTicketDataSummary( bool _CallOnCreated )
        {
            m_Internal = new DatavwDailyTicketDataSummary();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwDailyTicketDataSummary(string connectionString, string providerName) 
        {
            m_Internal = new DatavwDailyTicketDataSummary();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwDailyTicketDataSummary( IvwDailyTicketDataSummary _Item )
        {
            m_Internal = new DatavwDailyTicketDataSummary();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwDailyTicketDataSummary( DatavwDailyTicketDataSummary _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwDailyTicketDataSummary _Item )
        {
            m_Internal.EstablishmentModified = _Item.EstablishmentModified;			
            m_Internal.TransactionType = _Item.TransactionType;			
            m_Internal.TotalTicket = _Item.TotalTicket;			
            m_Internal.TotalPayments = _Item.TotalPayments;			
            m_Internal.TotalTips = _Item.TotalTips;			
            m_Internal.TotalTickets = _Item.TotalTickets;			
            m_Internal.TotalGuests = _Item.TotalGuests;			
            m_Internal.TotalDiscounts = _Item.TotalDiscounts;			
            m_Internal.MinibarLost = _Item.MinibarLost;			
            m_Internal.Amenitites = _Item.Amenitites;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDailyTicketDataSummary( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwDailyTicketDataSummary.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDailyTicketDataSummary>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwDailyTicketDataSummary(Expression<Func<vwDailyTicketDataSummary, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwDailyTicketDataSummary> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwDailyTicketDataSummary> _repo;
            
            if(db.TestMode)
            {
                vwDailyTicketDataSummary.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDailyTicketDataSummary>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwDailyTicketDataSummary> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwDailyTicketDataSummary SingleOrDefault(Expression<Func<vwDailyTicketDataSummary, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwDailyTicketDataSummary SingleOrDefault(Expression<Func<vwDailyTicketDataSummary, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwDailyTicketDataSummary> repo = GetRepo(connectionString,providerName);
            vwDailyTicketDataSummary single = repo.SingleOrDefault<vwDailyTicketDataSummary>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwDailyTicketDataSummary, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwDailyTicketDataSummary, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwDailyTicketDataSummary GetByID(DateTime value) 
        {
            return vwDailyTicketDataSummary.Find( L => L.TicketDate.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwDailyTicketDataSummary> Find(Expression<Func<vwDailyTicketDataSummary, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwDailyTicketDataSummary> Find(Expression<Func<vwDailyTicketDataSummary, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwDailyTicketDataSummary> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwDailyTicketDataSummary> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwDailyTicketDataSummary> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwDailyTicketDataSummary> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwDailyTicketDataSummary> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwDailyTicketDataSummary> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "TicketDate";
        }

        public object KeyValue()
        {
            return this.TicketDate;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.EstablishmentModified )
//			{
//				rc = this.EstablishmentModified.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwDailyTicketDataSummary)
            {
                vwDailyTicketDataSummary compare=(vwDailyTicketDataSummary)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.EstablishmentModified.ToString();
        }

        public string DescriptorColumn() 
        {
            return "EstablishmentModified";
        }

        public static string GetKeyColumn()
        {
            return "TicketDate";
        }        

        public static string GetDescriptorColumn()
        {
            return "EstablishmentModified";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _TicketDate;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime TicketDate
        {
            get { return m_Internal.TicketDate; }
            set
            {
                if(m_Internal.TicketDate!=value){
                    m_Internal.TicketDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EstablishmentModified;
        [LocalData]
        public string EstablishmentModified
        {
            get { return m_Internal.EstablishmentModified; }
            set
            {
                if(m_Internal.EstablishmentModified!=value){
                    m_Internal.EstablishmentModified=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EstablishmentModified");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        long _TransactionType;
        [LocalData]
        public long TransactionType
        {
            get { return m_Internal.TransactionType; }
            set
            {
                if(m_Internal.TransactionType!=value){
                    m_Internal.TransactionType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalTicket;
        [LocalData]
        public decimal? TotalTicket
        {
            get { return m_Internal.TotalTicket; }
            set
            {
                if(m_Internal.TotalTicket!=value){
                    m_Internal.TotalTicket=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalTicket");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalPayments;
        [LocalData]
        public decimal? TotalPayments
        {
            get { return m_Internal.TotalPayments; }
            set
            {
                if(m_Internal.TotalPayments!=value){
                    m_Internal.TotalPayments=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalPayments");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalTips;
        [LocalData]
        public decimal? TotalTips
        {
            get { return m_Internal.TotalTips; }
            set
            {
                if(m_Internal.TotalTips!=value){
                    m_Internal.TotalTips=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalTips");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalTickets;
        [LocalData]
        public int? TotalTickets
        {
            get { return m_Internal.TotalTickets; }
            set
            {
                if(m_Internal.TotalTickets!=value){
                    m_Internal.TotalTickets=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalTickets");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalGuests;
        [LocalData]
        public int? TotalGuests
        {
            get { return m_Internal.TotalGuests; }
            set
            {
                if(m_Internal.TotalGuests!=value){
                    m_Internal.TotalGuests=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalGuests");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalDiscounts;
        [LocalData]
        public decimal? TotalDiscounts
        {
            get { return m_Internal.TotalDiscounts; }
            set
            {
                if(m_Internal.TotalDiscounts!=value){
                    m_Internal.TotalDiscounts=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalDiscounts");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _MinibarLost;
        [LocalData]
        public decimal MinibarLost
        {
            get { return m_Internal.MinibarLost; }
            set
            {
                if(m_Internal.MinibarLost!=value){
                    m_Internal.MinibarLost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinibarLost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Amenitites;
        [LocalData]
        public decimal Amenitites
        {
            get { return m_Internal.Amenitites; }
            set
            {
                if(m_Internal.Amenitites!=value){
                    m_Internal.Amenitites=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Amenitites");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwDailyTicketDataSummary, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwDiscountByTicket : IWCFDataElement
    {
        
        DateTime TicketDate { get; set; }
        
        int? CheckNumber { get; set; }
        
        decimal? DiscountTotal { get; set; }

        void Copy( IvwDiscountByTicket _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwDiscountByTicket : IvwDiscountByTicket
    {
        [DataMember]
        public DateTime TicketDate { get; set; }
        [DataMember]
        public int? CheckNumber { get; set; }
        [DataMember]
        public decimal? DiscountTotal { get; set; }

        public void Copy( IvwDiscountByTicket _Item )
        {
             CheckNumber = _Item.CheckNumber;			
             DiscountTotal = _Item.DiscountTotal;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDiscountByTicket( this );
        }
    }


    /// <summary>
    /// A class which represents the vwDiscountByTicket table in the RenAix Database.
    /// </summary>
    public partial class vwDiscountByTicket : BaseDataObject<DatavwDiscountByTicket>, IActiveRecord, ICallOnCreated, IvwDiscountByTicket
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwDiscountByTicket> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwDiscountByTicket>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwDiscountByTicket> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwDiscountByTicket item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwDiscountByTicket item=new vwDiscountByTicket();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwDiscountByTicket> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwDiscountByTicket()
        {
            m_Internal = new DatavwDiscountByTicket();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwDiscountByTicket( bool _CallOnCreated )
        {
            m_Internal = new DatavwDiscountByTicket();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwDiscountByTicket(string connectionString, string providerName) 
        {
            m_Internal = new DatavwDiscountByTicket();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwDiscountByTicket( IvwDiscountByTicket _Item )
        {
            m_Internal = new DatavwDiscountByTicket();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwDiscountByTicket( DatavwDiscountByTicket _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwDiscountByTicket _Item )
        {
            m_Internal.CheckNumber = _Item.CheckNumber;			
            m_Internal.DiscountTotal = _Item.DiscountTotal;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDiscountByTicket( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwDiscountByTicket.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDiscountByTicket>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwDiscountByTicket(Expression<Func<vwDiscountByTicket, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwDiscountByTicket> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwDiscountByTicket> _repo;
            
            if(db.TestMode)
            {
                vwDiscountByTicket.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDiscountByTicket>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwDiscountByTicket> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwDiscountByTicket SingleOrDefault(Expression<Func<vwDiscountByTicket, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwDiscountByTicket SingleOrDefault(Expression<Func<vwDiscountByTicket, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwDiscountByTicket> repo = GetRepo(connectionString,providerName);
            vwDiscountByTicket single = repo.SingleOrDefault<vwDiscountByTicket>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwDiscountByTicket, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwDiscountByTicket, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwDiscountByTicket GetByID(DateTime value) 
        {
            return vwDiscountByTicket.Find( L => L.TicketDate.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwDiscountByTicket> Find(Expression<Func<vwDiscountByTicket, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwDiscountByTicket> Find(Expression<Func<vwDiscountByTicket, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwDiscountByTicket> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwDiscountByTicket> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwDiscountByTicket> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwDiscountByTicket> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwDiscountByTicket> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwDiscountByTicket> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "TicketDate";
        }

        public object KeyValue()
        {
            return this.TicketDate;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.CheckNumber )
//			{
//				rc = this.CheckNumber.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwDiscountByTicket)
            {
                vwDiscountByTicket compare=(vwDiscountByTicket)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.CheckNumber.ToString();
        }

        public string DescriptorColumn() 
        {
            return "CheckNumber";
        }

        public static string GetKeyColumn()
        {
            return "TicketDate";
        }        

        public static string GetDescriptorColumn()
        {
            return "CheckNumber";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _TicketDate;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime TicketDate
        {
            get { return m_Internal.TicketDate; }
            set
            {
                if(m_Internal.TicketDate!=value){
                    m_Internal.TicketDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _CheckNumber;
        [LocalData]
        public int? CheckNumber
        {
            get { return m_Internal.CheckNumber; }
            set
            {
                if(m_Internal.CheckNumber!=value){
                    m_Internal.CheckNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _DiscountTotal;
        [LocalData]
        public decimal? DiscountTotal
        {
            get { return m_Internal.DiscountTotal; }
            set
            {
                if(m_Internal.DiscountTotal!=value){
                    m_Internal.DiscountTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiscountTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwDiscountByTicket, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwMissingTicket : IWCFDataElement
    {
        
        DateTime BusinessDate { get; set; }
        
        string MicrosCheckNumber { get; set; }
        
        decimal? CheckAmount { get; set; }
        
        int? EstablishmentNumber { get; set; }
        
        int? chk_num { get; set; }
        
        decimal? sub_ttl { get; set; }
        
        decimal? pymnt_ttl { get; set; }
        
        decimal? TicketDifference { get; set; }

        void Copy( IvwMissingTicket _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwMissingTicket : IvwMissingTicket
    {
        [DataMember]
        public DateTime BusinessDate { get; set; }
        [DataMember]
        public string MicrosCheckNumber { get; set; }
        [DataMember]
        public decimal? CheckAmount { get; set; }
        [DataMember]
        public int? EstablishmentNumber { get; set; }
        [DataMember]
        public int? chk_num { get; set; }
        [DataMember]
        public decimal? sub_ttl { get; set; }
        [DataMember]
        public decimal? pymnt_ttl { get; set; }
        [DataMember]
        public decimal? TicketDifference { get; set; }

        public void Copy( IvwMissingTicket _Item )
        {
             MicrosCheckNumber = _Item.MicrosCheckNumber;			
             CheckAmount = _Item.CheckAmount;			
             EstablishmentNumber = _Item.EstablishmentNumber;			
             chk_num = _Item.chk_num;			
             sub_ttl = _Item.sub_ttl;			
             pymnt_ttl = _Item.pymnt_ttl;			
             TicketDifference = _Item.TicketDifference;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwMissingTicket( this );
        }
    }


    /// <summary>
    /// A class which represents the vwMissingTickets table in the RenAix Database.
    /// </summary>
    public partial class vwMissingTicket : BaseDataObject<DatavwMissingTicket>, IActiveRecord, ICallOnCreated, IvwMissingTicket
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwMissingTicket> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwMissingTicket>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwMissingTicket> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwMissingTicket item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwMissingTicket item=new vwMissingTicket();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwMissingTicket> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwMissingTicket()
        {
            m_Internal = new DatavwMissingTicket();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwMissingTicket( bool _CallOnCreated )
        {
            m_Internal = new DatavwMissingTicket();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwMissingTicket(string connectionString, string providerName) 
        {
            m_Internal = new DatavwMissingTicket();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwMissingTicket( IvwMissingTicket _Item )
        {
            m_Internal = new DatavwMissingTicket();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwMissingTicket( DatavwMissingTicket _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwMissingTicket _Item )
        {
            m_Internal.MicrosCheckNumber = _Item.MicrosCheckNumber;			
            m_Internal.CheckAmount = _Item.CheckAmount;			
            m_Internal.EstablishmentNumber = _Item.EstablishmentNumber;			
            m_Internal.chk_num = _Item.chk_num;			
            m_Internal.sub_ttl = _Item.sub_ttl;			
            m_Internal.pymnt_ttl = _Item.pymnt_ttl;			
            m_Internal.TicketDifference = _Item.TicketDifference;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwMissingTicket( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwMissingTicket.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwMissingTicket>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwMissingTicket(Expression<Func<vwMissingTicket, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwMissingTicket> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwMissingTicket> _repo;
            
            if(db.TestMode)
            {
                vwMissingTicket.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwMissingTicket>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwMissingTicket> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwMissingTicket SingleOrDefault(Expression<Func<vwMissingTicket, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwMissingTicket SingleOrDefault(Expression<Func<vwMissingTicket, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwMissingTicket> repo = GetRepo(connectionString,providerName);
            vwMissingTicket single = repo.SingleOrDefault<vwMissingTicket>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwMissingTicket, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwMissingTicket, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwMissingTicket GetByID(DateTime value) 
        {
            return vwMissingTicket.Find( L => L.BusinessDate.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwMissingTicket> Find(Expression<Func<vwMissingTicket, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwMissingTicket> Find(Expression<Func<vwMissingTicket, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwMissingTicket> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwMissingTicket> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwMissingTicket> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwMissingTicket> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwMissingTicket> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwMissingTicket> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "BusinessDate";
        }

        public object KeyValue()
        {
            return this.BusinessDate;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.MicrosCheckNumber )
//			{
//				rc = this.MicrosCheckNumber.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwMissingTicket)
            {
                vwMissingTicket compare=(vwMissingTicket)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.MicrosCheckNumber.ToString();
        }

        public string DescriptorColumn() 
        {
            return "MicrosCheckNumber";
        }

        public static string GetKeyColumn()
        {
            return "BusinessDate";
        }        

        public static string GetDescriptorColumn()
        {
            return "MicrosCheckNumber";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _BusinessDate;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime BusinessDate
        {
            get { return m_Internal.BusinessDate; }
            set
            {
                if(m_Internal.BusinessDate!=value){
                    m_Internal.BusinessDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BusinessDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MicrosCheckNumber;
        [LocalData]
        public string MicrosCheckNumber
        {
            get { return m_Internal.MicrosCheckNumber; }
            set
            {
                if(m_Internal.MicrosCheckNumber!=value){
                    m_Internal.MicrosCheckNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MicrosCheckNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _CheckAmount;
        [LocalData]
        public decimal? CheckAmount
        {
            get { return m_Internal.CheckAmount; }
            set
            {
                if(m_Internal.CheckAmount!=value){
                    m_Internal.CheckAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EstablishmentNumber;
        [LocalData]
        public int? EstablishmentNumber
        {
            get { return m_Internal.EstablishmentNumber; }
            set
            {
                if(m_Internal.EstablishmentNumber!=value){
                    m_Internal.EstablishmentNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EstablishmentNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _chk_num;
        [LocalData]
        public int? chk_num
        {
            get { return m_Internal.chk_num; }
            set
            {
                if(m_Internal.chk_num!=value){
                    m_Internal.chk_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="chk_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _sub_ttl;
        [LocalData]
        public decimal? sub_ttl
        {
            get { return m_Internal.sub_ttl; }
            set
            {
                if(m_Internal.sub_ttl!=value){
                    m_Internal.sub_ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="sub_ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _pymnt_ttl;
        [LocalData]
        public decimal? pymnt_ttl
        {
            get { return m_Internal.pymnt_ttl; }
            set
            {
                if(m_Internal.pymnt_ttl!=value){
                    m_Internal.pymnt_ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="pymnt_ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TicketDifference;
        [LocalData]
        public decimal? TicketDifference
        {
            get { return m_Internal.TicketDifference; }
            set
            {
                if(m_Internal.TicketDifference!=value){
                    m_Internal.TicketDifference=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketDifference");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwMissingTicket, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwMRSBRFinancial : IWCFDataElement
    {
        
        DateTime TicketDate { get; set; }
        
        DateTime? BusinessDate { get; set; }
        
        string AdjustmentReasonCode { get; set; }
        
        string AdjustmentYN { get; set; }
        
        decimal? AmountPosted { get; set; }
        
        string ARCompressedYN { get; set; }
        
        string ARCreditAmount { get; set; }
        
        string ARDebitAmount { get; set; }
        
        string ARInvoiceNumber { get; set; }
        
        string ARStatus { get; set; }
        
        string ARTransferDate { get; set; }
        
        string ArrangementCode { get; set; }
        
        string ArrangementDescription { get; set; }
        
        string BillNo { get; set; }
        
        int? CashierID { get; set; }
        
        string CheckNumber { get; set; }
        
        string CurrencyCode { get; set; }
        
        string DepositLedgerCredit { get; set; }
        
        string DepositLedgerDebit { get; set; }
        
        string DisplayYN { get; set; }
        
        decimal? ExchangeRateExcludingCommission { get; set; }
        
        decimal? ExchangeRateForTransaction { get; set; }
        
        string FixedChargesYN { get; set; }
        
        string FolioName { get; set; }
        
        int? FolioWindow { get; set; }
        
        decimal? FoodTax { get; set; }
        
        string ForeignExchangeCommissionAmount { get; set; }
        
        string ForeignExchangeCommissionPercent { get; set; }
        
        string ForeignExchangeType { get; set; }
        
        string Generates { get; set; }
        
        decimal? GrossAmount { get; set; }
        
        string GuestAccountCredit { get; set; }
        
        decimal? GuestAccountDebit { get; set; }
        
        DateTime? InsertDate { get; set; }
        
        string InsertUser { get; set; }
        
        string InternalYN { get; set; }
        
        string InvoiceClosingDate { get; set; }
        
        string InvoiceType { get; set; }
        
        string MarketCode { get; set; }
        
        decimal? MinibarTax { get; set; }
        
        decimal? NetAmount { get; set; }
        
        decimal? OtherTax { get; set; }
        
        string PackageAccountCredit { get; set; }
        
        string PackageAccountDebit { get; set; }
        
        string ParrallelCurrencyCode { get; set; }
        
        decimal? Price { get; set; }
        
        string Product { get; set; }
        
        string Property { get; set; }
        
        int? QuantityOfProduct { get; set; }
        
        string RateCode { get; set; }
        
        string ReceiptNumber { get; set; }
        
        string Reference { get; set; }
        
        string Remark { get; set; }
        
        decimal? RevenueAmount { get; set; }
        
        string RoomClass { get; set; }
        
        int? RoomNumber { get; set; }
        
        decimal? RoomTax { get; set; }
        
        string SourceCode { get; set; }
        
        string SummaryReferenceCode { get; set; }
        
        string TACommissionable { get; set; }
        
        string TaxDeferredYN { get; set; }
        
        string TaxGeneratedYN { get; set; }
        
        string TaxInclusiveYN { get; set; }
        
        decimal? TransactionAmount { get; set; }
        
        string TransactionCode { get; set; }
        
        string TransactionCodeDescription { get; set; }
        
        string TransactionCodeGroup { get; set; }
        
        string TransactionCodeSubgroup { get; set; }
        
        DateTime? TransactionDate { get; set; }
        
        string TransactionGroupType { get; set; }
        
        string TransactionType { get; set; }
        
        string TransferDate { get; set; }
        
        decimal? GrossAmount2 { get; set; }
        
        decimal? NetAmount2 { get; set; }
        
        DateTime? UpdateDate { get; set; }
        
        string UpdateUser { get; set; }
        
        Guid mrsbr_financialID { get; set; }
        
        string DataSource { get; set; }

        void Copy( IvwMRSBRFinancial _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwMRSBRFinancial : IvwMRSBRFinancial
    {
        [DataMember]
        public DateTime TicketDate { get; set; }
        [DataMember]
        public DateTime? BusinessDate { get; set; }
        [DataMember]
        public string AdjustmentReasonCode { get; set; }
        [DataMember]
        public string AdjustmentYN { get; set; }
        [DataMember]
        public decimal? AmountPosted { get; set; }
        [DataMember]
        public string ARCompressedYN { get; set; }
        [DataMember]
        public string ARCreditAmount { get; set; }
        [DataMember]
        public string ARDebitAmount { get; set; }
        [DataMember]
        public string ARInvoiceNumber { get; set; }
        [DataMember]
        public string ARStatus { get; set; }
        [DataMember]
        public string ARTransferDate { get; set; }
        [DataMember]
        public string ArrangementCode { get; set; }
        [DataMember]
        public string ArrangementDescription { get; set; }
        [DataMember]
        public string BillNo { get; set; }
        [DataMember]
        public int? CashierID { get; set; }
        [DataMember]
        public string CheckNumber { get; set; }
        [DataMember]
        public string CurrencyCode { get; set; }
        [DataMember]
        public string DepositLedgerCredit { get; set; }
        [DataMember]
        public string DepositLedgerDebit { get; set; }
        [DataMember]
        public string DisplayYN { get; set; }
        [DataMember]
        public decimal? ExchangeRateExcludingCommission { get; set; }
        [DataMember]
        public decimal? ExchangeRateForTransaction { get; set; }
        [DataMember]
        public string FixedChargesYN { get; set; }
        [DataMember]
        public string FolioName { get; set; }
        [DataMember]
        public int? FolioWindow { get; set; }
        [DataMember]
        public decimal? FoodTax { get; set; }
        [DataMember]
        public string ForeignExchangeCommissionAmount { get; set; }
        [DataMember]
        public string ForeignExchangeCommissionPercent { get; set; }
        [DataMember]
        public string ForeignExchangeType { get; set; }
        [DataMember]
        public string Generates { get; set; }
        [DataMember]
        public decimal? GrossAmount { get; set; }
        [DataMember]
        public string GuestAccountCredit { get; set; }
        [DataMember]
        public decimal? GuestAccountDebit { get; set; }
        [DataMember]
        public DateTime? InsertDate { get; set; }
        [DataMember]
        public string InsertUser { get; set; }
        [DataMember]
        public string InternalYN { get; set; }
        [DataMember]
        public string InvoiceClosingDate { get; set; }
        [DataMember]
        public string InvoiceType { get; set; }
        [DataMember]
        public string MarketCode { get; set; }
        [DataMember]
        public decimal? MinibarTax { get; set; }
        [DataMember]
        public decimal? NetAmount { get; set; }
        [DataMember]
        public decimal? OtherTax { get; set; }
        [DataMember]
        public string PackageAccountCredit { get; set; }
        [DataMember]
        public string PackageAccountDebit { get; set; }
        [DataMember]
        public string ParrallelCurrencyCode { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public string Product { get; set; }
        [DataMember]
        public string Property { get; set; }
        [DataMember]
        public int? QuantityOfProduct { get; set; }
        [DataMember]
        public string RateCode { get; set; }
        [DataMember]
        public string ReceiptNumber { get; set; }
        [DataMember]
        public string Reference { get; set; }
        [DataMember]
        public string Remark { get; set; }
        [DataMember]
        public decimal? RevenueAmount { get; set; }
        [DataMember]
        public string RoomClass { get; set; }
        [DataMember]
        public int? RoomNumber { get; set; }
        [DataMember]
        public decimal? RoomTax { get; set; }
        [DataMember]
        public string SourceCode { get; set; }
        [DataMember]
        public string SummaryReferenceCode { get; set; }
        [DataMember]
        public string TACommissionable { get; set; }
        [DataMember]
        public string TaxDeferredYN { get; set; }
        [DataMember]
        public string TaxGeneratedYN { get; set; }
        [DataMember]
        public string TaxInclusiveYN { get; set; }
        [DataMember]
        public decimal? TransactionAmount { get; set; }
        [DataMember]
        public string TransactionCode { get; set; }
        [DataMember]
        public string TransactionCodeDescription { get; set; }
        [DataMember]
        public string TransactionCodeGroup { get; set; }
        [DataMember]
        public string TransactionCodeSubgroup { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string TransactionGroupType { get; set; }
        [DataMember]
        public string TransactionType { get; set; }
        [DataMember]
        public string TransferDate { get; set; }
        [DataMember]
        public decimal? GrossAmount2 { get; set; }
        [DataMember]
        public decimal? NetAmount2 { get; set; }
        [DataMember]
        public DateTime? UpdateDate { get; set; }
        [DataMember]
        public string UpdateUser { get; set; }
        [DataMember]
        public Guid mrsbr_financialID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( IvwMRSBRFinancial _Item )
        {
             BusinessDate = _Item.BusinessDate;			
             AdjustmentReasonCode = _Item.AdjustmentReasonCode;			
             AdjustmentYN = _Item.AdjustmentYN;			
             AmountPosted = _Item.AmountPosted;			
             ARCompressedYN = _Item.ARCompressedYN;			
             ARCreditAmount = _Item.ARCreditAmount;			
             ARDebitAmount = _Item.ARDebitAmount;			
             ARInvoiceNumber = _Item.ARInvoiceNumber;			
             ARStatus = _Item.ARStatus;			
             ARTransferDate = _Item.ARTransferDate;			
             ArrangementCode = _Item.ArrangementCode;			
             ArrangementDescription = _Item.ArrangementDescription;			
             BillNo = _Item.BillNo;			
             CashierID = _Item.CashierID;			
             CheckNumber = _Item.CheckNumber;			
             CurrencyCode = _Item.CurrencyCode;			
             DepositLedgerCredit = _Item.DepositLedgerCredit;			
             DepositLedgerDebit = _Item.DepositLedgerDebit;			
             DisplayYN = _Item.DisplayYN;			
             ExchangeRateExcludingCommission = _Item.ExchangeRateExcludingCommission;			
             ExchangeRateForTransaction = _Item.ExchangeRateForTransaction;			
             FixedChargesYN = _Item.FixedChargesYN;			
             FolioName = _Item.FolioName;			
             FolioWindow = _Item.FolioWindow;			
             FoodTax = _Item.FoodTax;			
             ForeignExchangeCommissionAmount = _Item.ForeignExchangeCommissionAmount;			
             ForeignExchangeCommissionPercent = _Item.ForeignExchangeCommissionPercent;			
             ForeignExchangeType = _Item.ForeignExchangeType;			
             Generates = _Item.Generates;			
             GrossAmount = _Item.GrossAmount;			
             GuestAccountCredit = _Item.GuestAccountCredit;			
             GuestAccountDebit = _Item.GuestAccountDebit;			
             InsertDate = _Item.InsertDate;			
             InsertUser = _Item.InsertUser;			
             InternalYN = _Item.InternalYN;			
             InvoiceClosingDate = _Item.InvoiceClosingDate;			
             InvoiceType = _Item.InvoiceType;			
             MarketCode = _Item.MarketCode;			
             MinibarTax = _Item.MinibarTax;			
             NetAmount = _Item.NetAmount;			
             OtherTax = _Item.OtherTax;			
             PackageAccountCredit = _Item.PackageAccountCredit;			
             PackageAccountDebit = _Item.PackageAccountDebit;			
             ParrallelCurrencyCode = _Item.ParrallelCurrencyCode;			
             Price = _Item.Price;			
             Product = _Item.Product;			
             Property = _Item.Property;			
             QuantityOfProduct = _Item.QuantityOfProduct;			
             RateCode = _Item.RateCode;			
             ReceiptNumber = _Item.ReceiptNumber;			
             Reference = _Item.Reference;			
             Remark = _Item.Remark;			
             RevenueAmount = _Item.RevenueAmount;			
             RoomClass = _Item.RoomClass;			
             RoomNumber = _Item.RoomNumber;			
             RoomTax = _Item.RoomTax;			
             SourceCode = _Item.SourceCode;			
             SummaryReferenceCode = _Item.SummaryReferenceCode;			
             TACommissionable = _Item.TACommissionable;			
             TaxDeferredYN = _Item.TaxDeferredYN;			
             TaxGeneratedYN = _Item.TaxGeneratedYN;			
             TaxInclusiveYN = _Item.TaxInclusiveYN;			
             TransactionAmount = _Item.TransactionAmount;			
             TransactionCode = _Item.TransactionCode;			
             TransactionCodeDescription = _Item.TransactionCodeDescription;			
             TransactionCodeGroup = _Item.TransactionCodeGroup;			
             TransactionCodeSubgroup = _Item.TransactionCodeSubgroup;			
             TransactionDate = _Item.TransactionDate;			
             TransactionGroupType = _Item.TransactionGroupType;			
             TransactionType = _Item.TransactionType;			
             TransferDate = _Item.TransferDate;			
             GrossAmount2 = _Item.GrossAmount2;			
             NetAmount2 = _Item.NetAmount2;			
             UpdateDate = _Item.UpdateDate;			
             UpdateUser = _Item.UpdateUser;			
             mrsbr_financialID = _Item.mrsbr_financialID;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwMRSBRFinancial( this );
        }
    }


    /// <summary>
    /// A class which represents the vwMRSBRFinancial table in the RenAix Database.
    /// </summary>
    public partial class vwMRSBRFinancial : BaseDataObject<DatavwMRSBRFinancial>, IActiveRecord, ICallOnCreated, IvwMRSBRFinancial
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwMRSBRFinancial> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwMRSBRFinancial>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwMRSBRFinancial> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwMRSBRFinancial item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwMRSBRFinancial item=new vwMRSBRFinancial();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwMRSBRFinancial> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwMRSBRFinancial()
        {
            m_Internal = new DatavwMRSBRFinancial();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwMRSBRFinancial( bool _CallOnCreated )
        {
            m_Internal = new DatavwMRSBRFinancial();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwMRSBRFinancial(string connectionString, string providerName) 
        {
            m_Internal = new DatavwMRSBRFinancial();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwMRSBRFinancial( IvwMRSBRFinancial _Item )
        {
            m_Internal = new DatavwMRSBRFinancial();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwMRSBRFinancial( DatavwMRSBRFinancial _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwMRSBRFinancial _Item )
        {
            m_Internal.BusinessDate = _Item.BusinessDate;			
            m_Internal.AdjustmentReasonCode = _Item.AdjustmentReasonCode;			
            m_Internal.AdjustmentYN = _Item.AdjustmentYN;			
            m_Internal.AmountPosted = _Item.AmountPosted;			
            m_Internal.ARCompressedYN = _Item.ARCompressedYN;			
            m_Internal.ARCreditAmount = _Item.ARCreditAmount;			
            m_Internal.ARDebitAmount = _Item.ARDebitAmount;			
            m_Internal.ARInvoiceNumber = _Item.ARInvoiceNumber;			
            m_Internal.ARStatus = _Item.ARStatus;			
            m_Internal.ARTransferDate = _Item.ARTransferDate;			
            m_Internal.ArrangementCode = _Item.ArrangementCode;			
            m_Internal.ArrangementDescription = _Item.ArrangementDescription;			
            m_Internal.BillNo = _Item.BillNo;			
            m_Internal.CashierID = _Item.CashierID;			
            m_Internal.CheckNumber = _Item.CheckNumber;			
            m_Internal.CurrencyCode = _Item.CurrencyCode;			
            m_Internal.DepositLedgerCredit = _Item.DepositLedgerCredit;			
            m_Internal.DepositLedgerDebit = _Item.DepositLedgerDebit;			
            m_Internal.DisplayYN = _Item.DisplayYN;			
            m_Internal.ExchangeRateExcludingCommission = _Item.ExchangeRateExcludingCommission;			
            m_Internal.ExchangeRateForTransaction = _Item.ExchangeRateForTransaction;			
            m_Internal.FixedChargesYN = _Item.FixedChargesYN;			
            m_Internal.FolioName = _Item.FolioName;			
            m_Internal.FolioWindow = _Item.FolioWindow;			
            m_Internal.FoodTax = _Item.FoodTax;			
            m_Internal.ForeignExchangeCommissionAmount = _Item.ForeignExchangeCommissionAmount;			
            m_Internal.ForeignExchangeCommissionPercent = _Item.ForeignExchangeCommissionPercent;			
            m_Internal.ForeignExchangeType = _Item.ForeignExchangeType;			
            m_Internal.Generates = _Item.Generates;			
            m_Internal.GrossAmount = _Item.GrossAmount;			
            m_Internal.GuestAccountCredit = _Item.GuestAccountCredit;			
            m_Internal.GuestAccountDebit = _Item.GuestAccountDebit;			
            m_Internal.InsertDate = _Item.InsertDate;			
            m_Internal.InsertUser = _Item.InsertUser;			
            m_Internal.InternalYN = _Item.InternalYN;			
            m_Internal.InvoiceClosingDate = _Item.InvoiceClosingDate;			
            m_Internal.InvoiceType = _Item.InvoiceType;			
            m_Internal.MarketCode = _Item.MarketCode;			
            m_Internal.MinibarTax = _Item.MinibarTax;			
            m_Internal.NetAmount = _Item.NetAmount;			
            m_Internal.OtherTax = _Item.OtherTax;			
            m_Internal.PackageAccountCredit = _Item.PackageAccountCredit;			
            m_Internal.PackageAccountDebit = _Item.PackageAccountDebit;			
            m_Internal.ParrallelCurrencyCode = _Item.ParrallelCurrencyCode;			
            m_Internal.Price = _Item.Price;			
            m_Internal.Product = _Item.Product;			
            m_Internal.Property = _Item.Property;			
            m_Internal.QuantityOfProduct = _Item.QuantityOfProduct;			
            m_Internal.RateCode = _Item.RateCode;			
            m_Internal.ReceiptNumber = _Item.ReceiptNumber;			
            m_Internal.Reference = _Item.Reference;			
            m_Internal.Remark = _Item.Remark;			
            m_Internal.RevenueAmount = _Item.RevenueAmount;			
            m_Internal.RoomClass = _Item.RoomClass;			
            m_Internal.RoomNumber = _Item.RoomNumber;			
            m_Internal.RoomTax = _Item.RoomTax;			
            m_Internal.SourceCode = _Item.SourceCode;			
            m_Internal.SummaryReferenceCode = _Item.SummaryReferenceCode;			
            m_Internal.TACommissionable = _Item.TACommissionable;			
            m_Internal.TaxDeferredYN = _Item.TaxDeferredYN;			
            m_Internal.TaxGeneratedYN = _Item.TaxGeneratedYN;			
            m_Internal.TaxInclusiveYN = _Item.TaxInclusiveYN;			
            m_Internal.TransactionAmount = _Item.TransactionAmount;			
            m_Internal.TransactionCode = _Item.TransactionCode;			
            m_Internal.TransactionCodeDescription = _Item.TransactionCodeDescription;			
            m_Internal.TransactionCodeGroup = _Item.TransactionCodeGroup;			
            m_Internal.TransactionCodeSubgroup = _Item.TransactionCodeSubgroup;			
            m_Internal.TransactionDate = _Item.TransactionDate;			
            m_Internal.TransactionGroupType = _Item.TransactionGroupType;			
            m_Internal.TransactionType = _Item.TransactionType;			
            m_Internal.TransferDate = _Item.TransferDate;			
            m_Internal.GrossAmount2 = _Item.GrossAmount2;			
            m_Internal.NetAmount2 = _Item.NetAmount2;			
            m_Internal.UpdateDate = _Item.UpdateDate;			
            m_Internal.UpdateUser = _Item.UpdateUser;			
            m_Internal.mrsbr_financialID = _Item.mrsbr_financialID;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwMRSBRFinancial( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwMRSBRFinancial.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwMRSBRFinancial>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwMRSBRFinancial(Expression<Func<vwMRSBRFinancial, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwMRSBRFinancial> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwMRSBRFinancial> _repo;
            
            if(db.TestMode)
            {
                vwMRSBRFinancial.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwMRSBRFinancial>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwMRSBRFinancial> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwMRSBRFinancial SingleOrDefault(Expression<Func<vwMRSBRFinancial, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwMRSBRFinancial SingleOrDefault(Expression<Func<vwMRSBRFinancial, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwMRSBRFinancial> repo = GetRepo(connectionString,providerName);
            vwMRSBRFinancial single = repo.SingleOrDefault<vwMRSBRFinancial>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwMRSBRFinancial, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwMRSBRFinancial, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwMRSBRFinancial GetByID(DateTime value) 
        {
            return vwMRSBRFinancial.Find( L => L.TicketDate.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwMRSBRFinancial> Find(Expression<Func<vwMRSBRFinancial, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwMRSBRFinancial> Find(Expression<Func<vwMRSBRFinancial, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwMRSBRFinancial> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwMRSBRFinancial> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwMRSBRFinancial> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwMRSBRFinancial> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwMRSBRFinancial> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwMRSBRFinancial> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "TicketDate";
        }

        public object KeyValue()
        {
            return this.TicketDate;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.AdjustmentReasonCode )
//			{
//				rc = this.AdjustmentReasonCode.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwMRSBRFinancial)
            {
                vwMRSBRFinancial compare=(vwMRSBRFinancial)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.AdjustmentReasonCode.ToString();
        }

        public string DescriptorColumn() 
        {
            return "AdjustmentReasonCode";
        }

        public static string GetKeyColumn()
        {
            return "TicketDate";
        }        

        public static string GetDescriptorColumn()
        {
            return "AdjustmentReasonCode";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _TicketDate;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime TicketDate
        {
            get { return m_Internal.TicketDate; }
            set
            {
                if(m_Internal.TicketDate!=value){
                    m_Internal.TicketDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _BusinessDate;
        [LocalData]
        public DateTime? BusinessDate
        {
            get { return m_Internal.BusinessDate; }
            set
            {
                if(m_Internal.BusinessDate!=value){
                    m_Internal.BusinessDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BusinessDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _AdjustmentReasonCode;
        [LocalData]
        public string AdjustmentReasonCode
        {
            get { return m_Internal.AdjustmentReasonCode; }
            set
            {
                if(m_Internal.AdjustmentReasonCode!=value){
                    m_Internal.AdjustmentReasonCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdjustmentReasonCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _AdjustmentYN;
        [LocalData]
        public string AdjustmentYN
        {
            get { return m_Internal.AdjustmentYN; }
            set
            {
                if(m_Internal.AdjustmentYN!=value){
                    m_Internal.AdjustmentYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdjustmentYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _AmountPosted;
        [LocalData]
        public decimal? AmountPosted
        {
            get { return m_Internal.AmountPosted; }
            set
            {
                if(m_Internal.AmountPosted!=value){
                    m_Internal.AmountPosted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AmountPosted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ARCompressedYN;
        [LocalData]
        public string ARCompressedYN
        {
            get { return m_Internal.ARCompressedYN; }
            set
            {
                if(m_Internal.ARCompressedYN!=value){
                    m_Internal.ARCompressedYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ARCompressedYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ARCreditAmount;
        [LocalData]
        public string ARCreditAmount
        {
            get { return m_Internal.ARCreditAmount; }
            set
            {
                if(m_Internal.ARCreditAmount!=value){
                    m_Internal.ARCreditAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ARCreditAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ARDebitAmount;
        [LocalData]
        public string ARDebitAmount
        {
            get { return m_Internal.ARDebitAmount; }
            set
            {
                if(m_Internal.ARDebitAmount!=value){
                    m_Internal.ARDebitAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ARDebitAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ARInvoiceNumber;
        [LocalData]
        public string ARInvoiceNumber
        {
            get { return m_Internal.ARInvoiceNumber; }
            set
            {
                if(m_Internal.ARInvoiceNumber!=value){
                    m_Internal.ARInvoiceNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ARInvoiceNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ARStatus;
        [LocalData]
        public string ARStatus
        {
            get { return m_Internal.ARStatus; }
            set
            {
                if(m_Internal.ARStatus!=value){
                    m_Internal.ARStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ARStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ARTransferDate;
        [LocalData]
        public string ARTransferDate
        {
            get { return m_Internal.ARTransferDate; }
            set
            {
                if(m_Internal.ARTransferDate!=value){
                    m_Internal.ARTransferDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ARTransferDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ArrangementCode;
        [LocalData]
        public string ArrangementCode
        {
            get { return m_Internal.ArrangementCode; }
            set
            {
                if(m_Internal.ArrangementCode!=value){
                    m_Internal.ArrangementCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ArrangementCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ArrangementDescription;
        [LocalData]
        public string ArrangementDescription
        {
            get { return m_Internal.ArrangementDescription; }
            set
            {
                if(m_Internal.ArrangementDescription!=value){
                    m_Internal.ArrangementDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ArrangementDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _BillNo;
        [LocalData]
        public string BillNo
        {
            get { return m_Internal.BillNo; }
            set
            {
                if(m_Internal.BillNo!=value){
                    m_Internal.BillNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BillNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _CashierID;
        [LocalData]
        public int? CashierID
        {
            get { return m_Internal.CashierID; }
            set
            {
                if(m_Internal.CashierID!=value){
                    m_Internal.CashierID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CashierID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CheckNumber;
        [LocalData]
        public string CheckNumber
        {
            get { return m_Internal.CheckNumber; }
            set
            {
                if(m_Internal.CheckNumber!=value){
                    m_Internal.CheckNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CurrencyCode;
        [LocalData]
        public string CurrencyCode
        {
            get { return m_Internal.CurrencyCode; }
            set
            {
                if(m_Internal.CurrencyCode!=value){
                    m_Internal.CurrencyCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CurrencyCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DepositLedgerCredit;
        [LocalData]
        public string DepositLedgerCredit
        {
            get { return m_Internal.DepositLedgerCredit; }
            set
            {
                if(m_Internal.DepositLedgerCredit!=value){
                    m_Internal.DepositLedgerCredit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepositLedgerCredit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DepositLedgerDebit;
        [LocalData]
        public string DepositLedgerDebit
        {
            get { return m_Internal.DepositLedgerDebit; }
            set
            {
                if(m_Internal.DepositLedgerDebit!=value){
                    m_Internal.DepositLedgerDebit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepositLedgerDebit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DisplayYN;
        [LocalData]
        public string DisplayYN
        {
            get { return m_Internal.DisplayYN; }
            set
            {
                if(m_Internal.DisplayYN!=value){
                    m_Internal.DisplayYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _ExchangeRateExcludingCommission;
        [LocalData]
        public decimal? ExchangeRateExcludingCommission
        {
            get { return m_Internal.ExchangeRateExcludingCommission; }
            set
            {
                if(m_Internal.ExchangeRateExcludingCommission!=value){
                    m_Internal.ExchangeRateExcludingCommission=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExchangeRateExcludingCommission");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _ExchangeRateForTransaction;
        [LocalData]
        public decimal? ExchangeRateForTransaction
        {
            get { return m_Internal.ExchangeRateForTransaction; }
            set
            {
                if(m_Internal.ExchangeRateForTransaction!=value){
                    m_Internal.ExchangeRateForTransaction=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExchangeRateForTransaction");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _FixedChargesYN;
        [LocalData]
        public string FixedChargesYN
        {
            get { return m_Internal.FixedChargesYN; }
            set
            {
                if(m_Internal.FixedChargesYN!=value){
                    m_Internal.FixedChargesYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FixedChargesYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _FolioName;
        [LocalData]
        public string FolioName
        {
            get { return m_Internal.FolioName; }
            set
            {
                if(m_Internal.FolioName!=value){
                    m_Internal.FolioName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FolioName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _FolioWindow;
        [LocalData]
        public int? FolioWindow
        {
            get { return m_Internal.FolioWindow; }
            set
            {
                if(m_Internal.FolioWindow!=value){
                    m_Internal.FolioWindow=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FolioWindow");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _FoodTax;
        [LocalData]
        public decimal? FoodTax
        {
            get { return m_Internal.FoodTax; }
            set
            {
                if(m_Internal.FoodTax!=value){
                    m_Internal.FoodTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FoodTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ForeignExchangeCommissionAmount;
        [LocalData]
        public string ForeignExchangeCommissionAmount
        {
            get { return m_Internal.ForeignExchangeCommissionAmount; }
            set
            {
                if(m_Internal.ForeignExchangeCommissionAmount!=value){
                    m_Internal.ForeignExchangeCommissionAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ForeignExchangeCommissionAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ForeignExchangeCommissionPercent;
        [LocalData]
        public string ForeignExchangeCommissionPercent
        {
            get { return m_Internal.ForeignExchangeCommissionPercent; }
            set
            {
                if(m_Internal.ForeignExchangeCommissionPercent!=value){
                    m_Internal.ForeignExchangeCommissionPercent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ForeignExchangeCommissionPercent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ForeignExchangeType;
        [LocalData]
        public string ForeignExchangeType
        {
            get { return m_Internal.ForeignExchangeType; }
            set
            {
                if(m_Internal.ForeignExchangeType!=value){
                    m_Internal.ForeignExchangeType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ForeignExchangeType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Generates;
        [LocalData]
        public string Generates
        {
            get { return m_Internal.Generates; }
            set
            {
                if(m_Internal.Generates!=value){
                    m_Internal.Generates=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Generates");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _GrossAmount;
        [LocalData]
        public decimal? GrossAmount
        {
            get { return m_Internal.GrossAmount; }
            set
            {
                if(m_Internal.GrossAmount!=value){
                    m_Internal.GrossAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GrossAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _GuestAccountCredit;
        [LocalData]
        public string GuestAccountCredit
        {
            get { return m_Internal.GuestAccountCredit; }
            set
            {
                if(m_Internal.GuestAccountCredit!=value){
                    m_Internal.GuestAccountCredit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestAccountCredit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _GuestAccountDebit;
        [LocalData]
        public decimal? GuestAccountDebit
        {
            get { return m_Internal.GuestAccountDebit; }
            set
            {
                if(m_Internal.GuestAccountDebit!=value){
                    m_Internal.GuestAccountDebit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestAccountDebit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _InsertDate;
        [LocalData]
        public DateTime? InsertDate
        {
            get { return m_Internal.InsertDate; }
            set
            {
                if(m_Internal.InsertDate!=value){
                    m_Internal.InsertDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InsertDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _InsertUser;
        [LocalData]
        public string InsertUser
        {
            get { return m_Internal.InsertUser; }
            set
            {
                if(m_Internal.InsertUser!=value){
                    m_Internal.InsertUser=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InsertUser");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _InternalYN;
        [LocalData]
        public string InternalYN
        {
            get { return m_Internal.InternalYN; }
            set
            {
                if(m_Internal.InternalYN!=value){
                    m_Internal.InternalYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InternalYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _InvoiceClosingDate;
        [LocalData]
        public string InvoiceClosingDate
        {
            get { return m_Internal.InvoiceClosingDate; }
            set
            {
                if(m_Internal.InvoiceClosingDate!=value){
                    m_Internal.InvoiceClosingDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InvoiceClosingDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _InvoiceType;
        [LocalData]
        public string InvoiceType
        {
            get { return m_Internal.InvoiceType; }
            set
            {
                if(m_Internal.InvoiceType!=value){
                    m_Internal.InvoiceType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InvoiceType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MarketCode;
        [LocalData]
        public string MarketCode
        {
            get { return m_Internal.MarketCode; }
            set
            {
                if(m_Internal.MarketCode!=value){
                    m_Internal.MarketCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MarketCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _MinibarTax;
        [LocalData]
        public decimal? MinibarTax
        {
            get { return m_Internal.MinibarTax; }
            set
            {
                if(m_Internal.MinibarTax!=value){
                    m_Internal.MinibarTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinibarTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _NetAmount;
        [LocalData]
        public decimal? NetAmount
        {
            get { return m_Internal.NetAmount; }
            set
            {
                if(m_Internal.NetAmount!=value){
                    m_Internal.NetAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NetAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _OtherTax;
        [LocalData]
        public decimal? OtherTax
        {
            get { return m_Internal.OtherTax; }
            set
            {
                if(m_Internal.OtherTax!=value){
                    m_Internal.OtherTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OtherTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PackageAccountCredit;
        [LocalData]
        public string PackageAccountCredit
        {
            get { return m_Internal.PackageAccountCredit; }
            set
            {
                if(m_Internal.PackageAccountCredit!=value){
                    m_Internal.PackageAccountCredit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PackageAccountCredit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PackageAccountDebit;
        [LocalData]
        public string PackageAccountDebit
        {
            get { return m_Internal.PackageAccountDebit; }
            set
            {
                if(m_Internal.PackageAccountDebit!=value){
                    m_Internal.PackageAccountDebit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PackageAccountDebit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ParrallelCurrencyCode;
        [LocalData]
        public string ParrallelCurrencyCode
        {
            get { return m_Internal.ParrallelCurrencyCode; }
            set
            {
                if(m_Internal.ParrallelCurrencyCode!=value){
                    m_Internal.ParrallelCurrencyCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParrallelCurrencyCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Price;
        [LocalData]
        public decimal? Price
        {
            get { return m_Internal.Price; }
            set
            {
                if(m_Internal.Price!=value){
                    m_Internal.Price=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Product;
        [LocalData]
        public string Product
        {
            get { return m_Internal.Product; }
            set
            {
                if(m_Internal.Product!=value){
                    m_Internal.Product=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Product");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Property;
        [LocalData]
        public string Property
        {
            get { return m_Internal.Property; }
            set
            {
                if(m_Internal.Property!=value){
                    m_Internal.Property=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Property");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _QuantityOfProduct;
        [LocalData]
        public int? QuantityOfProduct
        {
            get { return m_Internal.QuantityOfProduct; }
            set
            {
                if(m_Internal.QuantityOfProduct!=value){
                    m_Internal.QuantityOfProduct=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QuantityOfProduct");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RateCode;
        [LocalData]
        public string RateCode
        {
            get { return m_Internal.RateCode; }
            set
            {
                if(m_Internal.RateCode!=value){
                    m_Internal.RateCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RateCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ReceiptNumber;
        [LocalData]
        public string ReceiptNumber
        {
            get { return m_Internal.ReceiptNumber; }
            set
            {
                if(m_Internal.ReceiptNumber!=value){
                    m_Internal.ReceiptNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReceiptNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Reference;
        [LocalData]
        public string Reference
        {
            get { return m_Internal.Reference; }
            set
            {
                if(m_Internal.Reference!=value){
                    m_Internal.Reference=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Reference");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Remark;
        [LocalData]
        public string Remark
        {
            get { return m_Internal.Remark; }
            set
            {
                if(m_Internal.Remark!=value){
                    m_Internal.Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _RevenueAmount;
        [LocalData]
        public decimal? RevenueAmount
        {
            get { return m_Internal.RevenueAmount; }
            set
            {
                if(m_Internal.RevenueAmount!=value){
                    m_Internal.RevenueAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RevenueAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RoomClass;
        [LocalData]
        public string RoomClass
        {
            get { return m_Internal.RoomClass; }
            set
            {
                if(m_Internal.RoomClass!=value){
                    m_Internal.RoomClass=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoomClass");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _RoomNumber;
        [LocalData]
        public int? RoomNumber
        {
            get { return m_Internal.RoomNumber; }
            set
            {
                if(m_Internal.RoomNumber!=value){
                    m_Internal.RoomNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoomNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _RoomTax;
        [LocalData]
        public decimal? RoomTax
        {
            get { return m_Internal.RoomTax; }
            set
            {
                if(m_Internal.RoomTax!=value){
                    m_Internal.RoomTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoomTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SourceCode;
        [LocalData]
        public string SourceCode
        {
            get { return m_Internal.SourceCode; }
            set
            {
                if(m_Internal.SourceCode!=value){
                    m_Internal.SourceCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SourceCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SummaryReferenceCode;
        [LocalData]
        public string SummaryReferenceCode
        {
            get { return m_Internal.SummaryReferenceCode; }
            set
            {
                if(m_Internal.SummaryReferenceCode!=value){
                    m_Internal.SummaryReferenceCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SummaryReferenceCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TACommissionable;
        [LocalData]
        public string TACommissionable
        {
            get { return m_Internal.TACommissionable; }
            set
            {
                if(m_Internal.TACommissionable!=value){
                    m_Internal.TACommissionable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TACommissionable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TaxDeferredYN;
        [LocalData]
        public string TaxDeferredYN
        {
            get { return m_Internal.TaxDeferredYN; }
            set
            {
                if(m_Internal.TaxDeferredYN!=value){
                    m_Internal.TaxDeferredYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TaxDeferredYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TaxGeneratedYN;
        [LocalData]
        public string TaxGeneratedYN
        {
            get { return m_Internal.TaxGeneratedYN; }
            set
            {
                if(m_Internal.TaxGeneratedYN!=value){
                    m_Internal.TaxGeneratedYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TaxGeneratedYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TaxInclusiveYN;
        [LocalData]
        public string TaxInclusiveYN
        {
            get { return m_Internal.TaxInclusiveYN; }
            set
            {
                if(m_Internal.TaxInclusiveYN!=value){
                    m_Internal.TaxInclusiveYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TaxInclusiveYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TransactionAmount;
        [LocalData]
        public decimal? TransactionAmount
        {
            get { return m_Internal.TransactionAmount; }
            set
            {
                if(m_Internal.TransactionAmount!=value){
                    m_Internal.TransactionAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TransactionCode;
        [LocalData]
        public string TransactionCode
        {
            get { return m_Internal.TransactionCode; }
            set
            {
                if(m_Internal.TransactionCode!=value){
                    m_Internal.TransactionCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TransactionCodeDescription;
        [LocalData]
        public string TransactionCodeDescription
        {
            get { return m_Internal.TransactionCodeDescription; }
            set
            {
                if(m_Internal.TransactionCodeDescription!=value){
                    m_Internal.TransactionCodeDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionCodeDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TransactionCodeGroup;
        [LocalData]
        public string TransactionCodeGroup
        {
            get { return m_Internal.TransactionCodeGroup; }
            set
            {
                if(m_Internal.TransactionCodeGroup!=value){
                    m_Internal.TransactionCodeGroup=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionCodeGroup");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TransactionCodeSubgroup;
        [LocalData]
        public string TransactionCodeSubgroup
        {
            get { return m_Internal.TransactionCodeSubgroup; }
            set
            {
                if(m_Internal.TransactionCodeSubgroup!=value){
                    m_Internal.TransactionCodeSubgroup=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionCodeSubgroup");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _TransactionDate;
        [LocalData]
        public DateTime? TransactionDate
        {
            get { return m_Internal.TransactionDate; }
            set
            {
                if(m_Internal.TransactionDate!=value){
                    m_Internal.TransactionDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TransactionGroupType;
        [LocalData]
        public string TransactionGroupType
        {
            get { return m_Internal.TransactionGroupType; }
            set
            {
                if(m_Internal.TransactionGroupType!=value){
                    m_Internal.TransactionGroupType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionGroupType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TransactionType;
        [LocalData]
        public string TransactionType
        {
            get { return m_Internal.TransactionType; }
            set
            {
                if(m_Internal.TransactionType!=value){
                    m_Internal.TransactionType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TransferDate;
        [LocalData]
        public string TransferDate
        {
            get { return m_Internal.TransferDate; }
            set
            {
                if(m_Internal.TransferDate!=value){
                    m_Internal.TransferDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransferDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _GrossAmount2;
        [LocalData]
        public decimal? GrossAmount2
        {
            get { return m_Internal.GrossAmount2; }
            set
            {
                if(m_Internal.GrossAmount2!=value){
                    m_Internal.GrossAmount2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GrossAmount2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _NetAmount2;
        [LocalData]
        public decimal? NetAmount2
        {
            get { return m_Internal.NetAmount2; }
            set
            {
                if(m_Internal.NetAmount2!=value){
                    m_Internal.NetAmount2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NetAmount2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _UpdateDate;
        [LocalData]
        public DateTime? UpdateDate
        {
            get { return m_Internal.UpdateDate; }
            set
            {
                if(m_Internal.UpdateDate!=value){
                    m_Internal.UpdateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _UpdateUser;
        [LocalData]
        public string UpdateUser
        {
            get { return m_Internal.UpdateUser; }
            set
            {
                if(m_Internal.UpdateUser!=value){
                    m_Internal.UpdateUser=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateUser");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _mrsbr_financialID;
        [LocalData]
        public Guid mrsbr_financialID
        {
            get { return m_Internal.mrsbr_financialID; }
            set
            {
                if(m_Internal.mrsbr_financialID!=value){
                    m_Internal.mrsbr_financialID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mrsbr_financialID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwMRSBRFinancial, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwOperaMicrosCheck : IWCFDataElement
    {
        
        DateTime BusinessDate { get; set; }
        
        string MicrosCheckNumber { get; set; }
        
        decimal? CheckAmount { get; set; }
        
        int? EstablishmentNumber { get; set; }

        void Copy( IvwOperaMicrosCheck _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwOperaMicrosCheck : IvwOperaMicrosCheck
    {
        [DataMember]
        public DateTime BusinessDate { get; set; }
        [DataMember]
        public string MicrosCheckNumber { get; set; }
        [DataMember]
        public decimal? CheckAmount { get; set; }
        [DataMember]
        public int? EstablishmentNumber { get; set; }

        public void Copy( IvwOperaMicrosCheck _Item )
        {
             MicrosCheckNumber = _Item.MicrosCheckNumber;			
             CheckAmount = _Item.CheckAmount;			
             EstablishmentNumber = _Item.EstablishmentNumber;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwOperaMicrosCheck( this );
        }
    }


    /// <summary>
    /// A class which represents the vwOperaMicrosChecks table in the RenAix Database.
    /// </summary>
    public partial class vwOperaMicrosCheck : BaseDataObject<DatavwOperaMicrosCheck>, IActiveRecord, ICallOnCreated, IvwOperaMicrosCheck
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwOperaMicrosCheck> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwOperaMicrosCheck>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwOperaMicrosCheck> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwOperaMicrosCheck item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwOperaMicrosCheck item=new vwOperaMicrosCheck();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwOperaMicrosCheck> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwOperaMicrosCheck()
        {
            m_Internal = new DatavwOperaMicrosCheck();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwOperaMicrosCheck( bool _CallOnCreated )
        {
            m_Internal = new DatavwOperaMicrosCheck();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwOperaMicrosCheck(string connectionString, string providerName) 
        {
            m_Internal = new DatavwOperaMicrosCheck();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwOperaMicrosCheck( IvwOperaMicrosCheck _Item )
        {
            m_Internal = new DatavwOperaMicrosCheck();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwOperaMicrosCheck( DatavwOperaMicrosCheck _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwOperaMicrosCheck _Item )
        {
            m_Internal.MicrosCheckNumber = _Item.MicrosCheckNumber;			
            m_Internal.CheckAmount = _Item.CheckAmount;			
            m_Internal.EstablishmentNumber = _Item.EstablishmentNumber;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwOperaMicrosCheck( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwOperaMicrosCheck.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwOperaMicrosCheck>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwOperaMicrosCheck(Expression<Func<vwOperaMicrosCheck, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwOperaMicrosCheck> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwOperaMicrosCheck> _repo;
            
            if(db.TestMode)
            {
                vwOperaMicrosCheck.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwOperaMicrosCheck>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwOperaMicrosCheck> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwOperaMicrosCheck SingleOrDefault(Expression<Func<vwOperaMicrosCheck, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwOperaMicrosCheck SingleOrDefault(Expression<Func<vwOperaMicrosCheck, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwOperaMicrosCheck> repo = GetRepo(connectionString,providerName);
            vwOperaMicrosCheck single = repo.SingleOrDefault<vwOperaMicrosCheck>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwOperaMicrosCheck, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwOperaMicrosCheck, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwOperaMicrosCheck GetByID(DateTime value) 
        {
            return vwOperaMicrosCheck.Find( L => L.BusinessDate.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwOperaMicrosCheck> Find(Expression<Func<vwOperaMicrosCheck, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwOperaMicrosCheck> Find(Expression<Func<vwOperaMicrosCheck, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwOperaMicrosCheck> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwOperaMicrosCheck> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwOperaMicrosCheck> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwOperaMicrosCheck> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwOperaMicrosCheck> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwOperaMicrosCheck> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "BusinessDate";
        }

        public object KeyValue()
        {
            return this.BusinessDate;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.MicrosCheckNumber )
//			{
//				rc = this.MicrosCheckNumber.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwOperaMicrosCheck)
            {
                vwOperaMicrosCheck compare=(vwOperaMicrosCheck)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.MicrosCheckNumber.ToString();
        }

        public string DescriptorColumn() 
        {
            return "MicrosCheckNumber";
        }

        public static string GetKeyColumn()
        {
            return "BusinessDate";
        }        

        public static string GetDescriptorColumn()
        {
            return "MicrosCheckNumber";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _BusinessDate;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime BusinessDate
        {
            get { return m_Internal.BusinessDate; }
            set
            {
                if(m_Internal.BusinessDate!=value){
                    m_Internal.BusinessDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BusinessDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MicrosCheckNumber;
        [LocalData]
        public string MicrosCheckNumber
        {
            get { return m_Internal.MicrosCheckNumber; }
            set
            {
                if(m_Internal.MicrosCheckNumber!=value){
                    m_Internal.MicrosCheckNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MicrosCheckNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _CheckAmount;
        [LocalData]
        public decimal? CheckAmount
        {
            get { return m_Internal.CheckAmount; }
            set
            {
                if(m_Internal.CheckAmount!=value){
                    m_Internal.CheckAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EstablishmentNumber;
        [LocalData]
        public int? EstablishmentNumber
        {
            get { return m_Internal.EstablishmentNumber; }
            set
            {
                if(m_Internal.EstablishmentNumber!=value){
                    m_Internal.EstablishmentNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EstablishmentNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwOperaMicrosCheck, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwPOSTicketItem : IWCFDataElement
    {
        
        Guid POSTicketID { get; set; }
        
        string CheckNumber { get; set; }
        
        int? GuestCountModified { get; set; }
        
        DateTime? TicketDate { get; set; }
        
        string Establishment { get; set; }
        
        string ServerName { get; set; }
        
        string Description { get; set; }
        
        string Comment { get; set; }
        
        decimal? Price { get; set; }
        
        int? Dtl_Typ_Cnt { get; set; }
        
        int RecordType { get; set; }

        void Copy( IvwPOSTicketItem _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwPOSTicketItem : IvwPOSTicketItem
    {
        [DataMember]
        public Guid POSTicketID { get; set; }
        [DataMember]
        public string CheckNumber { get; set; }
        [DataMember]
        public int? GuestCountModified { get; set; }
        [DataMember]
        public DateTime? TicketDate { get; set; }
        [DataMember]
        public string Establishment { get; set; }
        [DataMember]
        public string ServerName { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public string Comment { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public int? Dtl_Typ_Cnt { get; set; }
        [DataMember]
        public int RecordType { get; set; }

        public void Copy( IvwPOSTicketItem _Item )
        {
             CheckNumber = _Item.CheckNumber;			
             GuestCountModified = _Item.GuestCountModified;			
             TicketDate = _Item.TicketDate;			
             Establishment = _Item.Establishment;			
             ServerName = _Item.ServerName;			
             Description = _Item.Description;			
             Comment = _Item.Comment;			
             Price = _Item.Price;			
             Dtl_Typ_Cnt = _Item.Dtl_Typ_Cnt;			
             RecordType = _Item.RecordType;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPOSTicketItem( this );
        }
    }


    /// <summary>
    /// A class which represents the vwPOSTicketItems table in the RenAix Database.
    /// </summary>
    public partial class vwPOSTicketItem : BaseDataObject<DatavwPOSTicketItem>, IActiveRecord, ICallOnCreated, IvwPOSTicketItem
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwPOSTicketItem> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwPOSTicketItem>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwPOSTicketItem> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwPOSTicketItem item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwPOSTicketItem item=new vwPOSTicketItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwPOSTicketItem> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwPOSTicketItem()
        {
            m_Internal = new DatavwPOSTicketItem();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.POSTicketID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwPOSTicketItem( bool _CallOnCreated )
        {
            m_Internal = new DatavwPOSTicketItem();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwPOSTicketItem(string connectionString, string providerName) 
        {
            m_Internal = new DatavwPOSTicketItem();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.POSTicketID = Guid.NewGuid( );     
        }

        public vwPOSTicketItem( IvwPOSTicketItem _Item )
        {
            m_Internal = new DatavwPOSTicketItem();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwPOSTicketItem( DatavwPOSTicketItem _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwPOSTicketItem _Item )
        {
            m_Internal.CheckNumber = _Item.CheckNumber;			
            m_Internal.GuestCountModified = _Item.GuestCountModified;			
            m_Internal.TicketDate = _Item.TicketDate;			
            m_Internal.Establishment = _Item.Establishment;			
            m_Internal.ServerName = _Item.ServerName;			
            m_Internal.Description = _Item.Description;			
            m_Internal.Comment = _Item.Comment;			
            m_Internal.Price = _Item.Price;			
            m_Internal.Dtl_Typ_Cnt = _Item.Dtl_Typ_Cnt;			
            m_Internal.RecordType = _Item.RecordType;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPOSTicketItem( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.POSTicketID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwPOSTicketItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPOSTicketItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwPOSTicketItem(Expression<Func<vwPOSTicketItem, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwPOSTicketItem> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwPOSTicketItem> _repo;
            
            if(db.TestMode)
            {
                vwPOSTicketItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPOSTicketItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwPOSTicketItem> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwPOSTicketItem SingleOrDefault(Expression<Func<vwPOSTicketItem, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwPOSTicketItem SingleOrDefault(Expression<Func<vwPOSTicketItem, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwPOSTicketItem> repo = GetRepo(connectionString,providerName);
            vwPOSTicketItem single = repo.SingleOrDefault<vwPOSTicketItem>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwPOSTicketItem, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwPOSTicketItem, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyvwPOSTicketItemLoaded = false;
        protected static vwPOSTicketItem EmptyvwPOSTicketItemMember = null;

        public static vwPOSTicketItem GetByID(Guid? value) 
        {
            vwPOSTicketItem rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static vwPOSTicketItem GetByID(Guid value) 
        {
            vwPOSTicketItem rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyvwPOSTicketItemLoaded )
                    {
                        rc = EmptyvwPOSTicketItemMember;
                    }
                    else
                    {
                        IsEmptyvwPOSTicketItemLoaded = true;
                        rc = vwPOSTicketItem.Find( L => L.POSTicketID.Equals( value ) ).FirstOrDefault( );
                        EmptyvwPOSTicketItemMember = rc;
                    }
                }
                else
                {
                    rc = vwPOSTicketItem.Find( L => L.POSTicketID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<vwPOSTicketItem> Find(Expression<Func<vwPOSTicketItem, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwPOSTicketItem> Find(Expression<Func<vwPOSTicketItem, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwPOSTicketItem> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwPOSTicketItem> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwPOSTicketItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwPOSTicketItem> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwPOSTicketItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwPOSTicketItem> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "POSTicketID";
        }

        public object KeyValue()
        {
            return this.POSTicketID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.CheckNumber )
//			{
//				rc = this.CheckNumber.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwPOSTicketItem)
            {
                vwPOSTicketItem compare=(vwPOSTicketItem)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.POSTicketID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.CheckNumber.ToString();
        }

        public string DescriptorColumn() 
        {
            return "CheckNumber";
        }

        public static string GetKeyColumn()
        {
            return "POSTicketID";
        }        

        public static string GetDescriptorColumn()
        {
            return "CheckNumber";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.POSTicketID;
            }
            set
            {
                m_Internal.POSTicketID = value;
            }
        }


//        Guid _POSTicketID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid POSTicketID
        {
            get { return m_Internal.POSTicketID; }
            set
            {
                if(m_Internal.POSTicketID!=value){
                    m_Internal.POSTicketID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CheckNumber;
        [LocalData]
        public string CheckNumber
        {
            get { return m_Internal.CheckNumber; }
            set
            {
                if(m_Internal.CheckNumber!=value){
                    m_Internal.CheckNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _GuestCountModified;
        [LocalData]
        public int? GuestCountModified
        {
            get { return m_Internal.GuestCountModified; }
            set
            {
                if(m_Internal.GuestCountModified!=value){
                    m_Internal.GuestCountModified=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestCountModified");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _TicketDate;
        [LocalData]
        public DateTime? TicketDate
        {
            get { return m_Internal.TicketDate; }
            set
            {
                if(m_Internal.TicketDate!=value){
                    m_Internal.TicketDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Establishment;
        [LocalData]
        public string Establishment
        {
            get { return m_Internal.Establishment; }
            set
            {
                if(m_Internal.Establishment!=value){
                    m_Internal.Establishment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Establishment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ServerName;
        [LocalData]
        public string ServerName
        {
            get { return m_Internal.ServerName; }
            set
            {
                if(m_Internal.ServerName!=value){
                    m_Internal.ServerName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServerName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Description;
        [LocalData]
        public string Description
        {
            get { return m_Internal.Description; }
            set
            {
                if(m_Internal.Description!=value){
                    m_Internal.Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Comment;
        [LocalData]
        public string Comment
        {
            get { return m_Internal.Comment; }
            set
            {
                if(m_Internal.Comment!=value){
                    m_Internal.Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Price;
        [LocalData]
        public decimal? Price
        {
            get { return m_Internal.Price; }
            set
            {
                if(m_Internal.Price!=value){
                    m_Internal.Price=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Typ_Cnt;
        [LocalData]
        public int? Dtl_Typ_Cnt
        {
            get { return m_Internal.Dtl_Typ_Cnt; }
            set
            {
                if(m_Internal.Dtl_Typ_Cnt!=value){
                    m_Internal.Dtl_Typ_Cnt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Typ_Cnt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _RecordType;
        [LocalData]
        public int RecordType
        {
            get { return m_Internal.RecordType; }
            set
            {
                if(m_Internal.RecordType!=value){
                    m_Internal.RecordType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecordType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwPOSTicketItem, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwPOSTicket : IWCFDataElement
    {
        
        string Establishment { get; set; }
        
        string CheckNumber { get; set; }
        
        DateTime? TicketDate { get; set; }
        
        int? Server { get; set; }
        
        string ServerName { get; set; }
        
        int? GuestCount { get; set; }
        
        string CustomerTable { get; set; }
        
        string RawData { get; set; }
        
        int TouchCount { get; set; }
        
        decimal? TipAmount { get; set; }
        
        int? GuestCountModified { get; set; }
        
        decimal? TicketTotal { get; set; }
        
        decimal? PaymentTotal { get; set; }
        
        string EstablishmentModified { get; set; }
        
        Guid POSTicketID { get; set; }
        
        int? EntreeCount { get; set; }
        
        int? PlatCount { get; set; }
        
        int? DessertCount { get; set; }
        
        int RecordType { get; set; }
        
        long TransactionType { get; set; }
        
        decimal? DiscountTotal { get; set; }
        
        string TicketPeriod { get; set; }
        
        int? EstablishmentNumber { get; set; }
        
        DateTime? BusinessDate { get; set; }

        void Copy( IvwPOSTicket _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwPOSTicket : IvwPOSTicket
    {
        [DataMember]
        public string Establishment { get; set; }
        [DataMember]
        public string CheckNumber { get; set; }
        [DataMember]
        public DateTime? TicketDate { get; set; }
        [DataMember]
        public int? Server { get; set; }
        [DataMember]
        public string ServerName { get; set; }
        [DataMember]
        public int? GuestCount { get; set; }
        [DataMember]
        public string CustomerTable { get; set; }
        [DataMember]
        public string RawData { get; set; }
        [DataMember]
        public int TouchCount { get; set; }
        [DataMember]
        public decimal? TipAmount { get; set; }
        [DataMember]
        public int? GuestCountModified { get; set; }
        [DataMember]
        public decimal? TicketTotal { get; set; }
        [DataMember]
        public decimal? PaymentTotal { get; set; }
        [DataMember]
        public string EstablishmentModified { get; set; }
        [DataMember]
        public Guid POSTicketID { get; set; }
        [DataMember]
        public int? EntreeCount { get; set; }
        [DataMember]
        public int? PlatCount { get; set; }
        [DataMember]
        public int? DessertCount { get; set; }
        [DataMember]
        public int RecordType { get; set; }
        [DataMember]
        public long TransactionType { get; set; }
        [DataMember]
        public decimal? DiscountTotal { get; set; }
        [DataMember]
        public string TicketPeriod { get; set; }
        [DataMember]
        public int? EstablishmentNumber { get; set; }
        [DataMember]
        public DateTime? BusinessDate { get; set; }

        public void Copy( IvwPOSTicket _Item )
        {
             CheckNumber = _Item.CheckNumber;			
             TicketDate = _Item.TicketDate;			
             Server = _Item.Server;			
             ServerName = _Item.ServerName;			
             GuestCount = _Item.GuestCount;			
             CustomerTable = _Item.CustomerTable;			
             RawData = _Item.RawData;			
             TouchCount = _Item.TouchCount;			
             TipAmount = _Item.TipAmount;			
             GuestCountModified = _Item.GuestCountModified;			
             TicketTotal = _Item.TicketTotal;			
             PaymentTotal = _Item.PaymentTotal;			
             EstablishmentModified = _Item.EstablishmentModified;			
             POSTicketID = _Item.POSTicketID;			
             EntreeCount = _Item.EntreeCount;			
             PlatCount = _Item.PlatCount;			
             DessertCount = _Item.DessertCount;			
             RecordType = _Item.RecordType;			
             TransactionType = _Item.TransactionType;			
             DiscountTotal = _Item.DiscountTotal;			
             TicketPeriod = _Item.TicketPeriod;			
             EstablishmentNumber = _Item.EstablishmentNumber;			
             BusinessDate = _Item.BusinessDate;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPOSTicket( this );
        }
    }


    /// <summary>
    /// A class which represents the vwPOSTickets table in the RenAix Database.
    /// </summary>
    public partial class vwPOSTicket : BaseDataObject<DatavwPOSTicket>, IActiveRecord, ICallOnCreated, IvwPOSTicket
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwPOSTicket> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwPOSTicket>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwPOSTicket> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwPOSTicket item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwPOSTicket item=new vwPOSTicket();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwPOSTicket> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwPOSTicket()
        {
            m_Internal = new DatavwPOSTicket();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwPOSTicket( bool _CallOnCreated )
        {
            m_Internal = new DatavwPOSTicket();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwPOSTicket(string connectionString, string providerName) 
        {
            m_Internal = new DatavwPOSTicket();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwPOSTicket( IvwPOSTicket _Item )
        {
            m_Internal = new DatavwPOSTicket();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwPOSTicket( DatavwPOSTicket _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwPOSTicket _Item )
        {
            m_Internal.CheckNumber = _Item.CheckNumber;			
            m_Internal.TicketDate = _Item.TicketDate;			
            m_Internal.Server = _Item.Server;			
            m_Internal.ServerName = _Item.ServerName;			
            m_Internal.GuestCount = _Item.GuestCount;			
            m_Internal.CustomerTable = _Item.CustomerTable;			
            m_Internal.RawData = _Item.RawData;			
            m_Internal.TouchCount = _Item.TouchCount;			
            m_Internal.TipAmount = _Item.TipAmount;			
            m_Internal.GuestCountModified = _Item.GuestCountModified;			
            m_Internal.TicketTotal = _Item.TicketTotal;			
            m_Internal.PaymentTotal = _Item.PaymentTotal;			
            m_Internal.EstablishmentModified = _Item.EstablishmentModified;			
            m_Internal.POSTicketID = _Item.POSTicketID;			
            m_Internal.EntreeCount = _Item.EntreeCount;			
            m_Internal.PlatCount = _Item.PlatCount;			
            m_Internal.DessertCount = _Item.DessertCount;			
            m_Internal.RecordType = _Item.RecordType;			
            m_Internal.TransactionType = _Item.TransactionType;			
            m_Internal.DiscountTotal = _Item.DiscountTotal;			
            m_Internal.TicketPeriod = _Item.TicketPeriod;			
            m_Internal.EstablishmentNumber = _Item.EstablishmentNumber;			
            m_Internal.BusinessDate = _Item.BusinessDate;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPOSTicket( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwPOSTicket.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPOSTicket>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwPOSTicket(Expression<Func<vwPOSTicket, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwPOSTicket> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwPOSTicket> _repo;
            
            if(db.TestMode)
            {
                vwPOSTicket.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPOSTicket>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwPOSTicket> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwPOSTicket SingleOrDefault(Expression<Func<vwPOSTicket, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwPOSTicket SingleOrDefault(Expression<Func<vwPOSTicket, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwPOSTicket> repo = GetRepo(connectionString,providerName);
            vwPOSTicket single = repo.SingleOrDefault<vwPOSTicket>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwPOSTicket, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwPOSTicket, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwPOSTicket GetByID(string value) 
        {
            return vwPOSTicket.Find( L => L.Establishment.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwPOSTicket> Find(Expression<Func<vwPOSTicket, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwPOSTicket> Find(Expression<Func<vwPOSTicket, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwPOSTicket> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwPOSTicket> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwPOSTicket> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwPOSTicket> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwPOSTicket> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwPOSTicket> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Establishment";
        }

        public object KeyValue()
        {
            return this.Establishment;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Establishment )
//			{
//				rc = this.Establishment.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwPOSTicket)
            {
                vwPOSTicket compare=(vwPOSTicket)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Establishment.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Establishment";
        }

        public static string GetKeyColumn()
        {
            return "Establishment";
        }        

        public static string GetDescriptorColumn()
        {
            return "Establishment";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _Establishment;
        [SubSonicPrimaryKey]
        [LocalData]
        public string Establishment
        {
            get { return m_Internal.Establishment; }
            set
            {
                if(m_Internal.Establishment!=value){
                    m_Internal.Establishment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Establishment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CheckNumber;
        [LocalData]
        public string CheckNumber
        {
            get { return m_Internal.CheckNumber; }
            set
            {
                if(m_Internal.CheckNumber!=value){
                    m_Internal.CheckNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _TicketDate;
        [LocalData]
        public DateTime? TicketDate
        {
            get { return m_Internal.TicketDate; }
            set
            {
                if(m_Internal.TicketDate!=value){
                    m_Internal.TicketDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Server;
        [LocalData]
        public int? Server
        {
            get { return m_Internal.Server; }
            set
            {
                if(m_Internal.Server!=value){
                    m_Internal.Server=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Server");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ServerName;
        [LocalData]
        public string ServerName
        {
            get { return m_Internal.ServerName; }
            set
            {
                if(m_Internal.ServerName!=value){
                    m_Internal.ServerName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServerName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _GuestCount;
        [LocalData]
        public int? GuestCount
        {
            get { return m_Internal.GuestCount; }
            set
            {
                if(m_Internal.GuestCount!=value){
                    m_Internal.GuestCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CustomerTable;
        [LocalData]
        public string CustomerTable
        {
            get { return m_Internal.CustomerTable; }
            set
            {
                if(m_Internal.CustomerTable!=value){
                    m_Internal.CustomerTable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerTable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RawData;
        [LocalData]
        public string RawData
        {
            get { return m_Internal.RawData; }
            set
            {
                if(m_Internal.RawData!=value){
                    m_Internal.RawData=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RawData");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _TouchCount;
        [LocalData]
        public int TouchCount
        {
            get { return m_Internal.TouchCount; }
            set
            {
                if(m_Internal.TouchCount!=value){
                    m_Internal.TouchCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TouchCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TipAmount;
        [LocalData]
        public decimal? TipAmount
        {
            get { return m_Internal.TipAmount; }
            set
            {
                if(m_Internal.TipAmount!=value){
                    m_Internal.TipAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TipAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _GuestCountModified;
        [LocalData]
        public int? GuestCountModified
        {
            get { return m_Internal.GuestCountModified; }
            set
            {
                if(m_Internal.GuestCountModified!=value){
                    m_Internal.GuestCountModified=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestCountModified");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TicketTotal;
        [LocalData]
        public decimal? TicketTotal
        {
            get { return m_Internal.TicketTotal; }
            set
            {
                if(m_Internal.TicketTotal!=value){
                    m_Internal.TicketTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _PaymentTotal;
        [LocalData]
        public decimal? PaymentTotal
        {
            get { return m_Internal.PaymentTotal; }
            set
            {
                if(m_Internal.PaymentTotal!=value){
                    m_Internal.PaymentTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaymentTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EstablishmentModified;
        [LocalData]
        public string EstablishmentModified
        {
            get { return m_Internal.EstablishmentModified; }
            set
            {
                if(m_Internal.EstablishmentModified!=value){
                    m_Internal.EstablishmentModified=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EstablishmentModified");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _POSTicketID;
        [LocalData]
        public Guid POSTicketID
        {
            get { return m_Internal.POSTicketID; }
            set
            {
                if(m_Internal.POSTicketID!=value){
                    m_Internal.POSTicketID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EntreeCount;
        [LocalData]
        public int? EntreeCount
        {
            get { return m_Internal.EntreeCount; }
            set
            {
                if(m_Internal.EntreeCount!=value){
                    m_Internal.EntreeCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntreeCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _PlatCount;
        [LocalData]
        public int? PlatCount
        {
            get { return m_Internal.PlatCount; }
            set
            {
                if(m_Internal.PlatCount!=value){
                    m_Internal.PlatCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PlatCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _DessertCount;
        [LocalData]
        public int? DessertCount
        {
            get { return m_Internal.DessertCount; }
            set
            {
                if(m_Internal.DessertCount!=value){
                    m_Internal.DessertCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DessertCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _RecordType;
        [LocalData]
        public int RecordType
        {
            get { return m_Internal.RecordType; }
            set
            {
                if(m_Internal.RecordType!=value){
                    m_Internal.RecordType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecordType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        long _TransactionType;
        [LocalData]
        public long TransactionType
        {
            get { return m_Internal.TransactionType; }
            set
            {
                if(m_Internal.TransactionType!=value){
                    m_Internal.TransactionType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _DiscountTotal;
        [LocalData]
        public decimal? DiscountTotal
        {
            get { return m_Internal.DiscountTotal; }
            set
            {
                if(m_Internal.DiscountTotal!=value){
                    m_Internal.DiscountTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiscountTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TicketPeriod;
        [LocalData]
        public string TicketPeriod
        {
            get { return m_Internal.TicketPeriod; }
            set
            {
                if(m_Internal.TicketPeriod!=value){
                    m_Internal.TicketPeriod=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketPeriod");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EstablishmentNumber;
        [LocalData]
        public int? EstablishmentNumber
        {
            get { return m_Internal.EstablishmentNumber; }
            set
            {
                if(m_Internal.EstablishmentNumber!=value){
                    m_Internal.EstablishmentNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EstablishmentNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _BusinessDate;
        [LocalData]
        public DateTime? BusinessDate
        {
            get { return m_Internal.BusinessDate; }
            set
            {
                if(m_Internal.BusinessDate!=value){
                    m_Internal.BusinessDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BusinessDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwPOSTicket, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwSageCategoryTotal : IWCFDataElement
    {
        
        int Category { get; set; }
        
        decimal? DebitTotal { get; set; }
        
        decimal? CreditTotal { get; set; }
        
        decimal? SalesTotal { get; set; }

        void Copy( IvwSageCategoryTotal _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwSageCategoryTotal : IvwSageCategoryTotal
    {
        [DataMember]
        public int Category { get; set; }
        [DataMember]
        public decimal? DebitTotal { get; set; }
        [DataMember]
        public decimal? CreditTotal { get; set; }
        [DataMember]
        public decimal? SalesTotal { get; set; }

        public void Copy( IvwSageCategoryTotal _Item )
        {
             DebitTotal = _Item.DebitTotal;			
             CreditTotal = _Item.CreditTotal;			
             SalesTotal = _Item.SalesTotal;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwSageCategoryTotal( this );
        }
    }


    /// <summary>
    /// A class which represents the vwSageCategoryTotals table in the RenAix Database.
    /// </summary>
    public partial class vwSageCategoryTotal : BaseDataObject<DatavwSageCategoryTotal>, IActiveRecord, ICallOnCreated, IvwSageCategoryTotal
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwSageCategoryTotal> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwSageCategoryTotal>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwSageCategoryTotal> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwSageCategoryTotal item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwSageCategoryTotal item=new vwSageCategoryTotal();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwSageCategoryTotal> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwSageCategoryTotal()
        {
            m_Internal = new DatavwSageCategoryTotal();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwSageCategoryTotal( bool _CallOnCreated )
        {
            m_Internal = new DatavwSageCategoryTotal();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwSageCategoryTotal(string connectionString, string providerName) 
        {
            m_Internal = new DatavwSageCategoryTotal();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwSageCategoryTotal( IvwSageCategoryTotal _Item )
        {
            m_Internal = new DatavwSageCategoryTotal();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwSageCategoryTotal( DatavwSageCategoryTotal _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwSageCategoryTotal _Item )
        {
            m_Internal.DebitTotal = _Item.DebitTotal;			
            m_Internal.CreditTotal = _Item.CreditTotal;			
            m_Internal.SalesTotal = _Item.SalesTotal;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwSageCategoryTotal( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwSageCategoryTotal.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwSageCategoryTotal>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwSageCategoryTotal(Expression<Func<vwSageCategoryTotal, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwSageCategoryTotal> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwSageCategoryTotal> _repo;
            
            if(db.TestMode)
            {
                vwSageCategoryTotal.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwSageCategoryTotal>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwSageCategoryTotal> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwSageCategoryTotal SingleOrDefault(Expression<Func<vwSageCategoryTotal, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwSageCategoryTotal SingleOrDefault(Expression<Func<vwSageCategoryTotal, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwSageCategoryTotal> repo = GetRepo(connectionString,providerName);
            vwSageCategoryTotal single = repo.SingleOrDefault<vwSageCategoryTotal>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwSageCategoryTotal, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwSageCategoryTotal, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwSageCategoryTotal GetByID(int value) 
        {
            return vwSageCategoryTotal.Find( L => L.Category.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwSageCategoryTotal> Find(Expression<Func<vwSageCategoryTotal, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwSageCategoryTotal> Find(Expression<Func<vwSageCategoryTotal, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwSageCategoryTotal> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwSageCategoryTotal> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwSageCategoryTotal> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwSageCategoryTotal> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwSageCategoryTotal> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwSageCategoryTotal> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Category";
        }

        public object KeyValue()
        {
            return this.Category;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.DebitTotal )
//			{
//				rc = this.DebitTotal.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwSageCategoryTotal)
            {
                vwSageCategoryTotal compare=(vwSageCategoryTotal)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public override int GetHashCode() 
        {
            return this.Category;
        }


        public string DescriptorValue()
        {
            return this.DebitTotal.ToString();
        }

        public string DescriptorColumn() 
        {
            return "DebitTotal";
        }

        public static string GetKeyColumn()
        {
            return "Category";
        }        

        public static string GetDescriptorColumn()
        {
            return "DebitTotal";
        }
        
        #region ' Foreign Keys '
        #endregion



//        int _Category;
        [SubSonicPrimaryKey]
        [LocalData]
        public int Category
        {
            get { return m_Internal.Category; }
            set
            {
                if(m_Internal.Category!=value){
                    m_Internal.Category=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Category");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _DebitTotal;
        [LocalData]
        public decimal? DebitTotal
        {
            get { return m_Internal.DebitTotal; }
            set
            {
                if(m_Internal.DebitTotal!=value){
                    m_Internal.DebitTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DebitTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _CreditTotal;
        [LocalData]
        public decimal? CreditTotal
        {
            get { return m_Internal.CreditTotal; }
            set
            {
                if(m_Internal.CreditTotal!=value){
                    m_Internal.CreditTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreditTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _SalesTotal;
        [LocalData]
        public decimal? SalesTotal
        {
            get { return m_Internal.SalesTotal; }
            set
            {
                if(m_Internal.SalesTotal!=value){
                    m_Internal.SalesTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SalesTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwSageCategoryTotal, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwSumaryItemDatum : IWCFDataElement
    {
        
        string Description { get; set; }
        
        int? Count { get; set; }
        
        int? Quantity { get; set; }
        
        decimal? Price { get; set; }
        
        decimal? AveragePrice { get; set; }

        void Copy( IvwSumaryItemDatum _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwSumaryItemDatum : IvwSumaryItemDatum
    {
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public int? Count { get; set; }
        [DataMember]
        public int? Quantity { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public decimal? AveragePrice { get; set; }

        public void Copy( IvwSumaryItemDatum _Item )
        {
             Count = _Item.Count;			
             Quantity = _Item.Quantity;			
             Price = _Item.Price;			
             AveragePrice = _Item.AveragePrice;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwSumaryItemDatum( this );
        }
    }


    /// <summary>
    /// A class which represents the vwSumaryItemData table in the RenAix Database.
    /// </summary>
    public partial class vwSumaryItemDatum : BaseDataObject<DatavwSumaryItemDatum>, IActiveRecord, ICallOnCreated, IvwSumaryItemDatum
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwSumaryItemDatum> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwSumaryItemDatum>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwSumaryItemDatum> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwSumaryItemDatum item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwSumaryItemDatum item=new vwSumaryItemDatum();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwSumaryItemDatum> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwSumaryItemDatum()
        {
            m_Internal = new DatavwSumaryItemDatum();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwSumaryItemDatum( bool _CallOnCreated )
        {
            m_Internal = new DatavwSumaryItemDatum();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwSumaryItemDatum(string connectionString, string providerName) 
        {
            m_Internal = new DatavwSumaryItemDatum();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwSumaryItemDatum( IvwSumaryItemDatum _Item )
        {
            m_Internal = new DatavwSumaryItemDatum();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwSumaryItemDatum( DatavwSumaryItemDatum _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwSumaryItemDatum _Item )
        {
            m_Internal.Count = _Item.Count;			
            m_Internal.Quantity = _Item.Quantity;			
            m_Internal.Price = _Item.Price;			
            m_Internal.AveragePrice = _Item.AveragePrice;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwSumaryItemDatum( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwSumaryItemDatum.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwSumaryItemDatum>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwSumaryItemDatum(Expression<Func<vwSumaryItemDatum, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwSumaryItemDatum> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwSumaryItemDatum> _repo;
            
            if(db.TestMode)
            {
                vwSumaryItemDatum.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwSumaryItemDatum>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwSumaryItemDatum> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwSumaryItemDatum SingleOrDefault(Expression<Func<vwSumaryItemDatum, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwSumaryItemDatum SingleOrDefault(Expression<Func<vwSumaryItemDatum, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwSumaryItemDatum> repo = GetRepo(connectionString,providerName);
            vwSumaryItemDatum single = repo.SingleOrDefault<vwSumaryItemDatum>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwSumaryItemDatum, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwSumaryItemDatum, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwSumaryItemDatum GetByID(string value) 
        {
            return vwSumaryItemDatum.Find( L => L.Description.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwSumaryItemDatum> Find(Expression<Func<vwSumaryItemDatum, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwSumaryItemDatum> Find(Expression<Func<vwSumaryItemDatum, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwSumaryItemDatum> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwSumaryItemDatum> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwSumaryItemDatum> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwSumaryItemDatum> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwSumaryItemDatum> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwSumaryItemDatum> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Description";
        }

        public object KeyValue()
        {
            return this.Description;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Description )
//			{
//				rc = this.Description.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwSumaryItemDatum)
            {
                vwSumaryItemDatum compare=(vwSumaryItemDatum)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Description.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Description";
        }

        public static string GetKeyColumn()
        {
            return "Description";
        }        

        public static string GetDescriptorColumn()
        {
            return "Description";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _Description;
        [SubSonicPrimaryKey]
        [LocalData]
        public string Description
        {
            get { return m_Internal.Description; }
            set
            {
                if(m_Internal.Description!=value){
                    m_Internal.Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Count;
        [LocalData]
        public int? Count
        {
            get { return m_Internal.Count; }
            set
            {
                if(m_Internal.Count!=value){
                    m_Internal.Count=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Count");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Quantity;
        [LocalData]
        public int? Quantity
        {
            get { return m_Internal.Quantity; }
            set
            {
                if(m_Internal.Quantity!=value){
                    m_Internal.Quantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Quantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Price;
        [LocalData]
        public decimal? Price
        {
            get { return m_Internal.Price; }
            set
            {
                if(m_Internal.Price!=value){
                    m_Internal.Price=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _AveragePrice;
        [LocalData]
        public decimal? AveragePrice
        {
            get { return m_Internal.AveragePrice; }
            set
            {
                if(m_Internal.AveragePrice!=value){
                    m_Internal.AveragePrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AveragePrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwSumaryItemDatum, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface Ibanquet_datum : IWCFDataElement
    {
        
        int? ActualAttendees { get; set; }
        
        string ActualManual { get; set; }
        
        decimal? ActualRevenue { get; set; }
        
        int? Attendees { get; set; }
        
        decimal? BilledReveneu { get; set; }
        
        int? BusinessBlockID { get; set; }
        
        string BusinessBlockProprety { get; set; }
        
        string DiscountPercentage { get; set; }
        
        string DisplayDoorcardYN { get; set; }
        
        string DoNotMoveYN { get; set; }
        
        string Doorcard { get; set; }
        
        DateTime? EndDate { get; set; }
        
        DateTime? EndTime { get; set; }
        
        int? EventID { get; set; }
        
        string EventName { get; set; }
        
        string EventProperty { get; set; }
        
        string Eventime { get; set; }
        
        string EventType { get; set; }
        
        string ExcludeFromForecastYN { get; set; }
        
        decimal? ExpectedRevenue { get; set; }
        
        string ForecastRevenueOnlyYN { get; set; }
        
        decimal? ForecastedRevenue { get; set; }
        
        string FunctionSpace { get; set; }
        
        string FunctionSpaceCode { get; set; }
        
        decimal? GuaranteedRevenue { get; set; }
        
        string LoudEventYN { get; set; }
        
        string MasterEventID { get; set; }
        
        string MinimumGuaranteed { get; set; }
        
        int? MinimumSetdownTime { get; set; }
        
        int? MinimumSetupTime { get; set; }
        
        string PackageCode { get; set; }
        
        string PackageDescription { get; set; }
        
        decimal? RateAmount { get; set; }
        
        string RateCode { get; set; }
        
        string RegisteredAttendees { get; set; }
        
        string RegistrationRequiredYN { get; set; }
        
        string RoomSetupStyle { get; set; }
        
        string SetAttendees { get; set; }
        
        DateTime? StartDate { get; set; }
        
        DateTime? StartTime { get; set; }
        
        string Status { get; set; }
        
        string TotalEventTime { get; set; }
        
        Guid banquet_dataID { get; set; }
        
        string DataSource { get; set; }

        void Copy( Ibanquet_datum _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class Databanquet_datum : Ibanquet_datum
    {
        [DataMember]
        public int? ActualAttendees { get; set; }
        [DataMember]
        public string ActualManual { get; set; }
        [DataMember]
        public decimal? ActualRevenue { get; set; }
        [DataMember]
        public int? Attendees { get; set; }
        [DataMember]
        public decimal? BilledReveneu { get; set; }
        [DataMember]
        public int? BusinessBlockID { get; set; }
        [DataMember]
        public string BusinessBlockProprety { get; set; }
        [DataMember]
        public string DiscountPercentage { get; set; }
        [DataMember]
        public string DisplayDoorcardYN { get; set; }
        [DataMember]
        public string DoNotMoveYN { get; set; }
        [DataMember]
        public string Doorcard { get; set; }
        [DataMember]
        public DateTime? EndDate { get; set; }
        [DataMember]
        public DateTime? EndTime { get; set; }
        [DataMember]
        public int? EventID { get; set; }
        [DataMember]
        public string EventName { get; set; }
        [DataMember]
        public string EventProperty { get; set; }
        [DataMember]
        public string Eventime { get; set; }
        [DataMember]
        public string EventType { get; set; }
        [DataMember]
        public string ExcludeFromForecastYN { get; set; }
        [DataMember]
        public decimal? ExpectedRevenue { get; set; }
        [DataMember]
        public string ForecastRevenueOnlyYN { get; set; }
        [DataMember]
        public decimal? ForecastedRevenue { get; set; }
        [DataMember]
        public string FunctionSpace { get; set; }
        [DataMember]
        public string FunctionSpaceCode { get; set; }
        [DataMember]
        public decimal? GuaranteedRevenue { get; set; }
        [DataMember]
        public string LoudEventYN { get; set; }
        [DataMember]
        public string MasterEventID { get; set; }
        [DataMember]
        public string MinimumGuaranteed { get; set; }
        [DataMember]
        public int? MinimumSetdownTime { get; set; }
        [DataMember]
        public int? MinimumSetupTime { get; set; }
        [DataMember]
        public string PackageCode { get; set; }
        [DataMember]
        public string PackageDescription { get; set; }
        [DataMember]
        public decimal? RateAmount { get; set; }
        [DataMember]
        public string RateCode { get; set; }
        [DataMember]
        public string RegisteredAttendees { get; set; }
        [DataMember]
        public string RegistrationRequiredYN { get; set; }
        [DataMember]
        public string RoomSetupStyle { get; set; }
        [DataMember]
        public string SetAttendees { get; set; }
        [DataMember]
        public DateTime? StartDate { get; set; }
        [DataMember]
        public DateTime? StartTime { get; set; }
        [DataMember]
        public string Status { get; set; }
        [DataMember]
        public string TotalEventTime { get; set; }
        [DataMember]
        public Guid banquet_dataID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( Ibanquet_datum _Item )
        {
             ActualAttendees = _Item.ActualAttendees;			
             ActualManual = _Item.ActualManual;			
             ActualRevenue = _Item.ActualRevenue;			
             Attendees = _Item.Attendees;			
             BilledReveneu = _Item.BilledReveneu;			
             BusinessBlockID = _Item.BusinessBlockID;			
             BusinessBlockProprety = _Item.BusinessBlockProprety;			
             DiscountPercentage = _Item.DiscountPercentage;			
             DisplayDoorcardYN = _Item.DisplayDoorcardYN;			
             DoNotMoveYN = _Item.DoNotMoveYN;			
             Doorcard = _Item.Doorcard;			
             EndDate = _Item.EndDate;			
             EndTime = _Item.EndTime;			
             EventID = _Item.EventID;			
             EventName = _Item.EventName;			
             EventProperty = _Item.EventProperty;			
             Eventime = _Item.Eventime;			
             EventType = _Item.EventType;			
             ExcludeFromForecastYN = _Item.ExcludeFromForecastYN;			
             ExpectedRevenue = _Item.ExpectedRevenue;			
             ForecastRevenueOnlyYN = _Item.ForecastRevenueOnlyYN;			
             ForecastedRevenue = _Item.ForecastedRevenue;			
             FunctionSpace = _Item.FunctionSpace;			
             FunctionSpaceCode = _Item.FunctionSpaceCode;			
             GuaranteedRevenue = _Item.GuaranteedRevenue;			
             LoudEventYN = _Item.LoudEventYN;			
             MasterEventID = _Item.MasterEventID;			
             MinimumGuaranteed = _Item.MinimumGuaranteed;			
             MinimumSetdownTime = _Item.MinimumSetdownTime;			
             MinimumSetupTime = _Item.MinimumSetupTime;			
             PackageCode = _Item.PackageCode;			
             PackageDescription = _Item.PackageDescription;			
             RateAmount = _Item.RateAmount;			
             RateCode = _Item.RateCode;			
             RegisteredAttendees = _Item.RegisteredAttendees;			
             RegistrationRequiredYN = _Item.RegistrationRequiredYN;			
             RoomSetupStyle = _Item.RoomSetupStyle;			
             SetAttendees = _Item.SetAttendees;			
             StartDate = _Item.StartDate;			
             StartTime = _Item.StartTime;			
             Status = _Item.Status;			
             TotalEventTime = _Item.TotalEventTime;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new banquet_datum( this );
        }
    }


    /// <summary>
    /// A class which represents the banquet_data table in the RenAix Database.
    /// </summary>
    public partial class banquet_datum : BaseDataObject<Databanquet_datum>, IActiveRecord, ICallOnCreated, Ibanquet_datum
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<banquet_datum> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<banquet_datum>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<banquet_datum> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(banquet_datum item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                banquet_datum item=new banquet_datum();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<banquet_datum> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public banquet_datum()
        {
            m_Internal = new Databanquet_datum();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.banquet_dataID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public banquet_datum( bool _CallOnCreated )
        {
            m_Internal = new Databanquet_datum();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public banquet_datum(string connectionString, string providerName) 
        {
            m_Internal = new Databanquet_datum();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.banquet_dataID = Guid.NewGuid( );     
        }

        public banquet_datum( Ibanquet_datum _Item )
        {
            m_Internal = new Databanquet_datum();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public banquet_datum( Databanquet_datum _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( Ibanquet_datum _Item )
        {
            m_Internal.ActualAttendees = _Item.ActualAttendees;			
            m_Internal.ActualManual = _Item.ActualManual;			
            m_Internal.ActualRevenue = _Item.ActualRevenue;			
            m_Internal.Attendees = _Item.Attendees;			
            m_Internal.BilledReveneu = _Item.BilledReveneu;			
            m_Internal.BusinessBlockID = _Item.BusinessBlockID;			
            m_Internal.BusinessBlockProprety = _Item.BusinessBlockProprety;			
            m_Internal.DiscountPercentage = _Item.DiscountPercentage;			
            m_Internal.DisplayDoorcardYN = _Item.DisplayDoorcardYN;			
            m_Internal.DoNotMoveYN = _Item.DoNotMoveYN;			
            m_Internal.Doorcard = _Item.Doorcard;			
            m_Internal.EndDate = _Item.EndDate;			
            m_Internal.EndTime = _Item.EndTime;			
            m_Internal.EventID = _Item.EventID;			
            m_Internal.EventName = _Item.EventName;			
            m_Internal.EventProperty = _Item.EventProperty;			
            m_Internal.Eventime = _Item.Eventime;			
            m_Internal.EventType = _Item.EventType;			
            m_Internal.ExcludeFromForecastYN = _Item.ExcludeFromForecastYN;			
            m_Internal.ExpectedRevenue = _Item.ExpectedRevenue;			
            m_Internal.ForecastRevenueOnlyYN = _Item.ForecastRevenueOnlyYN;			
            m_Internal.ForecastedRevenue = _Item.ForecastedRevenue;			
            m_Internal.FunctionSpace = _Item.FunctionSpace;			
            m_Internal.FunctionSpaceCode = _Item.FunctionSpaceCode;			
            m_Internal.GuaranteedRevenue = _Item.GuaranteedRevenue;			
            m_Internal.LoudEventYN = _Item.LoudEventYN;			
            m_Internal.MasterEventID = _Item.MasterEventID;			
            m_Internal.MinimumGuaranteed = _Item.MinimumGuaranteed;			
            m_Internal.MinimumSetdownTime = _Item.MinimumSetdownTime;			
            m_Internal.MinimumSetupTime = _Item.MinimumSetupTime;			
            m_Internal.PackageCode = _Item.PackageCode;			
            m_Internal.PackageDescription = _Item.PackageDescription;			
            m_Internal.RateAmount = _Item.RateAmount;			
            m_Internal.RateCode = _Item.RateCode;			
            m_Internal.RegisteredAttendees = _Item.RegisteredAttendees;			
            m_Internal.RegistrationRequiredYN = _Item.RegistrationRequiredYN;			
            m_Internal.RoomSetupStyle = _Item.RoomSetupStyle;			
            m_Internal.SetAttendees = _Item.SetAttendees;			
            m_Internal.StartDate = _Item.StartDate;			
            m_Internal.StartTime = _Item.StartTime;			
            m_Internal.Status = _Item.Status;			
            m_Internal.TotalEventTime = _Item.TotalEventTime;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new banquet_datum( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.banquet_dataID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                banquet_datum.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<banquet_datum>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public banquet_datum(Expression<Func<banquet_datum, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<banquet_datum> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<banquet_datum> _repo;
            
            if(db.TestMode)
            {
                banquet_datum.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<banquet_datum>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<banquet_datum> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static banquet_datum SingleOrDefault(Expression<Func<banquet_datum, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static banquet_datum SingleOrDefault(Expression<Func<banquet_datum, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<banquet_datum> repo = GetRepo(connectionString,providerName);
            banquet_datum single = repo.SingleOrDefault<banquet_datum>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<banquet_datum, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<banquet_datum, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptybanquet_datumLoaded = false;
        protected static banquet_datum Emptybanquet_datumMember = null;

        public static banquet_datum GetByID(Guid? value) 
        {
            banquet_datum rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static banquet_datum GetByID(Guid value) 
        {
            banquet_datum rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptybanquet_datumLoaded )
                    {
                        rc = Emptybanquet_datumMember;
                    }
                    else
                    {
                        IsEmptybanquet_datumLoaded = true;
                        rc = banquet_datum.Find( L => L.banquet_dataID.Equals( value ) ).FirstOrDefault( );
                        Emptybanquet_datumMember = rc;
                    }
                }
                else
                {
                    rc = banquet_datum.Find( L => L.banquet_dataID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<banquet_datum> Find(Expression<Func<banquet_datum, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<banquet_datum> Find(Expression<Func<banquet_datum, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<banquet_datum> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<banquet_datum> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<banquet_datum> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<banquet_datum> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<banquet_datum> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<banquet_datum> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "banquet_dataID";
        }

        public object KeyValue()
        {
            return this.banquet_dataID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.ActualManual )
//			{
//				rc = this.ActualManual.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is banquet_datum)
            {
                banquet_datum compare=(banquet_datum)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.banquet_dataID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.ActualManual.ToString();
        }

        public string DescriptorColumn() 
        {
            return "ActualManual";
        }

        public static string GetKeyColumn()
        {
            return "banquet_dataID";
        }        

        public static string GetDescriptorColumn()
        {
            return "ActualManual";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.banquet_dataID;
            }
            set
            {
                m_Internal.banquet_dataID = value;
            }
        }


//        int? _ActualAttendees;
        [LocalData]
        public int? ActualAttendees
        {
            get { return m_Internal.ActualAttendees; }
            set
            {
                if(m_Internal.ActualAttendees!=value){
                    m_Internal.ActualAttendees=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActualAttendees");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ActualManual;
        [LocalData]
        public string ActualManual
        {
            get { return m_Internal.ActualManual; }
            set
            {
                if(m_Internal.ActualManual!=value){
                    m_Internal.ActualManual=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActualManual");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _ActualRevenue;
        [LocalData]
        public decimal? ActualRevenue
        {
            get { return m_Internal.ActualRevenue; }
            set
            {
                if(m_Internal.ActualRevenue!=value){
                    m_Internal.ActualRevenue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActualRevenue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Attendees;
        [LocalData]
        public int? Attendees
        {
            get { return m_Internal.Attendees; }
            set
            {
                if(m_Internal.Attendees!=value){
                    m_Internal.Attendees=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Attendees");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _BilledReveneu;
        [LocalData]
        public decimal? BilledReveneu
        {
            get { return m_Internal.BilledReveneu; }
            set
            {
                if(m_Internal.BilledReveneu!=value){
                    m_Internal.BilledReveneu=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BilledReveneu");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _BusinessBlockID;
        [LocalData]
        public int? BusinessBlockID
        {
            get { return m_Internal.BusinessBlockID; }
            set
            {
                if(m_Internal.BusinessBlockID!=value){
                    m_Internal.BusinessBlockID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BusinessBlockID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _BusinessBlockProprety;
        [LocalData]
        public string BusinessBlockProprety
        {
            get { return m_Internal.BusinessBlockProprety; }
            set
            {
                if(m_Internal.BusinessBlockProprety!=value){
                    m_Internal.BusinessBlockProprety=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BusinessBlockProprety");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DiscountPercentage;
        [LocalData]
        public string DiscountPercentage
        {
            get { return m_Internal.DiscountPercentage; }
            set
            {
                if(m_Internal.DiscountPercentage!=value){
                    m_Internal.DiscountPercentage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiscountPercentage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DisplayDoorcardYN;
        [LocalData]
        public string DisplayDoorcardYN
        {
            get { return m_Internal.DisplayDoorcardYN; }
            set
            {
                if(m_Internal.DisplayDoorcardYN!=value){
                    m_Internal.DisplayDoorcardYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayDoorcardYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DoNotMoveYN;
        [LocalData]
        public string DoNotMoveYN
        {
            get { return m_Internal.DoNotMoveYN; }
            set
            {
                if(m_Internal.DoNotMoveYN!=value){
                    m_Internal.DoNotMoveYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoNotMoveYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Doorcard;
        [LocalData]
        public string Doorcard
        {
            get { return m_Internal.Doorcard; }
            set
            {
                if(m_Internal.Doorcard!=value){
                    m_Internal.Doorcard=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Doorcard");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _EndDate;
        [LocalData]
        public DateTime? EndDate
        {
            get { return m_Internal.EndDate; }
            set
            {
                if(m_Internal.EndDate!=value){
                    m_Internal.EndDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EndDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _EndTime;
        [LocalData]
        public DateTime? EndTime
        {
            get { return m_Internal.EndTime; }
            set
            {
                if(m_Internal.EndTime!=value){
                    m_Internal.EndTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EndTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EventID;
        [LocalData]
        public int? EventID
        {
            get { return m_Internal.EventID; }
            set
            {
                if(m_Internal.EventID!=value){
                    m_Internal.EventID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EventID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EventName;
        [LocalData]
        public string EventName
        {
            get { return m_Internal.EventName; }
            set
            {
                if(m_Internal.EventName!=value){
                    m_Internal.EventName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EventName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EventProperty;
        [LocalData]
        public string EventProperty
        {
            get { return m_Internal.EventProperty; }
            set
            {
                if(m_Internal.EventProperty!=value){
                    m_Internal.EventProperty=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EventProperty");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Eventime;
        [LocalData]
        public string Eventime
        {
            get { return m_Internal.Eventime; }
            set
            {
                if(m_Internal.Eventime!=value){
                    m_Internal.Eventime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Eventime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EventType;
        [LocalData]
        public string EventType
        {
            get { return m_Internal.EventType; }
            set
            {
                if(m_Internal.EventType!=value){
                    m_Internal.EventType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EventType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ExcludeFromForecastYN;
        [LocalData]
        public string ExcludeFromForecastYN
        {
            get { return m_Internal.ExcludeFromForecastYN; }
            set
            {
                if(m_Internal.ExcludeFromForecastYN!=value){
                    m_Internal.ExcludeFromForecastYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExcludeFromForecastYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _ExpectedRevenue;
        [LocalData]
        public decimal? ExpectedRevenue
        {
            get { return m_Internal.ExpectedRevenue; }
            set
            {
                if(m_Internal.ExpectedRevenue!=value){
                    m_Internal.ExpectedRevenue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExpectedRevenue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ForecastRevenueOnlyYN;
        [LocalData]
        public string ForecastRevenueOnlyYN
        {
            get { return m_Internal.ForecastRevenueOnlyYN; }
            set
            {
                if(m_Internal.ForecastRevenueOnlyYN!=value){
                    m_Internal.ForecastRevenueOnlyYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ForecastRevenueOnlyYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _ForecastedRevenue;
        [LocalData]
        public decimal? ForecastedRevenue
        {
            get { return m_Internal.ForecastedRevenue; }
            set
            {
                if(m_Internal.ForecastedRevenue!=value){
                    m_Internal.ForecastedRevenue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ForecastedRevenue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _FunctionSpace;
        [LocalData]
        public string FunctionSpace
        {
            get { return m_Internal.FunctionSpace; }
            set
            {
                if(m_Internal.FunctionSpace!=value){
                    m_Internal.FunctionSpace=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FunctionSpace");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _FunctionSpaceCode;
        [LocalData]
        public string FunctionSpaceCode
        {
            get { return m_Internal.FunctionSpaceCode; }
            set
            {
                if(m_Internal.FunctionSpaceCode!=value){
                    m_Internal.FunctionSpaceCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FunctionSpaceCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _GuaranteedRevenue;
        [LocalData]
        public decimal? GuaranteedRevenue
        {
            get { return m_Internal.GuaranteedRevenue; }
            set
            {
                if(m_Internal.GuaranteedRevenue!=value){
                    m_Internal.GuaranteedRevenue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuaranteedRevenue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _LoudEventYN;
        [LocalData]
        public string LoudEventYN
        {
            get { return m_Internal.LoudEventYN; }
            set
            {
                if(m_Internal.LoudEventYN!=value){
                    m_Internal.LoudEventYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LoudEventYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MasterEventID;
        [LocalData]
        public string MasterEventID
        {
            get { return m_Internal.MasterEventID; }
            set
            {
                if(m_Internal.MasterEventID!=value){
                    m_Internal.MasterEventID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MasterEventID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MinimumGuaranteed;
        [LocalData]
        public string MinimumGuaranteed
        {
            get { return m_Internal.MinimumGuaranteed; }
            set
            {
                if(m_Internal.MinimumGuaranteed!=value){
                    m_Internal.MinimumGuaranteed=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinimumGuaranteed");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _MinimumSetdownTime;
        [LocalData]
        public int? MinimumSetdownTime
        {
            get { return m_Internal.MinimumSetdownTime; }
            set
            {
                if(m_Internal.MinimumSetdownTime!=value){
                    m_Internal.MinimumSetdownTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinimumSetdownTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _MinimumSetupTime;
        [LocalData]
        public int? MinimumSetupTime
        {
            get { return m_Internal.MinimumSetupTime; }
            set
            {
                if(m_Internal.MinimumSetupTime!=value){
                    m_Internal.MinimumSetupTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinimumSetupTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PackageCode;
        [LocalData]
        public string PackageCode
        {
            get { return m_Internal.PackageCode; }
            set
            {
                if(m_Internal.PackageCode!=value){
                    m_Internal.PackageCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PackageCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PackageDescription;
        [LocalData]
        public string PackageDescription
        {
            get { return m_Internal.PackageDescription; }
            set
            {
                if(m_Internal.PackageDescription!=value){
                    m_Internal.PackageDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PackageDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _RateAmount;
        [LocalData]
        public decimal? RateAmount
        {
            get { return m_Internal.RateAmount; }
            set
            {
                if(m_Internal.RateAmount!=value){
                    m_Internal.RateAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RateAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RateCode;
        [LocalData]
        public string RateCode
        {
            get { return m_Internal.RateCode; }
            set
            {
                if(m_Internal.RateCode!=value){
                    m_Internal.RateCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RateCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RegisteredAttendees;
        [LocalData]
        public string RegisteredAttendees
        {
            get { return m_Internal.RegisteredAttendees; }
            set
            {
                if(m_Internal.RegisteredAttendees!=value){
                    m_Internal.RegisteredAttendees=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RegisteredAttendees");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RegistrationRequiredYN;
        [LocalData]
        public string RegistrationRequiredYN
        {
            get { return m_Internal.RegistrationRequiredYN; }
            set
            {
                if(m_Internal.RegistrationRequiredYN!=value){
                    m_Internal.RegistrationRequiredYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RegistrationRequiredYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RoomSetupStyle;
        [LocalData]
        public string RoomSetupStyle
        {
            get { return m_Internal.RoomSetupStyle; }
            set
            {
                if(m_Internal.RoomSetupStyle!=value){
                    m_Internal.RoomSetupStyle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoomSetupStyle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SetAttendees;
        [LocalData]
        public string SetAttendees
        {
            get { return m_Internal.SetAttendees; }
            set
            {
                if(m_Internal.SetAttendees!=value){
                    m_Internal.SetAttendees=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SetAttendees");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _StartDate;
        [LocalData]
        public DateTime? StartDate
        {
            get { return m_Internal.StartDate; }
            set
            {
                if(m_Internal.StartDate!=value){
                    m_Internal.StartDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StartDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _StartTime;
        [LocalData]
        public DateTime? StartTime
        {
            get { return m_Internal.StartTime; }
            set
            {
                if(m_Internal.StartTime!=value){
                    m_Internal.StartTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StartTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Status;
        [LocalData]
        public string Status
        {
            get { return m_Internal.Status; }
            set
            {
                if(m_Internal.Status!=value){
                    m_Internal.Status=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Status");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TotalEventTime;
        [LocalData]
        public string TotalEventTime
        {
            get { return m_Internal.TotalEventTime; }
            set
            {
                if(m_Internal.TotalEventTime!=value){
                    m_Internal.TotalEventTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalEventTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _banquet_dataID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid banquet_dataID
        {
            get { return m_Internal.banquet_dataID; }
            set
            {
                if(m_Internal.banquet_dataID!=value){
                    m_Internal.banquet_dataID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="banquet_dataID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<banquet_datum, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface Ibusiness_block : IWCFDataElement
    {
        
        int? ActualNumberOfRooms { get; set; }
        
        decimal? ActualRoomRevenue { get; set; }
        
        decimal? ActualAverageRate { get; set; }
        
        int? Attendees { get; set; }
        
        decimal? AvgRate { get; set; }
        
        string BlockCode { get; set; }
        
        string BookingType { get; set; }
        
        string BreakfastIncludedFlag { get; set; }
        
        string BreakfastPrice { get; set; }
        
        int? BusinessBlockID { get; set; }
        
        decimal? CateringRevenue { get; set; }
        
        string CateringStatus { get; set; }
        
        string CompanyName { get; set; }
        
        string CompanyID { get; set; }
        
        string ComplimentaryRooms { get; set; }
        
        decimal? ComplimentaryRoomsValue { get; set; }
        
        string ContractNumber { get; set; }
        
        DateTime? CreationDate { get; set; }
        
        DateTime? EndDate { get; set; }
        
        string RateCode { get; set; }
        
        int? ReservationType { get; set; }
        
        decimal? TotalRevenue { get; set; }
        
        int? TotalComplimentaryRooms { get; set; }
        
        DateTime? UpdateDate { get; set; }
        
        Guid business_blocksID { get; set; }
        
        string DataSource { get; set; }

        void Copy( Ibusiness_block _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class Databusiness_block : Ibusiness_block
    {
        [DataMember]
        public int? ActualNumberOfRooms { get; set; }
        [DataMember]
        public decimal? ActualRoomRevenue { get; set; }
        [DataMember]
        public decimal? ActualAverageRate { get; set; }
        [DataMember]
        public int? Attendees { get; set; }
        [DataMember]
        public decimal? AvgRate { get; set; }
        [DataMember]
        public string BlockCode { get; set; }
        [DataMember]
        public string BookingType { get; set; }
        [DataMember]
        public string BreakfastIncludedFlag { get; set; }
        [DataMember]
        public string BreakfastPrice { get; set; }
        [DataMember]
        public int? BusinessBlockID { get; set; }
        [DataMember]
        public decimal? CateringRevenue { get; set; }
        [DataMember]
        public string CateringStatus { get; set; }
        [DataMember]
        public string CompanyName { get; set; }
        [DataMember]
        public string CompanyID { get; set; }
        [DataMember]
        public string ComplimentaryRooms { get; set; }
        [DataMember]
        public decimal? ComplimentaryRoomsValue { get; set; }
        [DataMember]
        public string ContractNumber { get; set; }
        [DataMember]
        public DateTime? CreationDate { get; set; }
        [DataMember]
        public DateTime? EndDate { get; set; }
        [DataMember]
        public string RateCode { get; set; }
        [DataMember]
        public int? ReservationType { get; set; }
        [DataMember]
        public decimal? TotalRevenue { get; set; }
        [DataMember]
        public int? TotalComplimentaryRooms { get; set; }
        [DataMember]
        public DateTime? UpdateDate { get; set; }
        [DataMember]
        public Guid business_blocksID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( Ibusiness_block _Item )
        {
             ActualNumberOfRooms = _Item.ActualNumberOfRooms;			
             ActualRoomRevenue = _Item.ActualRoomRevenue;			
             ActualAverageRate = _Item.ActualAverageRate;			
             Attendees = _Item.Attendees;			
             AvgRate = _Item.AvgRate;			
             BlockCode = _Item.BlockCode;			
             BookingType = _Item.BookingType;			
             BreakfastIncludedFlag = _Item.BreakfastIncludedFlag;			
             BreakfastPrice = _Item.BreakfastPrice;			
             BusinessBlockID = _Item.BusinessBlockID;			
             CateringRevenue = _Item.CateringRevenue;			
             CateringStatus = _Item.CateringStatus;			
             CompanyName = _Item.CompanyName;			
             CompanyID = _Item.CompanyID;			
             ComplimentaryRooms = _Item.ComplimentaryRooms;			
             ComplimentaryRoomsValue = _Item.ComplimentaryRoomsValue;			
             ContractNumber = _Item.ContractNumber;			
             CreationDate = _Item.CreationDate;			
             EndDate = _Item.EndDate;			
             RateCode = _Item.RateCode;			
             ReservationType = _Item.ReservationType;			
             TotalRevenue = _Item.TotalRevenue;			
             TotalComplimentaryRooms = _Item.TotalComplimentaryRooms;			
             UpdateDate = _Item.UpdateDate;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new business_block( this );
        }
    }


    /// <summary>
    /// A class which represents the business_blocks table in the RenAix Database.
    /// </summary>
    public partial class business_block : BaseDataObject<Databusiness_block>, IActiveRecord, ICallOnCreated, Ibusiness_block
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<business_block> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<business_block>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<business_block> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(business_block item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                business_block item=new business_block();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<business_block> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public business_block()
        {
            m_Internal = new Databusiness_block();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.business_blocksID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public business_block( bool _CallOnCreated )
        {
            m_Internal = new Databusiness_block();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public business_block(string connectionString, string providerName) 
        {
            m_Internal = new Databusiness_block();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.business_blocksID = Guid.NewGuid( );     
        }

        public business_block( Ibusiness_block _Item )
        {
            m_Internal = new Databusiness_block();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public business_block( Databusiness_block _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( Ibusiness_block _Item )
        {
            m_Internal.ActualNumberOfRooms = _Item.ActualNumberOfRooms;			
            m_Internal.ActualRoomRevenue = _Item.ActualRoomRevenue;			
            m_Internal.ActualAverageRate = _Item.ActualAverageRate;			
            m_Internal.Attendees = _Item.Attendees;			
            m_Internal.AvgRate = _Item.AvgRate;			
            m_Internal.BlockCode = _Item.BlockCode;			
            m_Internal.BookingType = _Item.BookingType;			
            m_Internal.BreakfastIncludedFlag = _Item.BreakfastIncludedFlag;			
            m_Internal.BreakfastPrice = _Item.BreakfastPrice;			
            m_Internal.BusinessBlockID = _Item.BusinessBlockID;			
            m_Internal.CateringRevenue = _Item.CateringRevenue;			
            m_Internal.CateringStatus = _Item.CateringStatus;			
            m_Internal.CompanyName = _Item.CompanyName;			
            m_Internal.CompanyID = _Item.CompanyID;			
            m_Internal.ComplimentaryRooms = _Item.ComplimentaryRooms;			
            m_Internal.ComplimentaryRoomsValue = _Item.ComplimentaryRoomsValue;			
            m_Internal.ContractNumber = _Item.ContractNumber;			
            m_Internal.CreationDate = _Item.CreationDate;			
            m_Internal.EndDate = _Item.EndDate;			
            m_Internal.RateCode = _Item.RateCode;			
            m_Internal.ReservationType = _Item.ReservationType;			
            m_Internal.TotalRevenue = _Item.TotalRevenue;			
            m_Internal.TotalComplimentaryRooms = _Item.TotalComplimentaryRooms;			
            m_Internal.UpdateDate = _Item.UpdateDate;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new business_block( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.business_blocksID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                business_block.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<business_block>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public business_block(Expression<Func<business_block, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<business_block> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<business_block> _repo;
            
            if(db.TestMode)
            {
                business_block.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<business_block>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<business_block> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static business_block SingleOrDefault(Expression<Func<business_block, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static business_block SingleOrDefault(Expression<Func<business_block, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<business_block> repo = GetRepo(connectionString,providerName);
            business_block single = repo.SingleOrDefault<business_block>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<business_block, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<business_block, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptybusiness_blockLoaded = false;
        protected static business_block Emptybusiness_blockMember = null;

        public static business_block GetByID(Guid? value) 
        {
            business_block rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static business_block GetByID(Guid value) 
        {
            business_block rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptybusiness_blockLoaded )
                    {
                        rc = Emptybusiness_blockMember;
                    }
                    else
                    {
                        IsEmptybusiness_blockLoaded = true;
                        rc = business_block.Find( L => L.business_blocksID.Equals( value ) ).FirstOrDefault( );
                        Emptybusiness_blockMember = rc;
                    }
                }
                else
                {
                    rc = business_block.Find( L => L.business_blocksID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<business_block> Find(Expression<Func<business_block, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<business_block> Find(Expression<Func<business_block, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<business_block> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<business_block> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<business_block> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<business_block> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<business_block> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<business_block> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "business_blocksID";
        }

        public object KeyValue()
        {
            return this.business_blocksID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.BlockCode )
//			{
//				rc = this.BlockCode.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is business_block)
            {
                business_block compare=(business_block)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.business_blocksID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.BlockCode.ToString();
        }

        public string DescriptorColumn() 
        {
            return "BlockCode";
        }

        public static string GetKeyColumn()
        {
            return "business_blocksID";
        }        

        public static string GetDescriptorColumn()
        {
            return "BlockCode";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.business_blocksID;
            }
            set
            {
                m_Internal.business_blocksID = value;
            }
        }


//        int? _ActualNumberOfRooms;
        [LocalData]
        public int? ActualNumberOfRooms
        {
            get { return m_Internal.ActualNumberOfRooms; }
            set
            {
                if(m_Internal.ActualNumberOfRooms!=value){
                    m_Internal.ActualNumberOfRooms=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActualNumberOfRooms");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _ActualRoomRevenue;
        [LocalData]
        public decimal? ActualRoomRevenue
        {
            get { return m_Internal.ActualRoomRevenue; }
            set
            {
                if(m_Internal.ActualRoomRevenue!=value){
                    m_Internal.ActualRoomRevenue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActualRoomRevenue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _ActualAverageRate;
        [LocalData]
        public decimal? ActualAverageRate
        {
            get { return m_Internal.ActualAverageRate; }
            set
            {
                if(m_Internal.ActualAverageRate!=value){
                    m_Internal.ActualAverageRate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActualAverageRate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Attendees;
        [LocalData]
        public int? Attendees
        {
            get { return m_Internal.Attendees; }
            set
            {
                if(m_Internal.Attendees!=value){
                    m_Internal.Attendees=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Attendees");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _AvgRate;
        [LocalData]
        public decimal? AvgRate
        {
            get { return m_Internal.AvgRate; }
            set
            {
                if(m_Internal.AvgRate!=value){
                    m_Internal.AvgRate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AvgRate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _BlockCode;
        [LocalData]
        public string BlockCode
        {
            get { return m_Internal.BlockCode; }
            set
            {
                if(m_Internal.BlockCode!=value){
                    m_Internal.BlockCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BlockCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _BookingType;
        [LocalData]
        public string BookingType
        {
            get { return m_Internal.BookingType; }
            set
            {
                if(m_Internal.BookingType!=value){
                    m_Internal.BookingType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BookingType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _BreakfastIncludedFlag;
        [LocalData]
        public string BreakfastIncludedFlag
        {
            get { return m_Internal.BreakfastIncludedFlag; }
            set
            {
                if(m_Internal.BreakfastIncludedFlag!=value){
                    m_Internal.BreakfastIncludedFlag=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BreakfastIncludedFlag");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _BreakfastPrice;
        [LocalData]
        public string BreakfastPrice
        {
            get { return m_Internal.BreakfastPrice; }
            set
            {
                if(m_Internal.BreakfastPrice!=value){
                    m_Internal.BreakfastPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BreakfastPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _BusinessBlockID;
        [LocalData]
        public int? BusinessBlockID
        {
            get { return m_Internal.BusinessBlockID; }
            set
            {
                if(m_Internal.BusinessBlockID!=value){
                    m_Internal.BusinessBlockID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BusinessBlockID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _CateringRevenue;
        [LocalData]
        public decimal? CateringRevenue
        {
            get { return m_Internal.CateringRevenue; }
            set
            {
                if(m_Internal.CateringRevenue!=value){
                    m_Internal.CateringRevenue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CateringRevenue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CateringStatus;
        [LocalData]
        public string CateringStatus
        {
            get { return m_Internal.CateringStatus; }
            set
            {
                if(m_Internal.CateringStatus!=value){
                    m_Internal.CateringStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CateringStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CompanyName;
        [LocalData]
        public string CompanyName
        {
            get { return m_Internal.CompanyName; }
            set
            {
                if(m_Internal.CompanyName!=value){
                    m_Internal.CompanyName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CompanyName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CompanyID;
        [LocalData]
        public string CompanyID
        {
            get { return m_Internal.CompanyID; }
            set
            {
                if(m_Internal.CompanyID!=value){
                    m_Internal.CompanyID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CompanyID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ComplimentaryRooms;
        [LocalData]
        public string ComplimentaryRooms
        {
            get { return m_Internal.ComplimentaryRooms; }
            set
            {
                if(m_Internal.ComplimentaryRooms!=value){
                    m_Internal.ComplimentaryRooms=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ComplimentaryRooms");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _ComplimentaryRoomsValue;
        [LocalData]
        public decimal? ComplimentaryRoomsValue
        {
            get { return m_Internal.ComplimentaryRoomsValue; }
            set
            {
                if(m_Internal.ComplimentaryRoomsValue!=value){
                    m_Internal.ComplimentaryRoomsValue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ComplimentaryRoomsValue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ContractNumber;
        [LocalData]
        public string ContractNumber
        {
            get { return m_Internal.ContractNumber; }
            set
            {
                if(m_Internal.ContractNumber!=value){
                    m_Internal.ContractNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ContractNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _CreationDate;
        [LocalData]
        public DateTime? CreationDate
        {
            get { return m_Internal.CreationDate; }
            set
            {
                if(m_Internal.CreationDate!=value){
                    m_Internal.CreationDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreationDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _EndDate;
        [LocalData]
        public DateTime? EndDate
        {
            get { return m_Internal.EndDate; }
            set
            {
                if(m_Internal.EndDate!=value){
                    m_Internal.EndDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EndDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RateCode;
        [LocalData]
        public string RateCode
        {
            get { return m_Internal.RateCode; }
            set
            {
                if(m_Internal.RateCode!=value){
                    m_Internal.RateCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RateCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ReservationType;
        [LocalData]
        public int? ReservationType
        {
            get { return m_Internal.ReservationType; }
            set
            {
                if(m_Internal.ReservationType!=value){
                    m_Internal.ReservationType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReservationType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalRevenue;
        [LocalData]
        public decimal? TotalRevenue
        {
            get { return m_Internal.TotalRevenue; }
            set
            {
                if(m_Internal.TotalRevenue!=value){
                    m_Internal.TotalRevenue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalRevenue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalComplimentaryRooms;
        [LocalData]
        public int? TotalComplimentaryRooms
        {
            get { return m_Internal.TotalComplimentaryRooms; }
            set
            {
                if(m_Internal.TotalComplimentaryRooms!=value){
                    m_Internal.TotalComplimentaryRooms=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalComplimentaryRooms");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _UpdateDate;
        [LocalData]
        public DateTime? UpdateDate
        {
            get { return m_Internal.UpdateDate; }
            set
            {
                if(m_Internal.UpdateDate!=value){
                    m_Internal.UpdateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _business_blocksID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid business_blocksID
        {
            get { return m_Internal.business_blocksID; }
            set
            {
                if(m_Internal.business_blocksID!=value){
                    m_Internal.business_blocksID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="business_blocksID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<business_block, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface Idly_corr_ttl : IWCFDataElement
    {
        
        string store_id { get; set; }
        
        int? rvc_num { get; set; }
        
        string rvc_name { get; set; }
        
        int? emp_num { get; set; }
        
        string emp_last_name { get; set; }
        
        string emp_first_name { get; set; }
        
        string emp_check_name { get; set; }
        
        int? man_num { get; set; }
        
        string man_last_name { get; set; }
        
        string man_first_name { get; set; }
        
        string man_check_name { get; set; }
        
        DateTime? open_datetime { get; set; }
        
        DateTime? close_datetime { get; set; }
        
        DateTime? trans_datetime { get; set; }
        
        string ob_item_corr { get; set; }
        
        string ob_item_rtn { get; set; }
        
        int? art_num { get; set; }
        
        string art_name1 { get; set; }
        
        string art_name2 { get; set; }
        
        int? cnt { get; set; }
        
        decimal? ttl { get; set; }
        
        decimal? sub_ttl { get; set; }
        
        int? fact_num { get; set; }
        
        int? num_dtl { get; set; }
        
        int? covers { get; set; }
        
        string reason_num { get; set; }
        
        string reason_name { get; set; }
        
        DateTime? business_date { get; set; }
        
        int? trans_seq { get; set; }
        
        int? dtl_seq { get; set; }
        
        int? sp_error { get; set; }
        
        Guid dly_corr_ttlID { get; set; }
        
        string DataSource { get; set; }

        void Copy( Idly_corr_ttl _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class Datadly_corr_ttl : Idly_corr_ttl
    {
        [DataMember]
        public string store_id { get; set; }
        [DataMember]
        public int? rvc_num { get; set; }
        [DataMember]
        public string rvc_name { get; set; }
        [DataMember]
        public int? emp_num { get; set; }
        [DataMember]
        public string emp_last_name { get; set; }
        [DataMember]
        public string emp_first_name { get; set; }
        [DataMember]
        public string emp_check_name { get; set; }
        [DataMember]
        public int? man_num { get; set; }
        [DataMember]
        public string man_last_name { get; set; }
        [DataMember]
        public string man_first_name { get; set; }
        [DataMember]
        public string man_check_name { get; set; }
        [DataMember]
        public DateTime? open_datetime { get; set; }
        [DataMember]
        public DateTime? close_datetime { get; set; }
        [DataMember]
        public DateTime? trans_datetime { get; set; }
        [DataMember]
        public string ob_item_corr { get; set; }
        [DataMember]
        public string ob_item_rtn { get; set; }
        [DataMember]
        public int? art_num { get; set; }
        [DataMember]
        public string art_name1 { get; set; }
        [DataMember]
        public string art_name2 { get; set; }
        [DataMember]
        public int? cnt { get; set; }
        [DataMember]
        public decimal? ttl { get; set; }
        [DataMember]
        public decimal? sub_ttl { get; set; }
        [DataMember]
        public int? fact_num { get; set; }
        [DataMember]
        public int? num_dtl { get; set; }
        [DataMember]
        public int? covers { get; set; }
        [DataMember]
        public string reason_num { get; set; }
        [DataMember]
        public string reason_name { get; set; }
        [DataMember]
        public DateTime? business_date { get; set; }
        [DataMember]
        public int? trans_seq { get; set; }
        [DataMember]
        public int? dtl_seq { get; set; }
        [DataMember]
        public int? sp_error { get; set; }
        [DataMember]
        public Guid dly_corr_ttlID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( Idly_corr_ttl _Item )
        {
             store_id = _Item.store_id;			
             rvc_num = _Item.rvc_num;			
             rvc_name = _Item.rvc_name;			
             emp_num = _Item.emp_num;			
             emp_last_name = _Item.emp_last_name;			
             emp_first_name = _Item.emp_first_name;			
             emp_check_name = _Item.emp_check_name;			
             man_num = _Item.man_num;			
             man_last_name = _Item.man_last_name;			
             man_first_name = _Item.man_first_name;			
             man_check_name = _Item.man_check_name;			
             open_datetime = _Item.open_datetime;			
             close_datetime = _Item.close_datetime;			
             trans_datetime = _Item.trans_datetime;			
             ob_item_corr = _Item.ob_item_corr;			
             ob_item_rtn = _Item.ob_item_rtn;			
             art_num = _Item.art_num;			
             art_name1 = _Item.art_name1;			
             art_name2 = _Item.art_name2;			
             cnt = _Item.cnt;			
             ttl = _Item.ttl;			
             sub_ttl = _Item.sub_ttl;			
             fact_num = _Item.fact_num;			
             num_dtl = _Item.num_dtl;			
             covers = _Item.covers;			
             reason_num = _Item.reason_num;			
             reason_name = _Item.reason_name;			
             business_date = _Item.business_date;			
             trans_seq = _Item.trans_seq;			
             dtl_seq = _Item.dtl_seq;			
             sp_error = _Item.sp_error;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new dly_corr_ttl( this );
        }
    }


    /// <summary>
    /// A class which represents the dly_corr_ttl table in the RenAix Database.
    /// </summary>
    public partial class dly_corr_ttl : BaseDataObject<Datadly_corr_ttl>, IActiveRecord, ICallOnCreated, Idly_corr_ttl
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<dly_corr_ttl> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<dly_corr_ttl>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<dly_corr_ttl> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(dly_corr_ttl item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                dly_corr_ttl item=new dly_corr_ttl();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<dly_corr_ttl> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public dly_corr_ttl()
        {
            m_Internal = new Datadly_corr_ttl();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.dly_corr_ttlID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public dly_corr_ttl( bool _CallOnCreated )
        {
            m_Internal = new Datadly_corr_ttl();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public dly_corr_ttl(string connectionString, string providerName) 
        {
            m_Internal = new Datadly_corr_ttl();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.dly_corr_ttlID = Guid.NewGuid( );     
        }

        public dly_corr_ttl( Idly_corr_ttl _Item )
        {
            m_Internal = new Datadly_corr_ttl();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public dly_corr_ttl( Datadly_corr_ttl _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( Idly_corr_ttl _Item )
        {
            m_Internal.store_id = _Item.store_id;			
            m_Internal.rvc_num = _Item.rvc_num;			
            m_Internal.rvc_name = _Item.rvc_name;			
            m_Internal.emp_num = _Item.emp_num;			
            m_Internal.emp_last_name = _Item.emp_last_name;			
            m_Internal.emp_first_name = _Item.emp_first_name;			
            m_Internal.emp_check_name = _Item.emp_check_name;			
            m_Internal.man_num = _Item.man_num;			
            m_Internal.man_last_name = _Item.man_last_name;			
            m_Internal.man_first_name = _Item.man_first_name;			
            m_Internal.man_check_name = _Item.man_check_name;			
            m_Internal.open_datetime = _Item.open_datetime;			
            m_Internal.close_datetime = _Item.close_datetime;			
            m_Internal.trans_datetime = _Item.trans_datetime;			
            m_Internal.ob_item_corr = _Item.ob_item_corr;			
            m_Internal.ob_item_rtn = _Item.ob_item_rtn;			
            m_Internal.art_num = _Item.art_num;			
            m_Internal.art_name1 = _Item.art_name1;			
            m_Internal.art_name2 = _Item.art_name2;			
            m_Internal.cnt = _Item.cnt;			
            m_Internal.ttl = _Item.ttl;			
            m_Internal.sub_ttl = _Item.sub_ttl;			
            m_Internal.fact_num = _Item.fact_num;			
            m_Internal.num_dtl = _Item.num_dtl;			
            m_Internal.covers = _Item.covers;			
            m_Internal.reason_num = _Item.reason_num;			
            m_Internal.reason_name = _Item.reason_name;			
            m_Internal.business_date = _Item.business_date;			
            m_Internal.trans_seq = _Item.trans_seq;			
            m_Internal.dtl_seq = _Item.dtl_seq;			
            m_Internal.sp_error = _Item.sp_error;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new dly_corr_ttl( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.dly_corr_ttlID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                dly_corr_ttl.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<dly_corr_ttl>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public dly_corr_ttl(Expression<Func<dly_corr_ttl, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<dly_corr_ttl> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<dly_corr_ttl> _repo;
            
            if(db.TestMode)
            {
                dly_corr_ttl.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<dly_corr_ttl>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<dly_corr_ttl> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static dly_corr_ttl SingleOrDefault(Expression<Func<dly_corr_ttl, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static dly_corr_ttl SingleOrDefault(Expression<Func<dly_corr_ttl, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<dly_corr_ttl> repo = GetRepo(connectionString,providerName);
            dly_corr_ttl single = repo.SingleOrDefault<dly_corr_ttl>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<dly_corr_ttl, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<dly_corr_ttl, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptydly_corr_ttlLoaded = false;
        protected static dly_corr_ttl Emptydly_corr_ttlMember = null;

        public static dly_corr_ttl GetByID(Guid? value) 
        {
            dly_corr_ttl rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static dly_corr_ttl GetByID(Guid value) 
        {
            dly_corr_ttl rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptydly_corr_ttlLoaded )
                    {
                        rc = Emptydly_corr_ttlMember;
                    }
                    else
                    {
                        IsEmptydly_corr_ttlLoaded = true;
                        rc = dly_corr_ttl.Find( L => L.dly_corr_ttlID.Equals( value ) ).FirstOrDefault( );
                        Emptydly_corr_ttlMember = rc;
                    }
                }
                else
                {
                    rc = dly_corr_ttl.Find( L => L.dly_corr_ttlID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<dly_corr_ttl> Find(Expression<Func<dly_corr_ttl, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<dly_corr_ttl> Find(Expression<Func<dly_corr_ttl, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<dly_corr_ttl> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<dly_corr_ttl> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<dly_corr_ttl> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<dly_corr_ttl> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<dly_corr_ttl> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<dly_corr_ttl> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "dly_corr_ttlID";
        }

        public object KeyValue()
        {
            return this.dly_corr_ttlID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.store_id )
//			{
//				rc = this.store_id.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is dly_corr_ttl)
            {
                dly_corr_ttl compare=(dly_corr_ttl)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.dly_corr_ttlID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.store_id.ToString();
        }

        public string DescriptorColumn() 
        {
            return "store_id";
        }

        public static string GetKeyColumn()
        {
            return "dly_corr_ttlID";
        }        

        public static string GetDescriptorColumn()
        {
            return "store_id";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.dly_corr_ttlID;
            }
            set
            {
                m_Internal.dly_corr_ttlID = value;
            }
        }


//        string _store_id;
        [LocalData]
        public string store_id
        {
            get { return m_Internal.store_id; }
            set
            {
                if(m_Internal.store_id!=value){
                    m_Internal.store_id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="store_id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _rvc_num;
        [LocalData]
        public int? rvc_num
        {
            get { return m_Internal.rvc_num; }
            set
            {
                if(m_Internal.rvc_num!=value){
                    m_Internal.rvc_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="rvc_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _rvc_name;
        [LocalData]
        public string rvc_name
        {
            get { return m_Internal.rvc_name; }
            set
            {
                if(m_Internal.rvc_name!=value){
                    m_Internal.rvc_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="rvc_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _emp_num;
        [LocalData]
        public int? emp_num
        {
            get { return m_Internal.emp_num; }
            set
            {
                if(m_Internal.emp_num!=value){
                    m_Internal.emp_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="emp_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _emp_last_name;
        [LocalData]
        public string emp_last_name
        {
            get { return m_Internal.emp_last_name; }
            set
            {
                if(m_Internal.emp_last_name!=value){
                    m_Internal.emp_last_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="emp_last_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _emp_first_name;
        [LocalData]
        public string emp_first_name
        {
            get { return m_Internal.emp_first_name; }
            set
            {
                if(m_Internal.emp_first_name!=value){
                    m_Internal.emp_first_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="emp_first_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _emp_check_name;
        [LocalData]
        public string emp_check_name
        {
            get { return m_Internal.emp_check_name; }
            set
            {
                if(m_Internal.emp_check_name!=value){
                    m_Internal.emp_check_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="emp_check_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _man_num;
        [LocalData]
        public int? man_num
        {
            get { return m_Internal.man_num; }
            set
            {
                if(m_Internal.man_num!=value){
                    m_Internal.man_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="man_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _man_last_name;
        [LocalData]
        public string man_last_name
        {
            get { return m_Internal.man_last_name; }
            set
            {
                if(m_Internal.man_last_name!=value){
                    m_Internal.man_last_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="man_last_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _man_first_name;
        [LocalData]
        public string man_first_name
        {
            get { return m_Internal.man_first_name; }
            set
            {
                if(m_Internal.man_first_name!=value){
                    m_Internal.man_first_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="man_first_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _man_check_name;
        [LocalData]
        public string man_check_name
        {
            get { return m_Internal.man_check_name; }
            set
            {
                if(m_Internal.man_check_name!=value){
                    m_Internal.man_check_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="man_check_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _open_datetime;
        [LocalData]
        public DateTime? open_datetime
        {
            get { return m_Internal.open_datetime; }
            set
            {
                if(m_Internal.open_datetime!=value){
                    m_Internal.open_datetime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="open_datetime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _close_datetime;
        [LocalData]
        public DateTime? close_datetime
        {
            get { return m_Internal.close_datetime; }
            set
            {
                if(m_Internal.close_datetime!=value){
                    m_Internal.close_datetime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="close_datetime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _trans_datetime;
        [LocalData]
        public DateTime? trans_datetime
        {
            get { return m_Internal.trans_datetime; }
            set
            {
                if(m_Internal.trans_datetime!=value){
                    m_Internal.trans_datetime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="trans_datetime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ob_item_corr;
        [LocalData]
        public string ob_item_corr
        {
            get { return m_Internal.ob_item_corr; }
            set
            {
                if(m_Internal.ob_item_corr!=value){
                    m_Internal.ob_item_corr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_item_corr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ob_item_rtn;
        [LocalData]
        public string ob_item_rtn
        {
            get { return m_Internal.ob_item_rtn; }
            set
            {
                if(m_Internal.ob_item_rtn!=value){
                    m_Internal.ob_item_rtn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_item_rtn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _art_num;
        [LocalData]
        public int? art_num
        {
            get { return m_Internal.art_num; }
            set
            {
                if(m_Internal.art_num!=value){
                    m_Internal.art_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="art_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _art_name1;
        [LocalData]
        public string art_name1
        {
            get { return m_Internal.art_name1; }
            set
            {
                if(m_Internal.art_name1!=value){
                    m_Internal.art_name1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="art_name1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _art_name2;
        [LocalData]
        public string art_name2
        {
            get { return m_Internal.art_name2; }
            set
            {
                if(m_Internal.art_name2!=value){
                    m_Internal.art_name2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="art_name2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _cnt;
        [LocalData]
        public int? cnt
        {
            get { return m_Internal.cnt; }
            set
            {
                if(m_Internal.cnt!=value){
                    m_Internal.cnt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cnt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _ttl;
        [LocalData]
        public decimal? ttl
        {
            get { return m_Internal.ttl; }
            set
            {
                if(m_Internal.ttl!=value){
                    m_Internal.ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _sub_ttl;
        [LocalData]
        public decimal? sub_ttl
        {
            get { return m_Internal.sub_ttl; }
            set
            {
                if(m_Internal.sub_ttl!=value){
                    m_Internal.sub_ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="sub_ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _fact_num;
        [LocalData]
        public int? fact_num
        {
            get { return m_Internal.fact_num; }
            set
            {
                if(m_Internal.fact_num!=value){
                    m_Internal.fact_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="fact_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _num_dtl;
        [LocalData]
        public int? num_dtl
        {
            get { return m_Internal.num_dtl; }
            set
            {
                if(m_Internal.num_dtl!=value){
                    m_Internal.num_dtl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="num_dtl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _covers;
        [LocalData]
        public int? covers
        {
            get { return m_Internal.covers; }
            set
            {
                if(m_Internal.covers!=value){
                    m_Internal.covers=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="covers");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _reason_num;
        [LocalData]
        public string reason_num
        {
            get { return m_Internal.reason_num; }
            set
            {
                if(m_Internal.reason_num!=value){
                    m_Internal.reason_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="reason_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _reason_name;
        [LocalData]
        public string reason_name
        {
            get { return m_Internal.reason_name; }
            set
            {
                if(m_Internal.reason_name!=value){
                    m_Internal.reason_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="reason_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _business_date;
        [LocalData]
        public DateTime? business_date
        {
            get { return m_Internal.business_date; }
            set
            {
                if(m_Internal.business_date!=value){
                    m_Internal.business_date=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="business_date");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _trans_seq;
        [LocalData]
        public int? trans_seq
        {
            get { return m_Internal.trans_seq; }
            set
            {
                if(m_Internal.trans_seq!=value){
                    m_Internal.trans_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="trans_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _dtl_seq;
        [LocalData]
        public int? dtl_seq
        {
            get { return m_Internal.dtl_seq; }
            set
            {
                if(m_Internal.dtl_seq!=value){
                    m_Internal.dtl_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="dtl_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _sp_error;
        [LocalData]
        public int? sp_error
        {
            get { return m_Internal.sp_error; }
            set
            {
                if(m_Internal.sp_error!=value){
                    m_Internal.sp_error=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="sp_error");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _dly_corr_ttlID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid dly_corr_ttlID
        {
            get { return m_Internal.dly_corr_ttlID; }
            set
            {
                if(m_Internal.dly_corr_ttlID!=value){
                    m_Internal.dly_corr_ttlID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="dly_corr_ttlID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<dly_corr_ttl, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface Idly_discount_ttl : IWCFDataElement
    {
        
        string store_id { get; set; }
        
        int? rvc_num { get; set; }
        
        string rvc_name { get; set; }
        
        int? emp_num { get; set; }
        
        string emp_last_name { get; set; }
        
        string emp_first_name { get; set; }
        
        string emp_check_name { get; set; }
        
        int? man_num { get; set; }
        
        string man_last_name { get; set; }
        
        string man_first_name { get; set; }
        
        string man_check_name { get; set; }
        
        DateTime? open_datetime { get; set; }
        
        DateTime? close_datetime { get; set; }
        
        DateTime? trans_datetime { get; set; }
        
        int? disc_num { get; set; }
        
        string disc_name { get; set; }
        
        string ob_item_disc { get; set; }
        
        decimal? amount { get; set; }
        
        decimal? percentage { get; set; }
        
        int? art_num { get; set; }
        
        string art_name1 { get; set; }
        
        string art_name2 { get; set; }
        
        int? cnt { get; set; }
        
        decimal? ttl { get; set; }
        
        decimal? sub_ttl { get; set; }
        
        int? fact_num { get; set; }
        
        int? num_dtl { get; set; }
        
        int? covers { get; set; }
        
        string reason_num { get; set; }
        
        string reason_name { get; set; }
        
        DateTime? business_date { get; set; }
        
        int? trans_seq { get; set; }
        
        int? dtl_seq { get; set; }
        
        int? sp_error { get; set; }
        
        Guid dly_discount_ttlID { get; set; }
        
        string DataSource { get; set; }

        void Copy( Idly_discount_ttl _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class Datadly_discount_ttl : Idly_discount_ttl
    {
        [DataMember]
        public string store_id { get; set; }
        [DataMember]
        public int? rvc_num { get; set; }
        [DataMember]
        public string rvc_name { get; set; }
        [DataMember]
        public int? emp_num { get; set; }
        [DataMember]
        public string emp_last_name { get; set; }
        [DataMember]
        public string emp_first_name { get; set; }
        [DataMember]
        public string emp_check_name { get; set; }
        [DataMember]
        public int? man_num { get; set; }
        [DataMember]
        public string man_last_name { get; set; }
        [DataMember]
        public string man_first_name { get; set; }
        [DataMember]
        public string man_check_name { get; set; }
        [DataMember]
        public DateTime? open_datetime { get; set; }
        [DataMember]
        public DateTime? close_datetime { get; set; }
        [DataMember]
        public DateTime? trans_datetime { get; set; }
        [DataMember]
        public int? disc_num { get; set; }
        [DataMember]
        public string disc_name { get; set; }
        [DataMember]
        public string ob_item_disc { get; set; }
        [DataMember]
        public decimal? amount { get; set; }
        [DataMember]
        public decimal? percentage { get; set; }
        [DataMember]
        public int? art_num { get; set; }
        [DataMember]
        public string art_name1 { get; set; }
        [DataMember]
        public string art_name2 { get; set; }
        [DataMember]
        public int? cnt { get; set; }
        [DataMember]
        public decimal? ttl { get; set; }
        [DataMember]
        public decimal? sub_ttl { get; set; }
        [DataMember]
        public int? fact_num { get; set; }
        [DataMember]
        public int? num_dtl { get; set; }
        [DataMember]
        public int? covers { get; set; }
        [DataMember]
        public string reason_num { get; set; }
        [DataMember]
        public string reason_name { get; set; }
        [DataMember]
        public DateTime? business_date { get; set; }
        [DataMember]
        public int? trans_seq { get; set; }
        [DataMember]
        public int? dtl_seq { get; set; }
        [DataMember]
        public int? sp_error { get; set; }
        [DataMember]
        public Guid dly_discount_ttlID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( Idly_discount_ttl _Item )
        {
             store_id = _Item.store_id;			
             rvc_num = _Item.rvc_num;			
             rvc_name = _Item.rvc_name;			
             emp_num = _Item.emp_num;			
             emp_last_name = _Item.emp_last_name;			
             emp_first_name = _Item.emp_first_name;			
             emp_check_name = _Item.emp_check_name;			
             man_num = _Item.man_num;			
             man_last_name = _Item.man_last_name;			
             man_first_name = _Item.man_first_name;			
             man_check_name = _Item.man_check_name;			
             open_datetime = _Item.open_datetime;			
             close_datetime = _Item.close_datetime;			
             trans_datetime = _Item.trans_datetime;			
             disc_num = _Item.disc_num;			
             disc_name = _Item.disc_name;			
             ob_item_disc = _Item.ob_item_disc;			
             amount = _Item.amount;			
             percentage = _Item.percentage;			
             art_num = _Item.art_num;			
             art_name1 = _Item.art_name1;			
             art_name2 = _Item.art_name2;			
             cnt = _Item.cnt;			
             ttl = _Item.ttl;			
             sub_ttl = _Item.sub_ttl;			
             fact_num = _Item.fact_num;			
             num_dtl = _Item.num_dtl;			
             covers = _Item.covers;			
             reason_num = _Item.reason_num;			
             reason_name = _Item.reason_name;			
             business_date = _Item.business_date;			
             trans_seq = _Item.trans_seq;			
             dtl_seq = _Item.dtl_seq;			
             sp_error = _Item.sp_error;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new dly_discount_ttl( this );
        }
    }


    /// <summary>
    /// A class which represents the dly_discount_ttl table in the RenAix Database.
    /// </summary>
    public partial class dly_discount_ttl : BaseDataObject<Datadly_discount_ttl>, IActiveRecord, ICallOnCreated, Idly_discount_ttl
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<dly_discount_ttl> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<dly_discount_ttl>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<dly_discount_ttl> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(dly_discount_ttl item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                dly_discount_ttl item=new dly_discount_ttl();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<dly_discount_ttl> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public dly_discount_ttl()
        {
            m_Internal = new Datadly_discount_ttl();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.dly_discount_ttlID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public dly_discount_ttl( bool _CallOnCreated )
        {
            m_Internal = new Datadly_discount_ttl();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public dly_discount_ttl(string connectionString, string providerName) 
        {
            m_Internal = new Datadly_discount_ttl();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.dly_discount_ttlID = Guid.NewGuid( );     
        }

        public dly_discount_ttl( Idly_discount_ttl _Item )
        {
            m_Internal = new Datadly_discount_ttl();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public dly_discount_ttl( Datadly_discount_ttl _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( Idly_discount_ttl _Item )
        {
            m_Internal.store_id = _Item.store_id;			
            m_Internal.rvc_num = _Item.rvc_num;			
            m_Internal.rvc_name = _Item.rvc_name;			
            m_Internal.emp_num = _Item.emp_num;			
            m_Internal.emp_last_name = _Item.emp_last_name;			
            m_Internal.emp_first_name = _Item.emp_first_name;			
            m_Internal.emp_check_name = _Item.emp_check_name;			
            m_Internal.man_num = _Item.man_num;			
            m_Internal.man_last_name = _Item.man_last_name;			
            m_Internal.man_first_name = _Item.man_first_name;			
            m_Internal.man_check_name = _Item.man_check_name;			
            m_Internal.open_datetime = _Item.open_datetime;			
            m_Internal.close_datetime = _Item.close_datetime;			
            m_Internal.trans_datetime = _Item.trans_datetime;			
            m_Internal.disc_num = _Item.disc_num;			
            m_Internal.disc_name = _Item.disc_name;			
            m_Internal.ob_item_disc = _Item.ob_item_disc;			
            m_Internal.amount = _Item.amount;			
            m_Internal.percentage = _Item.percentage;			
            m_Internal.art_num = _Item.art_num;			
            m_Internal.art_name1 = _Item.art_name1;			
            m_Internal.art_name2 = _Item.art_name2;			
            m_Internal.cnt = _Item.cnt;			
            m_Internal.ttl = _Item.ttl;			
            m_Internal.sub_ttl = _Item.sub_ttl;			
            m_Internal.fact_num = _Item.fact_num;			
            m_Internal.num_dtl = _Item.num_dtl;			
            m_Internal.covers = _Item.covers;			
            m_Internal.reason_num = _Item.reason_num;			
            m_Internal.reason_name = _Item.reason_name;			
            m_Internal.business_date = _Item.business_date;			
            m_Internal.trans_seq = _Item.trans_seq;			
            m_Internal.dtl_seq = _Item.dtl_seq;			
            m_Internal.sp_error = _Item.sp_error;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new dly_discount_ttl( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.dly_discount_ttlID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                dly_discount_ttl.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<dly_discount_ttl>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public dly_discount_ttl(Expression<Func<dly_discount_ttl, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<dly_discount_ttl> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<dly_discount_ttl> _repo;
            
            if(db.TestMode)
            {
                dly_discount_ttl.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<dly_discount_ttl>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<dly_discount_ttl> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static dly_discount_ttl SingleOrDefault(Expression<Func<dly_discount_ttl, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static dly_discount_ttl SingleOrDefault(Expression<Func<dly_discount_ttl, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<dly_discount_ttl> repo = GetRepo(connectionString,providerName);
            dly_discount_ttl single = repo.SingleOrDefault<dly_discount_ttl>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<dly_discount_ttl, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<dly_discount_ttl, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptydly_discount_ttlLoaded = false;
        protected static dly_discount_ttl Emptydly_discount_ttlMember = null;

        public static dly_discount_ttl GetByID(Guid? value) 
        {
            dly_discount_ttl rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static dly_discount_ttl GetByID(Guid value) 
        {
            dly_discount_ttl rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptydly_discount_ttlLoaded )
                    {
                        rc = Emptydly_discount_ttlMember;
                    }
                    else
                    {
                        IsEmptydly_discount_ttlLoaded = true;
                        rc = dly_discount_ttl.Find( L => L.dly_discount_ttlID.Equals( value ) ).FirstOrDefault( );
                        Emptydly_discount_ttlMember = rc;
                    }
                }
                else
                {
                    rc = dly_discount_ttl.Find( L => L.dly_discount_ttlID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<dly_discount_ttl> Find(Expression<Func<dly_discount_ttl, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<dly_discount_ttl> Find(Expression<Func<dly_discount_ttl, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<dly_discount_ttl> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<dly_discount_ttl> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<dly_discount_ttl> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<dly_discount_ttl> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<dly_discount_ttl> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<dly_discount_ttl> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "dly_discount_ttlID";
        }

        public object KeyValue()
        {
            return this.dly_discount_ttlID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.store_id )
//			{
//				rc = this.store_id.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is dly_discount_ttl)
            {
                dly_discount_ttl compare=(dly_discount_ttl)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.dly_discount_ttlID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.store_id.ToString();
        }

        public string DescriptorColumn() 
        {
            return "store_id";
        }

        public static string GetKeyColumn()
        {
            return "dly_discount_ttlID";
        }        

        public static string GetDescriptorColumn()
        {
            return "store_id";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.dly_discount_ttlID;
            }
            set
            {
                m_Internal.dly_discount_ttlID = value;
            }
        }


//        string _store_id;
        [LocalData]
        public string store_id
        {
            get { return m_Internal.store_id; }
            set
            {
                if(m_Internal.store_id!=value){
                    m_Internal.store_id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="store_id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _rvc_num;
        [LocalData]
        public int? rvc_num
        {
            get { return m_Internal.rvc_num; }
            set
            {
                if(m_Internal.rvc_num!=value){
                    m_Internal.rvc_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="rvc_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _rvc_name;
        [LocalData]
        public string rvc_name
        {
            get { return m_Internal.rvc_name; }
            set
            {
                if(m_Internal.rvc_name!=value){
                    m_Internal.rvc_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="rvc_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _emp_num;
        [LocalData]
        public int? emp_num
        {
            get { return m_Internal.emp_num; }
            set
            {
                if(m_Internal.emp_num!=value){
                    m_Internal.emp_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="emp_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _emp_last_name;
        [LocalData]
        public string emp_last_name
        {
            get { return m_Internal.emp_last_name; }
            set
            {
                if(m_Internal.emp_last_name!=value){
                    m_Internal.emp_last_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="emp_last_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _emp_first_name;
        [LocalData]
        public string emp_first_name
        {
            get { return m_Internal.emp_first_name; }
            set
            {
                if(m_Internal.emp_first_name!=value){
                    m_Internal.emp_first_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="emp_first_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _emp_check_name;
        [LocalData]
        public string emp_check_name
        {
            get { return m_Internal.emp_check_name; }
            set
            {
                if(m_Internal.emp_check_name!=value){
                    m_Internal.emp_check_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="emp_check_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _man_num;
        [LocalData]
        public int? man_num
        {
            get { return m_Internal.man_num; }
            set
            {
                if(m_Internal.man_num!=value){
                    m_Internal.man_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="man_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _man_last_name;
        [LocalData]
        public string man_last_name
        {
            get { return m_Internal.man_last_name; }
            set
            {
                if(m_Internal.man_last_name!=value){
                    m_Internal.man_last_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="man_last_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _man_first_name;
        [LocalData]
        public string man_first_name
        {
            get { return m_Internal.man_first_name; }
            set
            {
                if(m_Internal.man_first_name!=value){
                    m_Internal.man_first_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="man_first_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _man_check_name;
        [LocalData]
        public string man_check_name
        {
            get { return m_Internal.man_check_name; }
            set
            {
                if(m_Internal.man_check_name!=value){
                    m_Internal.man_check_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="man_check_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _open_datetime;
        [LocalData]
        public DateTime? open_datetime
        {
            get { return m_Internal.open_datetime; }
            set
            {
                if(m_Internal.open_datetime!=value){
                    m_Internal.open_datetime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="open_datetime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _close_datetime;
        [LocalData]
        public DateTime? close_datetime
        {
            get { return m_Internal.close_datetime; }
            set
            {
                if(m_Internal.close_datetime!=value){
                    m_Internal.close_datetime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="close_datetime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _trans_datetime;
        [LocalData]
        public DateTime? trans_datetime
        {
            get { return m_Internal.trans_datetime; }
            set
            {
                if(m_Internal.trans_datetime!=value){
                    m_Internal.trans_datetime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="trans_datetime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _disc_num;
        [LocalData]
        public int? disc_num
        {
            get { return m_Internal.disc_num; }
            set
            {
                if(m_Internal.disc_num!=value){
                    m_Internal.disc_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="disc_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _disc_name;
        [LocalData]
        public string disc_name
        {
            get { return m_Internal.disc_name; }
            set
            {
                if(m_Internal.disc_name!=value){
                    m_Internal.disc_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="disc_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ob_item_disc;
        [LocalData]
        public string ob_item_disc
        {
            get { return m_Internal.ob_item_disc; }
            set
            {
                if(m_Internal.ob_item_disc!=value){
                    m_Internal.ob_item_disc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_item_disc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _amount;
        [LocalData]
        public decimal? amount
        {
            get { return m_Internal.amount; }
            set
            {
                if(m_Internal.amount!=value){
                    m_Internal.amount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="amount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _percentage;
        [LocalData]
        public decimal? percentage
        {
            get { return m_Internal.percentage; }
            set
            {
                if(m_Internal.percentage!=value){
                    m_Internal.percentage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="percentage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _art_num;
        [LocalData]
        public int? art_num
        {
            get { return m_Internal.art_num; }
            set
            {
                if(m_Internal.art_num!=value){
                    m_Internal.art_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="art_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _art_name1;
        [LocalData]
        public string art_name1
        {
            get { return m_Internal.art_name1; }
            set
            {
                if(m_Internal.art_name1!=value){
                    m_Internal.art_name1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="art_name1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _art_name2;
        [LocalData]
        public string art_name2
        {
            get { return m_Internal.art_name2; }
            set
            {
                if(m_Internal.art_name2!=value){
                    m_Internal.art_name2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="art_name2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _cnt;
        [LocalData]
        public int? cnt
        {
            get { return m_Internal.cnt; }
            set
            {
                if(m_Internal.cnt!=value){
                    m_Internal.cnt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cnt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _ttl;
        [LocalData]
        public decimal? ttl
        {
            get { return m_Internal.ttl; }
            set
            {
                if(m_Internal.ttl!=value){
                    m_Internal.ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _sub_ttl;
        [LocalData]
        public decimal? sub_ttl
        {
            get { return m_Internal.sub_ttl; }
            set
            {
                if(m_Internal.sub_ttl!=value){
                    m_Internal.sub_ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="sub_ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _fact_num;
        [LocalData]
        public int? fact_num
        {
            get { return m_Internal.fact_num; }
            set
            {
                if(m_Internal.fact_num!=value){
                    m_Internal.fact_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="fact_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _num_dtl;
        [LocalData]
        public int? num_dtl
        {
            get { return m_Internal.num_dtl; }
            set
            {
                if(m_Internal.num_dtl!=value){
                    m_Internal.num_dtl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="num_dtl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _covers;
        [LocalData]
        public int? covers
        {
            get { return m_Internal.covers; }
            set
            {
                if(m_Internal.covers!=value){
                    m_Internal.covers=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="covers");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _reason_num;
        [LocalData]
        public string reason_num
        {
            get { return m_Internal.reason_num; }
            set
            {
                if(m_Internal.reason_num!=value){
                    m_Internal.reason_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="reason_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _reason_name;
        [LocalData]
        public string reason_name
        {
            get { return m_Internal.reason_name; }
            set
            {
                if(m_Internal.reason_name!=value){
                    m_Internal.reason_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="reason_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _business_date;
        [LocalData]
        public DateTime? business_date
        {
            get { return m_Internal.business_date; }
            set
            {
                if(m_Internal.business_date!=value){
                    m_Internal.business_date=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="business_date");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _trans_seq;
        [LocalData]
        public int? trans_seq
        {
            get { return m_Internal.trans_seq; }
            set
            {
                if(m_Internal.trans_seq!=value){
                    m_Internal.trans_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="trans_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _dtl_seq;
        [LocalData]
        public int? dtl_seq
        {
            get { return m_Internal.dtl_seq; }
            set
            {
                if(m_Internal.dtl_seq!=value){
                    m_Internal.dtl_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="dtl_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _sp_error;
        [LocalData]
        public int? sp_error
        {
            get { return m_Internal.sp_error; }
            set
            {
                if(m_Internal.sp_error!=value){
                    m_Internal.sp_error=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="sp_error");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _dly_discount_ttlID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid dly_discount_ttlID
        {
            get { return m_Internal.dly_discount_ttlID; }
            set
            {
                if(m_Internal.dly_discount_ttlID!=value){
                    m_Internal.dly_discount_ttlID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="dly_discount_ttlID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<dly_discount_ttl, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface Imaj_grp_def : IWCFDataElement
    {
        
        string maj_grp_seq { get; set; }
        
        int? obj_num { get; set; }
        
        int? cat { get; set; }
        
        string name { get; set; }
        
        int? cos_grp_seq { get; set; }
        
        string acct_grp_seq { get; set; }
        
        int? last_updated_by { get; set; }
        
        string last_updated_date { get; set; }
        
        string multi_user_access_seq { get; set; }
        
        Guid maj_grp_defID { get; set; }
        
        string DataSource { get; set; }

        void Copy( Imaj_grp_def _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class Datamaj_grp_def : Imaj_grp_def
    {
        [DataMember]
        public string maj_grp_seq { get; set; }
        [DataMember]
        public int? obj_num { get; set; }
        [DataMember]
        public int? cat { get; set; }
        [DataMember]
        public string name { get; set; }
        [DataMember]
        public int? cos_grp_seq { get; set; }
        [DataMember]
        public string acct_grp_seq { get; set; }
        [DataMember]
        public int? last_updated_by { get; set; }
        [DataMember]
        public string last_updated_date { get; set; }
        [DataMember]
        public string multi_user_access_seq { get; set; }
        [DataMember]
        public Guid maj_grp_defID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( Imaj_grp_def _Item )
        {
             maj_grp_seq = _Item.maj_grp_seq;			
             obj_num = _Item.obj_num;			
             cat = _Item.cat;			
             name = _Item.name;			
             cos_grp_seq = _Item.cos_grp_seq;			
             acct_grp_seq = _Item.acct_grp_seq;			
             last_updated_by = _Item.last_updated_by;			
             last_updated_date = _Item.last_updated_date;			
             multi_user_access_seq = _Item.multi_user_access_seq;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new maj_grp_def( this );
        }
    }


    /// <summary>
    /// A class which represents the maj_grp_def table in the RenAix Database.
    /// </summary>
    public partial class maj_grp_def : BaseDataObject<Datamaj_grp_def>, IActiveRecord, ICallOnCreated, Imaj_grp_def
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<maj_grp_def> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<maj_grp_def>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<maj_grp_def> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(maj_grp_def item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                maj_grp_def item=new maj_grp_def();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<maj_grp_def> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public maj_grp_def()
        {
            m_Internal = new Datamaj_grp_def();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.maj_grp_defID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public maj_grp_def( bool _CallOnCreated )
        {
            m_Internal = new Datamaj_grp_def();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public maj_grp_def(string connectionString, string providerName) 
        {
            m_Internal = new Datamaj_grp_def();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.maj_grp_defID = Guid.NewGuid( );     
        }

        public maj_grp_def( Imaj_grp_def _Item )
        {
            m_Internal = new Datamaj_grp_def();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public maj_grp_def( Datamaj_grp_def _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( Imaj_grp_def _Item )
        {
            m_Internal.maj_grp_seq = _Item.maj_grp_seq;			
            m_Internal.obj_num = _Item.obj_num;			
            m_Internal.cat = _Item.cat;			
            m_Internal.name = _Item.name;			
            m_Internal.cos_grp_seq = _Item.cos_grp_seq;			
            m_Internal.acct_grp_seq = _Item.acct_grp_seq;			
            m_Internal.last_updated_by = _Item.last_updated_by;			
            m_Internal.last_updated_date = _Item.last_updated_date;			
            m_Internal.multi_user_access_seq = _Item.multi_user_access_seq;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new maj_grp_def( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.maj_grp_defID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                maj_grp_def.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<maj_grp_def>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public maj_grp_def(Expression<Func<maj_grp_def, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<maj_grp_def> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<maj_grp_def> _repo;
            
            if(db.TestMode)
            {
                maj_grp_def.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<maj_grp_def>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<maj_grp_def> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static maj_grp_def SingleOrDefault(Expression<Func<maj_grp_def, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static maj_grp_def SingleOrDefault(Expression<Func<maj_grp_def, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<maj_grp_def> repo = GetRepo(connectionString,providerName);
            maj_grp_def single = repo.SingleOrDefault<maj_grp_def>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<maj_grp_def, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<maj_grp_def, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptymaj_grp_defLoaded = false;
        protected static maj_grp_def Emptymaj_grp_defMember = null;

        public static maj_grp_def GetByID(Guid? value) 
        {
            maj_grp_def rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static maj_grp_def GetByID(Guid value) 
        {
            maj_grp_def rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptymaj_grp_defLoaded )
                    {
                        rc = Emptymaj_grp_defMember;
                    }
                    else
                    {
                        IsEmptymaj_grp_defLoaded = true;
                        rc = maj_grp_def.Find( L => L.maj_grp_defID.Equals( value ) ).FirstOrDefault( );
                        Emptymaj_grp_defMember = rc;
                    }
                }
                else
                {
                    rc = maj_grp_def.Find( L => L.maj_grp_defID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<maj_grp_def> Find(Expression<Func<maj_grp_def, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<maj_grp_def> Find(Expression<Func<maj_grp_def, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<maj_grp_def> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<maj_grp_def> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<maj_grp_def> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<maj_grp_def> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<maj_grp_def> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<maj_grp_def> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "maj_grp_defID";
        }

        public object KeyValue()
        {
            return this.maj_grp_defID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.maj_grp_seq )
//			{
//				rc = this.maj_grp_seq.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is maj_grp_def)
            {
                maj_grp_def compare=(maj_grp_def)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.maj_grp_defID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.maj_grp_seq.ToString();
        }

        public string DescriptorColumn() 
        {
            return "maj_grp_seq";
        }

        public static string GetKeyColumn()
        {
            return "maj_grp_defID";
        }        

        public static string GetDescriptorColumn()
        {
            return "maj_grp_seq";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.maj_grp_defID;
            }
            set
            {
                m_Internal.maj_grp_defID = value;
            }
        }


//        string _maj_grp_seq;
        [LocalData]
        public string maj_grp_seq
        {
            get { return m_Internal.maj_grp_seq; }
            set
            {
                if(m_Internal.maj_grp_seq!=value){
                    m_Internal.maj_grp_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="maj_grp_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _obj_num;
        [LocalData]
        public int? obj_num
        {
            get { return m_Internal.obj_num; }
            set
            {
                if(m_Internal.obj_num!=value){
                    m_Internal.obj_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="obj_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _cat;
        [LocalData]
        public int? cat
        {
            get { return m_Internal.cat; }
            set
            {
                if(m_Internal.cat!=value){
                    m_Internal.cat=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cat");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _name;
        [LocalData]
        public string name
        {
            get { return m_Internal.name; }
            set
            {
                if(m_Internal.name!=value){
                    m_Internal.name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _cos_grp_seq;
        [LocalData]
        public int? cos_grp_seq
        {
            get { return m_Internal.cos_grp_seq; }
            set
            {
                if(m_Internal.cos_grp_seq!=value){
                    m_Internal.cos_grp_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cos_grp_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _acct_grp_seq;
        [LocalData]
        public string acct_grp_seq
        {
            get { return m_Internal.acct_grp_seq; }
            set
            {
                if(m_Internal.acct_grp_seq!=value){
                    m_Internal.acct_grp_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="acct_grp_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _last_updated_by;
        [LocalData]
        public int? last_updated_by
        {
            get { return m_Internal.last_updated_by; }
            set
            {
                if(m_Internal.last_updated_by!=value){
                    m_Internal.last_updated_by=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="last_updated_by");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _last_updated_date;
        [LocalData]
        public string last_updated_date
        {
            get { return m_Internal.last_updated_date; }
            set
            {
                if(m_Internal.last_updated_date!=value){
                    m_Internal.last_updated_date=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="last_updated_date");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _multi_user_access_seq;
        [LocalData]
        public string multi_user_access_seq
        {
            get { return m_Internal.multi_user_access_seq; }
            set
            {
                if(m_Internal.multi_user_access_seq!=value){
                    m_Internal.multi_user_access_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="multi_user_access_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _maj_grp_defID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid maj_grp_defID
        {
            get { return m_Internal.maj_grp_defID; }
            set
            {
                if(m_Internal.maj_grp_defID!=value){
                    m_Internal.maj_grp_defID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="maj_grp_defID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<maj_grp_def, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface Imfd_check_dtl : IWCFDataElement
    {
        
        string Imported { get; set; }
        
        DateTime? Business_Date { get; set; }
        
        int? Store_ID { get; set; }
        
        int? Store_Obj { get; set; }
        
        string Store_Name { get; set; }
        
        int? RVC_Seq { get; set; }
        
        int? RVC_Obj { get; set; }
        
        int? Check_Num { get; set; }
        
        int? Check_Seq { get; set; }
        
        int? Trans_Seq { get; set; }
        
        int? Dtl_Seq { get; set; }
        
        string Dtl_Typ { get; set; }
        
        string Dtl_Trans_Typ { get; set; }
        
        int? Dtl_Typ_Seq { get; set; }
        
        int? Dtl_Typ_Obj { get; set; }
        
        string Dtl_Typ_Name_1 { get; set; }
        
        string Dtl_Typ_Name_2 { get; set; }
        
        int? Dtl_Typ_Cnt { get; set; }
        
        decimal? Dtl_Typ_Ttl { get; set; }
        
        string Dtl_Typ_Ref_1 { get; set; }
        
        string Dtl_Typ_Ref_2 { get; set; }
        
        int? Dtl_Mi_SalesItmzr { get; set; }
        
        int? Dtl_Mi_DscItmzr { get; set; }
        
        int? Dtl_Mi_SvcItmzr { get; set; }
        
        int? Dtl_Mi_PriceLevel { get; set; }
        
        int? Dtl_Mi_Maj_Group_Seq { get; set; }
        
        int? Dtl_Mi_Maj_Group_Obj { get; set; }
        
        string Dtl_Mi_Maj_Group_Name { get; set; }
        
        int? Dtl_Mi_Fam_Group_Seq { get; set; }
        
        int? Dtl_Mi_Fam_Group_Obj { get; set; }
        
        string Dtl_Mi_Fam_Group_Name { get; set; }
        
        int? Dtl_Mi_Tax { get; set; }
        
        decimal? Dtl_Mi_TaxPcnt { get; set; }
        
        decimal? Dtl_Mi_Netto_Ttl { get; set; }
        
        string Dtl_Ref_Spec1 { get; set; }
        
        string Dtl_Ref_Spec2 { get; set; }
        
        string Rvc_Name { get; set; }
        
        DateTime? Trans_Date { get; set; }
        
        int? Order_Type { get; set; }
        
        int? Period_seq { get; set; }
        
        int? Dtl_Dsc_Cnt { get; set; }
        
        decimal? Dtl_Dsc_Ttl { get; set; }
        
        decimal? Dtl_Dsc_Netto_Ttl { get; set; }
        
        string Curr { get; set; }
        
        string M_Typ { get; set; }
        
        int? Combo_Idx { get; set; }
        
        string Tax_Typ_1 { get; set; }
        
        decimal? VAT_Amount_1 { get; set; }
        
        string Tax_Typ_2 { get; set; }
        
        decimal? VAT_Amount_2 { get; set; }
        
        string Tax_Typ_3 { get; set; }
        
        decimal? VAT_Amount_3 { get; set; }
        
        string Tax_Typ_4 { get; set; }
        
        decimal? VAT_Amount_4 { get; set; }
        
        string Tax_Typ_5 { get; set; }
        
        decimal? VAT_Amount_5 { get; set; }
        
        string Tax_Typ_6 { get; set; }
        
        decimal? VAT_Amount_6 { get; set; }
        
        string Tax_Typ_7 { get; set; }
        
        decimal? VAT_Amount_7 { get; set; }
        
        string Tax_Typ_8 { get; set; }
        
        decimal? VAT_Amount_8 { get; set; }
        
        int? Dtl_Mi_Dsc_Seq { get; set; }
        
        decimal? M_Item_Weight { get; set; }
        
        int? Dtl_Id { get; set; }
        
        int? sw1 { get; set; }
        
        int? Trans_Srv_Period_Seq { get; set; }
        
        int? Trans_Emp_Seq { get; set; }
        
        decimal? vat { get; set; }
        
        decimal? vat_ex { get; set; }
        
        int? Seq { get; set; }
        
        int? Uws_Obj { get; set; }
        
        Guid mfd_check_dtlID { get; set; }
        
        string DataSource { get; set; }

        void Copy( Imfd_check_dtl _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class Datamfd_check_dtl : Imfd_check_dtl
    {
        [DataMember]
        public string Imported { get; set; }
        [DataMember]
        public DateTime? Business_Date { get; set; }
        [DataMember]
        public int? Store_ID { get; set; }
        [DataMember]
        public int? Store_Obj { get; set; }
        [DataMember]
        public string Store_Name { get; set; }
        [DataMember]
        public int? RVC_Seq { get; set; }
        [DataMember]
        public int? RVC_Obj { get; set; }
        [DataMember]
        public int? Check_Num { get; set; }
        [DataMember]
        public int? Check_Seq { get; set; }
        [DataMember]
        public int? Trans_Seq { get; set; }
        [DataMember]
        public int? Dtl_Seq { get; set; }
        [DataMember]
        public string Dtl_Typ { get; set; }
        [DataMember]
        public string Dtl_Trans_Typ { get; set; }
        [DataMember]
        public int? Dtl_Typ_Seq { get; set; }
        [DataMember]
        public int? Dtl_Typ_Obj { get; set; }
        [DataMember]
        public string Dtl_Typ_Name_1 { get; set; }
        [DataMember]
        public string Dtl_Typ_Name_2 { get; set; }
        [DataMember]
        public int? Dtl_Typ_Cnt { get; set; }
        [DataMember]
        public decimal? Dtl_Typ_Ttl { get; set; }
        [DataMember]
        public string Dtl_Typ_Ref_1 { get; set; }
        [DataMember]
        public string Dtl_Typ_Ref_2 { get; set; }
        [DataMember]
        public int? Dtl_Mi_SalesItmzr { get; set; }
        [DataMember]
        public int? Dtl_Mi_DscItmzr { get; set; }
        [DataMember]
        public int? Dtl_Mi_SvcItmzr { get; set; }
        [DataMember]
        public int? Dtl_Mi_PriceLevel { get; set; }
        [DataMember]
        public int? Dtl_Mi_Maj_Group_Seq { get; set; }
        [DataMember]
        public int? Dtl_Mi_Maj_Group_Obj { get; set; }
        [DataMember]
        public string Dtl_Mi_Maj_Group_Name { get; set; }
        [DataMember]
        public int? Dtl_Mi_Fam_Group_Seq { get; set; }
        [DataMember]
        public int? Dtl_Mi_Fam_Group_Obj { get; set; }
        [DataMember]
        public string Dtl_Mi_Fam_Group_Name { get; set; }
        [DataMember]
        public int? Dtl_Mi_Tax { get; set; }
        [DataMember]
        public decimal? Dtl_Mi_TaxPcnt { get; set; }
        [DataMember]
        public decimal? Dtl_Mi_Netto_Ttl { get; set; }
        [DataMember]
        public string Dtl_Ref_Spec1 { get; set; }
        [DataMember]
        public string Dtl_Ref_Spec2 { get; set; }
        [DataMember]
        public string Rvc_Name { get; set; }
        [DataMember]
        public DateTime? Trans_Date { get; set; }
        [DataMember]
        public int? Order_Type { get; set; }
        [DataMember]
        public int? Period_seq { get; set; }
        [DataMember]
        public int? Dtl_Dsc_Cnt { get; set; }
        [DataMember]
        public decimal? Dtl_Dsc_Ttl { get; set; }
        [DataMember]
        public decimal? Dtl_Dsc_Netto_Ttl { get; set; }
        [DataMember]
        public string Curr { get; set; }
        [DataMember]
        public string M_Typ { get; set; }
        [DataMember]
        public int? Combo_Idx { get; set; }
        [DataMember]
        public string Tax_Typ_1 { get; set; }
        [DataMember]
        public decimal? VAT_Amount_1 { get; set; }
        [DataMember]
        public string Tax_Typ_2 { get; set; }
        [DataMember]
        public decimal? VAT_Amount_2 { get; set; }
        [DataMember]
        public string Tax_Typ_3 { get; set; }
        [DataMember]
        public decimal? VAT_Amount_3 { get; set; }
        [DataMember]
        public string Tax_Typ_4 { get; set; }
        [DataMember]
        public decimal? VAT_Amount_4 { get; set; }
        [DataMember]
        public string Tax_Typ_5 { get; set; }
        [DataMember]
        public decimal? VAT_Amount_5 { get; set; }
        [DataMember]
        public string Tax_Typ_6 { get; set; }
        [DataMember]
        public decimal? VAT_Amount_6 { get; set; }
        [DataMember]
        public string Tax_Typ_7 { get; set; }
        [DataMember]
        public decimal? VAT_Amount_7 { get; set; }
        [DataMember]
        public string Tax_Typ_8 { get; set; }
        [DataMember]
        public decimal? VAT_Amount_8 { get; set; }
        [DataMember]
        public int? Dtl_Mi_Dsc_Seq { get; set; }
        [DataMember]
        public decimal? M_Item_Weight { get; set; }
        [DataMember]
        public int? Dtl_Id { get; set; }
        [DataMember]
        public int? sw1 { get; set; }
        [DataMember]
        public int? Trans_Srv_Period_Seq { get; set; }
        [DataMember]
        public int? Trans_Emp_Seq { get; set; }
        [DataMember]
        public decimal? vat { get; set; }
        [DataMember]
        public decimal? vat_ex { get; set; }
        [DataMember]
        public int? Seq { get; set; }
        [DataMember]
        public int? Uws_Obj { get; set; }
        [DataMember]
        public Guid mfd_check_dtlID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( Imfd_check_dtl _Item )
        {
             Imported = _Item.Imported;			
             Business_Date = _Item.Business_Date;			
             Store_ID = _Item.Store_ID;			
             Store_Obj = _Item.Store_Obj;			
             Store_Name = _Item.Store_Name;			
             RVC_Seq = _Item.RVC_Seq;			
             RVC_Obj = _Item.RVC_Obj;			
             Check_Num = _Item.Check_Num;			
             Check_Seq = _Item.Check_Seq;			
             Trans_Seq = _Item.Trans_Seq;			
             Dtl_Seq = _Item.Dtl_Seq;			
             Dtl_Typ = _Item.Dtl_Typ;			
             Dtl_Trans_Typ = _Item.Dtl_Trans_Typ;			
             Dtl_Typ_Seq = _Item.Dtl_Typ_Seq;			
             Dtl_Typ_Obj = _Item.Dtl_Typ_Obj;			
             Dtl_Typ_Name_1 = _Item.Dtl_Typ_Name_1;			
             Dtl_Typ_Name_2 = _Item.Dtl_Typ_Name_2;			
             Dtl_Typ_Cnt = _Item.Dtl_Typ_Cnt;			
             Dtl_Typ_Ttl = _Item.Dtl_Typ_Ttl;			
             Dtl_Typ_Ref_1 = _Item.Dtl_Typ_Ref_1;			
             Dtl_Typ_Ref_2 = _Item.Dtl_Typ_Ref_2;			
             Dtl_Mi_SalesItmzr = _Item.Dtl_Mi_SalesItmzr;			
             Dtl_Mi_DscItmzr = _Item.Dtl_Mi_DscItmzr;			
             Dtl_Mi_SvcItmzr = _Item.Dtl_Mi_SvcItmzr;			
             Dtl_Mi_PriceLevel = _Item.Dtl_Mi_PriceLevel;			
             Dtl_Mi_Maj_Group_Seq = _Item.Dtl_Mi_Maj_Group_Seq;			
             Dtl_Mi_Maj_Group_Obj = _Item.Dtl_Mi_Maj_Group_Obj;			
             Dtl_Mi_Maj_Group_Name = _Item.Dtl_Mi_Maj_Group_Name;			
             Dtl_Mi_Fam_Group_Seq = _Item.Dtl_Mi_Fam_Group_Seq;			
             Dtl_Mi_Fam_Group_Obj = _Item.Dtl_Mi_Fam_Group_Obj;			
             Dtl_Mi_Fam_Group_Name = _Item.Dtl_Mi_Fam_Group_Name;			
             Dtl_Mi_Tax = _Item.Dtl_Mi_Tax;			
             Dtl_Mi_TaxPcnt = _Item.Dtl_Mi_TaxPcnt;			
             Dtl_Mi_Netto_Ttl = _Item.Dtl_Mi_Netto_Ttl;			
             Dtl_Ref_Spec1 = _Item.Dtl_Ref_Spec1;			
             Dtl_Ref_Spec2 = _Item.Dtl_Ref_Spec2;			
             Rvc_Name = _Item.Rvc_Name;			
             Trans_Date = _Item.Trans_Date;			
             Order_Type = _Item.Order_Type;			
             Period_seq = _Item.Period_seq;			
             Dtl_Dsc_Cnt = _Item.Dtl_Dsc_Cnt;			
             Dtl_Dsc_Ttl = _Item.Dtl_Dsc_Ttl;			
             Dtl_Dsc_Netto_Ttl = _Item.Dtl_Dsc_Netto_Ttl;			
             Curr = _Item.Curr;			
             M_Typ = _Item.M_Typ;			
             Combo_Idx = _Item.Combo_Idx;			
             Tax_Typ_1 = _Item.Tax_Typ_1;			
             VAT_Amount_1 = _Item.VAT_Amount_1;			
             Tax_Typ_2 = _Item.Tax_Typ_2;			
             VAT_Amount_2 = _Item.VAT_Amount_2;			
             Tax_Typ_3 = _Item.Tax_Typ_3;			
             VAT_Amount_3 = _Item.VAT_Amount_3;			
             Tax_Typ_4 = _Item.Tax_Typ_4;			
             VAT_Amount_4 = _Item.VAT_Amount_4;			
             Tax_Typ_5 = _Item.Tax_Typ_5;			
             VAT_Amount_5 = _Item.VAT_Amount_5;			
             Tax_Typ_6 = _Item.Tax_Typ_6;			
             VAT_Amount_6 = _Item.VAT_Amount_6;			
             Tax_Typ_7 = _Item.Tax_Typ_7;			
             VAT_Amount_7 = _Item.VAT_Amount_7;			
             Tax_Typ_8 = _Item.Tax_Typ_8;			
             VAT_Amount_8 = _Item.VAT_Amount_8;			
             Dtl_Mi_Dsc_Seq = _Item.Dtl_Mi_Dsc_Seq;			
             M_Item_Weight = _Item.M_Item_Weight;			
             Dtl_Id = _Item.Dtl_Id;			
             sw1 = _Item.sw1;			
             Trans_Srv_Period_Seq = _Item.Trans_Srv_Period_Seq;			
             Trans_Emp_Seq = _Item.Trans_Emp_Seq;			
             vat = _Item.vat;			
             vat_ex = _Item.vat_ex;			
             Seq = _Item.Seq;			
             Uws_Obj = _Item.Uws_Obj;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new mfd_check_dtl( this );
        }
    }


    /// <summary>
    /// A class which represents the mfd_check_dtl table in the RenAix Database.
    /// </summary>
    public partial class mfd_check_dtl : BaseDataObject<Datamfd_check_dtl>, IActiveRecord, ICallOnCreated, Imfd_check_dtl
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<mfd_check_dtl> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<mfd_check_dtl>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<mfd_check_dtl> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(mfd_check_dtl item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                mfd_check_dtl item=new mfd_check_dtl();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<mfd_check_dtl> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public mfd_check_dtl()
        {
            m_Internal = new Datamfd_check_dtl();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.mfd_check_dtlID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public mfd_check_dtl( bool _CallOnCreated )
        {
            m_Internal = new Datamfd_check_dtl();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public mfd_check_dtl(string connectionString, string providerName) 
        {
            m_Internal = new Datamfd_check_dtl();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.mfd_check_dtlID = Guid.NewGuid( );     
        }

        public mfd_check_dtl( Imfd_check_dtl _Item )
        {
            m_Internal = new Datamfd_check_dtl();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public mfd_check_dtl( Datamfd_check_dtl _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( Imfd_check_dtl _Item )
        {
            m_Internal.Imported = _Item.Imported;			
            m_Internal.Business_Date = _Item.Business_Date;			
            m_Internal.Store_ID = _Item.Store_ID;			
            m_Internal.Store_Obj = _Item.Store_Obj;			
            m_Internal.Store_Name = _Item.Store_Name;			
            m_Internal.RVC_Seq = _Item.RVC_Seq;			
            m_Internal.RVC_Obj = _Item.RVC_Obj;			
            m_Internal.Check_Num = _Item.Check_Num;			
            m_Internal.Check_Seq = _Item.Check_Seq;			
            m_Internal.Trans_Seq = _Item.Trans_Seq;			
            m_Internal.Dtl_Seq = _Item.Dtl_Seq;			
            m_Internal.Dtl_Typ = _Item.Dtl_Typ;			
            m_Internal.Dtl_Trans_Typ = _Item.Dtl_Trans_Typ;			
            m_Internal.Dtl_Typ_Seq = _Item.Dtl_Typ_Seq;			
            m_Internal.Dtl_Typ_Obj = _Item.Dtl_Typ_Obj;			
            m_Internal.Dtl_Typ_Name_1 = _Item.Dtl_Typ_Name_1;			
            m_Internal.Dtl_Typ_Name_2 = _Item.Dtl_Typ_Name_2;			
            m_Internal.Dtl_Typ_Cnt = _Item.Dtl_Typ_Cnt;			
            m_Internal.Dtl_Typ_Ttl = _Item.Dtl_Typ_Ttl;			
            m_Internal.Dtl_Typ_Ref_1 = _Item.Dtl_Typ_Ref_1;			
            m_Internal.Dtl_Typ_Ref_2 = _Item.Dtl_Typ_Ref_2;			
            m_Internal.Dtl_Mi_SalesItmzr = _Item.Dtl_Mi_SalesItmzr;			
            m_Internal.Dtl_Mi_DscItmzr = _Item.Dtl_Mi_DscItmzr;			
            m_Internal.Dtl_Mi_SvcItmzr = _Item.Dtl_Mi_SvcItmzr;			
            m_Internal.Dtl_Mi_PriceLevel = _Item.Dtl_Mi_PriceLevel;			
            m_Internal.Dtl_Mi_Maj_Group_Seq = _Item.Dtl_Mi_Maj_Group_Seq;			
            m_Internal.Dtl_Mi_Maj_Group_Obj = _Item.Dtl_Mi_Maj_Group_Obj;			
            m_Internal.Dtl_Mi_Maj_Group_Name = _Item.Dtl_Mi_Maj_Group_Name;			
            m_Internal.Dtl_Mi_Fam_Group_Seq = _Item.Dtl_Mi_Fam_Group_Seq;			
            m_Internal.Dtl_Mi_Fam_Group_Obj = _Item.Dtl_Mi_Fam_Group_Obj;			
            m_Internal.Dtl_Mi_Fam_Group_Name = _Item.Dtl_Mi_Fam_Group_Name;			
            m_Internal.Dtl_Mi_Tax = _Item.Dtl_Mi_Tax;			
            m_Internal.Dtl_Mi_TaxPcnt = _Item.Dtl_Mi_TaxPcnt;			
            m_Internal.Dtl_Mi_Netto_Ttl = _Item.Dtl_Mi_Netto_Ttl;			
            m_Internal.Dtl_Ref_Spec1 = _Item.Dtl_Ref_Spec1;			
            m_Internal.Dtl_Ref_Spec2 = _Item.Dtl_Ref_Spec2;			
            m_Internal.Rvc_Name = _Item.Rvc_Name;			
            m_Internal.Trans_Date = _Item.Trans_Date;			
            m_Internal.Order_Type = _Item.Order_Type;			
            m_Internal.Period_seq = _Item.Period_seq;			
            m_Internal.Dtl_Dsc_Cnt = _Item.Dtl_Dsc_Cnt;			
            m_Internal.Dtl_Dsc_Ttl = _Item.Dtl_Dsc_Ttl;			
            m_Internal.Dtl_Dsc_Netto_Ttl = _Item.Dtl_Dsc_Netto_Ttl;			
            m_Internal.Curr = _Item.Curr;			
            m_Internal.M_Typ = _Item.M_Typ;			
            m_Internal.Combo_Idx = _Item.Combo_Idx;			
            m_Internal.Tax_Typ_1 = _Item.Tax_Typ_1;			
            m_Internal.VAT_Amount_1 = _Item.VAT_Amount_1;			
            m_Internal.Tax_Typ_2 = _Item.Tax_Typ_2;			
            m_Internal.VAT_Amount_2 = _Item.VAT_Amount_2;			
            m_Internal.Tax_Typ_3 = _Item.Tax_Typ_3;			
            m_Internal.VAT_Amount_3 = _Item.VAT_Amount_3;			
            m_Internal.Tax_Typ_4 = _Item.Tax_Typ_4;			
            m_Internal.VAT_Amount_4 = _Item.VAT_Amount_4;			
            m_Internal.Tax_Typ_5 = _Item.Tax_Typ_5;			
            m_Internal.VAT_Amount_5 = _Item.VAT_Amount_5;			
            m_Internal.Tax_Typ_6 = _Item.Tax_Typ_6;			
            m_Internal.VAT_Amount_6 = _Item.VAT_Amount_6;			
            m_Internal.Tax_Typ_7 = _Item.Tax_Typ_7;			
            m_Internal.VAT_Amount_7 = _Item.VAT_Amount_7;			
            m_Internal.Tax_Typ_8 = _Item.Tax_Typ_8;			
            m_Internal.VAT_Amount_8 = _Item.VAT_Amount_8;			
            m_Internal.Dtl_Mi_Dsc_Seq = _Item.Dtl_Mi_Dsc_Seq;			
            m_Internal.M_Item_Weight = _Item.M_Item_Weight;			
            m_Internal.Dtl_Id = _Item.Dtl_Id;			
            m_Internal.sw1 = _Item.sw1;			
            m_Internal.Trans_Srv_Period_Seq = _Item.Trans_Srv_Period_Seq;			
            m_Internal.Trans_Emp_Seq = _Item.Trans_Emp_Seq;			
            m_Internal.vat = _Item.vat;			
            m_Internal.vat_ex = _Item.vat_ex;			
            m_Internal.Seq = _Item.Seq;			
            m_Internal.Uws_Obj = _Item.Uws_Obj;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new mfd_check_dtl( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.mfd_check_dtlID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                mfd_check_dtl.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<mfd_check_dtl>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public mfd_check_dtl(Expression<Func<mfd_check_dtl, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<mfd_check_dtl> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<mfd_check_dtl> _repo;
            
            if(db.TestMode)
            {
                mfd_check_dtl.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<mfd_check_dtl>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<mfd_check_dtl> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static mfd_check_dtl SingleOrDefault(Expression<Func<mfd_check_dtl, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static mfd_check_dtl SingleOrDefault(Expression<Func<mfd_check_dtl, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<mfd_check_dtl> repo = GetRepo(connectionString,providerName);
            mfd_check_dtl single = repo.SingleOrDefault<mfd_check_dtl>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<mfd_check_dtl, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<mfd_check_dtl, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptymfd_check_dtlLoaded = false;
        protected static mfd_check_dtl Emptymfd_check_dtlMember = null;

        public static mfd_check_dtl GetByID(Guid? value) 
        {
            mfd_check_dtl rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static mfd_check_dtl GetByID(Guid value) 
        {
            mfd_check_dtl rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptymfd_check_dtlLoaded )
                    {
                        rc = Emptymfd_check_dtlMember;
                    }
                    else
                    {
                        IsEmptymfd_check_dtlLoaded = true;
                        rc = mfd_check_dtl.Find( L => L.mfd_check_dtlID.Equals( value ) ).FirstOrDefault( );
                        Emptymfd_check_dtlMember = rc;
                    }
                }
                else
                {
                    rc = mfd_check_dtl.Find( L => L.mfd_check_dtlID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<mfd_check_dtl> Find(Expression<Func<mfd_check_dtl, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<mfd_check_dtl> Find(Expression<Func<mfd_check_dtl, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<mfd_check_dtl> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<mfd_check_dtl> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<mfd_check_dtl> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<mfd_check_dtl> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<mfd_check_dtl> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<mfd_check_dtl> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "mfd_check_dtlID";
        }

        public object KeyValue()
        {
            return this.mfd_check_dtlID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Imported )
//			{
//				rc = this.Imported.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is mfd_check_dtl)
            {
                mfd_check_dtl compare=(mfd_check_dtl)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.mfd_check_dtlID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Imported.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Imported";
        }

        public static string GetKeyColumn()
        {
            return "mfd_check_dtlID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Imported";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.mfd_check_dtlID;
            }
            set
            {
                m_Internal.mfd_check_dtlID = value;
            }
        }


//        string _Imported;
        [LocalData]
        public string Imported
        {
            get { return m_Internal.Imported; }
            set
            {
                if(m_Internal.Imported!=value){
                    m_Internal.Imported=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Imported");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _Business_Date;
        [LocalData]
        public DateTime? Business_Date
        {
            get { return m_Internal.Business_Date; }
            set
            {
                if(m_Internal.Business_Date!=value){
                    m_Internal.Business_Date=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Business_Date");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Store_ID;
        [LocalData]
        public int? Store_ID
        {
            get { return m_Internal.Store_ID; }
            set
            {
                if(m_Internal.Store_ID!=value){
                    m_Internal.Store_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Store_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Store_Obj;
        [LocalData]
        public int? Store_Obj
        {
            get { return m_Internal.Store_Obj; }
            set
            {
                if(m_Internal.Store_Obj!=value){
                    m_Internal.Store_Obj=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Store_Obj");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Store_Name;
        [LocalData]
        public string Store_Name
        {
            get { return m_Internal.Store_Name; }
            set
            {
                if(m_Internal.Store_Name!=value){
                    m_Internal.Store_Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Store_Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _RVC_Seq;
        [LocalData]
        public int? RVC_Seq
        {
            get { return m_Internal.RVC_Seq; }
            set
            {
                if(m_Internal.RVC_Seq!=value){
                    m_Internal.RVC_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RVC_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _RVC_Obj;
        [LocalData]
        public int? RVC_Obj
        {
            get { return m_Internal.RVC_Obj; }
            set
            {
                if(m_Internal.RVC_Obj!=value){
                    m_Internal.RVC_Obj=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RVC_Obj");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Check_Num;
        [LocalData]
        public int? Check_Num
        {
            get { return m_Internal.Check_Num; }
            set
            {
                if(m_Internal.Check_Num!=value){
                    m_Internal.Check_Num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Check_Num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Check_Seq;
        [LocalData]
        public int? Check_Seq
        {
            get { return m_Internal.Check_Seq; }
            set
            {
                if(m_Internal.Check_Seq!=value){
                    m_Internal.Check_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Check_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Trans_Seq;
        [LocalData]
        public int? Trans_Seq
        {
            get { return m_Internal.Trans_Seq; }
            set
            {
                if(m_Internal.Trans_Seq!=value){
                    m_Internal.Trans_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Trans_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Seq;
        [LocalData]
        public int? Dtl_Seq
        {
            get { return m_Internal.Dtl_Seq; }
            set
            {
                if(m_Internal.Dtl_Seq!=value){
                    m_Internal.Dtl_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Dtl_Typ;
        [LocalData]
        public string Dtl_Typ
        {
            get { return m_Internal.Dtl_Typ; }
            set
            {
                if(m_Internal.Dtl_Typ!=value){
                    m_Internal.Dtl_Typ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Typ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Dtl_Trans_Typ;
        [LocalData]
        public string Dtl_Trans_Typ
        {
            get { return m_Internal.Dtl_Trans_Typ; }
            set
            {
                if(m_Internal.Dtl_Trans_Typ!=value){
                    m_Internal.Dtl_Trans_Typ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Trans_Typ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Typ_Seq;
        [LocalData]
        public int? Dtl_Typ_Seq
        {
            get { return m_Internal.Dtl_Typ_Seq; }
            set
            {
                if(m_Internal.Dtl_Typ_Seq!=value){
                    m_Internal.Dtl_Typ_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Typ_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Typ_Obj;
        [LocalData]
        public int? Dtl_Typ_Obj
        {
            get { return m_Internal.Dtl_Typ_Obj; }
            set
            {
                if(m_Internal.Dtl_Typ_Obj!=value){
                    m_Internal.Dtl_Typ_Obj=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Typ_Obj");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Dtl_Typ_Name_1;
        [LocalData]
        public string Dtl_Typ_Name_1
        {
            get { return m_Internal.Dtl_Typ_Name_1; }
            set
            {
                if(m_Internal.Dtl_Typ_Name_1!=value){
                    m_Internal.Dtl_Typ_Name_1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Typ_Name_1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Dtl_Typ_Name_2;
        [LocalData]
        public string Dtl_Typ_Name_2
        {
            get { return m_Internal.Dtl_Typ_Name_2; }
            set
            {
                if(m_Internal.Dtl_Typ_Name_2!=value){
                    m_Internal.Dtl_Typ_Name_2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Typ_Name_2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Typ_Cnt;
        [LocalData]
        public int? Dtl_Typ_Cnt
        {
            get { return m_Internal.Dtl_Typ_Cnt; }
            set
            {
                if(m_Internal.Dtl_Typ_Cnt!=value){
                    m_Internal.Dtl_Typ_Cnt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Typ_Cnt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Dtl_Typ_Ttl;
        [LocalData]
        public decimal? Dtl_Typ_Ttl
        {
            get { return m_Internal.Dtl_Typ_Ttl; }
            set
            {
                if(m_Internal.Dtl_Typ_Ttl!=value){
                    m_Internal.Dtl_Typ_Ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Typ_Ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Dtl_Typ_Ref_1;
        [LocalData]
        public string Dtl_Typ_Ref_1
        {
            get { return m_Internal.Dtl_Typ_Ref_1; }
            set
            {
                if(m_Internal.Dtl_Typ_Ref_1!=value){
                    m_Internal.Dtl_Typ_Ref_1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Typ_Ref_1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Dtl_Typ_Ref_2;
        [LocalData]
        public string Dtl_Typ_Ref_2
        {
            get { return m_Internal.Dtl_Typ_Ref_2; }
            set
            {
                if(m_Internal.Dtl_Typ_Ref_2!=value){
                    m_Internal.Dtl_Typ_Ref_2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Typ_Ref_2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Mi_SalesItmzr;
        [LocalData]
        public int? Dtl_Mi_SalesItmzr
        {
            get { return m_Internal.Dtl_Mi_SalesItmzr; }
            set
            {
                if(m_Internal.Dtl_Mi_SalesItmzr!=value){
                    m_Internal.Dtl_Mi_SalesItmzr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Mi_SalesItmzr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Mi_DscItmzr;
        [LocalData]
        public int? Dtl_Mi_DscItmzr
        {
            get { return m_Internal.Dtl_Mi_DscItmzr; }
            set
            {
                if(m_Internal.Dtl_Mi_DscItmzr!=value){
                    m_Internal.Dtl_Mi_DscItmzr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Mi_DscItmzr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Mi_SvcItmzr;
        [LocalData]
        public int? Dtl_Mi_SvcItmzr
        {
            get { return m_Internal.Dtl_Mi_SvcItmzr; }
            set
            {
                if(m_Internal.Dtl_Mi_SvcItmzr!=value){
                    m_Internal.Dtl_Mi_SvcItmzr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Mi_SvcItmzr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Mi_PriceLevel;
        [LocalData]
        public int? Dtl_Mi_PriceLevel
        {
            get { return m_Internal.Dtl_Mi_PriceLevel; }
            set
            {
                if(m_Internal.Dtl_Mi_PriceLevel!=value){
                    m_Internal.Dtl_Mi_PriceLevel=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Mi_PriceLevel");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Mi_Maj_Group_Seq;
        [LocalData]
        public int? Dtl_Mi_Maj_Group_Seq
        {
            get { return m_Internal.Dtl_Mi_Maj_Group_Seq; }
            set
            {
                if(m_Internal.Dtl_Mi_Maj_Group_Seq!=value){
                    m_Internal.Dtl_Mi_Maj_Group_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Mi_Maj_Group_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Mi_Maj_Group_Obj;
        [LocalData]
        public int? Dtl_Mi_Maj_Group_Obj
        {
            get { return m_Internal.Dtl_Mi_Maj_Group_Obj; }
            set
            {
                if(m_Internal.Dtl_Mi_Maj_Group_Obj!=value){
                    m_Internal.Dtl_Mi_Maj_Group_Obj=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Mi_Maj_Group_Obj");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Dtl_Mi_Maj_Group_Name;
        [LocalData]
        public string Dtl_Mi_Maj_Group_Name
        {
            get { return m_Internal.Dtl_Mi_Maj_Group_Name; }
            set
            {
                if(m_Internal.Dtl_Mi_Maj_Group_Name!=value){
                    m_Internal.Dtl_Mi_Maj_Group_Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Mi_Maj_Group_Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Mi_Fam_Group_Seq;
        [LocalData]
        public int? Dtl_Mi_Fam_Group_Seq
        {
            get { return m_Internal.Dtl_Mi_Fam_Group_Seq; }
            set
            {
                if(m_Internal.Dtl_Mi_Fam_Group_Seq!=value){
                    m_Internal.Dtl_Mi_Fam_Group_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Mi_Fam_Group_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Mi_Fam_Group_Obj;
        [LocalData]
        public int? Dtl_Mi_Fam_Group_Obj
        {
            get { return m_Internal.Dtl_Mi_Fam_Group_Obj; }
            set
            {
                if(m_Internal.Dtl_Mi_Fam_Group_Obj!=value){
                    m_Internal.Dtl_Mi_Fam_Group_Obj=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Mi_Fam_Group_Obj");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Dtl_Mi_Fam_Group_Name;
        [LocalData]
        public string Dtl_Mi_Fam_Group_Name
        {
            get { return m_Internal.Dtl_Mi_Fam_Group_Name; }
            set
            {
                if(m_Internal.Dtl_Mi_Fam_Group_Name!=value){
                    m_Internal.Dtl_Mi_Fam_Group_Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Mi_Fam_Group_Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Mi_Tax;
        [LocalData]
        public int? Dtl_Mi_Tax
        {
            get { return m_Internal.Dtl_Mi_Tax; }
            set
            {
                if(m_Internal.Dtl_Mi_Tax!=value){
                    m_Internal.Dtl_Mi_Tax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Mi_Tax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Dtl_Mi_TaxPcnt;
        [LocalData]
        public decimal? Dtl_Mi_TaxPcnt
        {
            get { return m_Internal.Dtl_Mi_TaxPcnt; }
            set
            {
                if(m_Internal.Dtl_Mi_TaxPcnt!=value){
                    m_Internal.Dtl_Mi_TaxPcnt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Mi_TaxPcnt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Dtl_Mi_Netto_Ttl;
        [LocalData]
        public decimal? Dtl_Mi_Netto_Ttl
        {
            get { return m_Internal.Dtl_Mi_Netto_Ttl; }
            set
            {
                if(m_Internal.Dtl_Mi_Netto_Ttl!=value){
                    m_Internal.Dtl_Mi_Netto_Ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Mi_Netto_Ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Dtl_Ref_Spec1;
        [LocalData]
        public string Dtl_Ref_Spec1
        {
            get { return m_Internal.Dtl_Ref_Spec1; }
            set
            {
                if(m_Internal.Dtl_Ref_Spec1!=value){
                    m_Internal.Dtl_Ref_Spec1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Ref_Spec1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Dtl_Ref_Spec2;
        [LocalData]
        public string Dtl_Ref_Spec2
        {
            get { return m_Internal.Dtl_Ref_Spec2; }
            set
            {
                if(m_Internal.Dtl_Ref_Spec2!=value){
                    m_Internal.Dtl_Ref_Spec2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Ref_Spec2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Rvc_Name;
        [LocalData]
        public string Rvc_Name
        {
            get { return m_Internal.Rvc_Name; }
            set
            {
                if(m_Internal.Rvc_Name!=value){
                    m_Internal.Rvc_Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Rvc_Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _Trans_Date;
        [LocalData]
        public DateTime? Trans_Date
        {
            get { return m_Internal.Trans_Date; }
            set
            {
                if(m_Internal.Trans_Date!=value){
                    m_Internal.Trans_Date=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Trans_Date");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Order_Type;
        [LocalData]
        public int? Order_Type
        {
            get { return m_Internal.Order_Type; }
            set
            {
                if(m_Internal.Order_Type!=value){
                    m_Internal.Order_Type=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Order_Type");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Period_seq;
        [LocalData]
        public int? Period_seq
        {
            get { return m_Internal.Period_seq; }
            set
            {
                if(m_Internal.Period_seq!=value){
                    m_Internal.Period_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Period_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Dsc_Cnt;
        [LocalData]
        public int? Dtl_Dsc_Cnt
        {
            get { return m_Internal.Dtl_Dsc_Cnt; }
            set
            {
                if(m_Internal.Dtl_Dsc_Cnt!=value){
                    m_Internal.Dtl_Dsc_Cnt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Dsc_Cnt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Dtl_Dsc_Ttl;
        [LocalData]
        public decimal? Dtl_Dsc_Ttl
        {
            get { return m_Internal.Dtl_Dsc_Ttl; }
            set
            {
                if(m_Internal.Dtl_Dsc_Ttl!=value){
                    m_Internal.Dtl_Dsc_Ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Dsc_Ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Dtl_Dsc_Netto_Ttl;
        [LocalData]
        public decimal? Dtl_Dsc_Netto_Ttl
        {
            get { return m_Internal.Dtl_Dsc_Netto_Ttl; }
            set
            {
                if(m_Internal.Dtl_Dsc_Netto_Ttl!=value){
                    m_Internal.Dtl_Dsc_Netto_Ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Dsc_Netto_Ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Curr;
        [LocalData]
        public string Curr
        {
            get { return m_Internal.Curr; }
            set
            {
                if(m_Internal.Curr!=value){
                    m_Internal.Curr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Curr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _M_Typ;
        [LocalData]
        public string M_Typ
        {
            get { return m_Internal.M_Typ; }
            set
            {
                if(m_Internal.M_Typ!=value){
                    m_Internal.M_Typ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="M_Typ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Combo_Idx;
        [LocalData]
        public int? Combo_Idx
        {
            get { return m_Internal.Combo_Idx; }
            set
            {
                if(m_Internal.Combo_Idx!=value){
                    m_Internal.Combo_Idx=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Combo_Idx");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Tax_Typ_1;
        [LocalData]
        public string Tax_Typ_1
        {
            get { return m_Internal.Tax_Typ_1; }
            set
            {
                if(m_Internal.Tax_Typ_1!=value){
                    m_Internal.Tax_Typ_1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tax_Typ_1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _VAT_Amount_1;
        [LocalData]
        public decimal? VAT_Amount_1
        {
            get { return m_Internal.VAT_Amount_1; }
            set
            {
                if(m_Internal.VAT_Amount_1!=value){
                    m_Internal.VAT_Amount_1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VAT_Amount_1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Tax_Typ_2;
        [LocalData]
        public string Tax_Typ_2
        {
            get { return m_Internal.Tax_Typ_2; }
            set
            {
                if(m_Internal.Tax_Typ_2!=value){
                    m_Internal.Tax_Typ_2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tax_Typ_2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _VAT_Amount_2;
        [LocalData]
        public decimal? VAT_Amount_2
        {
            get { return m_Internal.VAT_Amount_2; }
            set
            {
                if(m_Internal.VAT_Amount_2!=value){
                    m_Internal.VAT_Amount_2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VAT_Amount_2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Tax_Typ_3;
        [LocalData]
        public string Tax_Typ_3
        {
            get { return m_Internal.Tax_Typ_3; }
            set
            {
                if(m_Internal.Tax_Typ_3!=value){
                    m_Internal.Tax_Typ_3=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tax_Typ_3");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _VAT_Amount_3;
        [LocalData]
        public decimal? VAT_Amount_3
        {
            get { return m_Internal.VAT_Amount_3; }
            set
            {
                if(m_Internal.VAT_Amount_3!=value){
                    m_Internal.VAT_Amount_3=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VAT_Amount_3");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Tax_Typ_4;
        [LocalData]
        public string Tax_Typ_4
        {
            get { return m_Internal.Tax_Typ_4; }
            set
            {
                if(m_Internal.Tax_Typ_4!=value){
                    m_Internal.Tax_Typ_4=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tax_Typ_4");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _VAT_Amount_4;
        [LocalData]
        public decimal? VAT_Amount_4
        {
            get { return m_Internal.VAT_Amount_4; }
            set
            {
                if(m_Internal.VAT_Amount_4!=value){
                    m_Internal.VAT_Amount_4=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VAT_Amount_4");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Tax_Typ_5;
        [LocalData]
        public string Tax_Typ_5
        {
            get { return m_Internal.Tax_Typ_5; }
            set
            {
                if(m_Internal.Tax_Typ_5!=value){
                    m_Internal.Tax_Typ_5=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tax_Typ_5");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _VAT_Amount_5;
        [LocalData]
        public decimal? VAT_Amount_5
        {
            get { return m_Internal.VAT_Amount_5; }
            set
            {
                if(m_Internal.VAT_Amount_5!=value){
                    m_Internal.VAT_Amount_5=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VAT_Amount_5");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Tax_Typ_6;
        [LocalData]
        public string Tax_Typ_6
        {
            get { return m_Internal.Tax_Typ_6; }
            set
            {
                if(m_Internal.Tax_Typ_6!=value){
                    m_Internal.Tax_Typ_6=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tax_Typ_6");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _VAT_Amount_6;
        [LocalData]
        public decimal? VAT_Amount_6
        {
            get { return m_Internal.VAT_Amount_6; }
            set
            {
                if(m_Internal.VAT_Amount_6!=value){
                    m_Internal.VAT_Amount_6=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VAT_Amount_6");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Tax_Typ_7;
        [LocalData]
        public string Tax_Typ_7
        {
            get { return m_Internal.Tax_Typ_7; }
            set
            {
                if(m_Internal.Tax_Typ_7!=value){
                    m_Internal.Tax_Typ_7=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tax_Typ_7");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _VAT_Amount_7;
        [LocalData]
        public decimal? VAT_Amount_7
        {
            get { return m_Internal.VAT_Amount_7; }
            set
            {
                if(m_Internal.VAT_Amount_7!=value){
                    m_Internal.VAT_Amount_7=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VAT_Amount_7");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Tax_Typ_8;
        [LocalData]
        public string Tax_Typ_8
        {
            get { return m_Internal.Tax_Typ_8; }
            set
            {
                if(m_Internal.Tax_Typ_8!=value){
                    m_Internal.Tax_Typ_8=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tax_Typ_8");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _VAT_Amount_8;
        [LocalData]
        public decimal? VAT_Amount_8
        {
            get { return m_Internal.VAT_Amount_8; }
            set
            {
                if(m_Internal.VAT_Amount_8!=value){
                    m_Internal.VAT_Amount_8=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VAT_Amount_8");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Mi_Dsc_Seq;
        [LocalData]
        public int? Dtl_Mi_Dsc_Seq
        {
            get { return m_Internal.Dtl_Mi_Dsc_Seq; }
            set
            {
                if(m_Internal.Dtl_Mi_Dsc_Seq!=value){
                    m_Internal.Dtl_Mi_Dsc_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Mi_Dsc_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _M_Item_Weight;
        [LocalData]
        public decimal? M_Item_Weight
        {
            get { return m_Internal.M_Item_Weight; }
            set
            {
                if(m_Internal.M_Item_Weight!=value){
                    m_Internal.M_Item_Weight=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="M_Item_Weight");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Dtl_Id;
        [LocalData]
        public int? Dtl_Id
        {
            get { return m_Internal.Dtl_Id; }
            set
            {
                if(m_Internal.Dtl_Id!=value){
                    m_Internal.Dtl_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dtl_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _sw1;
        [LocalData]
        public int? sw1
        {
            get { return m_Internal.sw1; }
            set
            {
                if(m_Internal.sw1!=value){
                    m_Internal.sw1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="sw1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Trans_Srv_Period_Seq;
        [LocalData]
        public int? Trans_Srv_Period_Seq
        {
            get { return m_Internal.Trans_Srv_Period_Seq; }
            set
            {
                if(m_Internal.Trans_Srv_Period_Seq!=value){
                    m_Internal.Trans_Srv_Period_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Trans_Srv_Period_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Trans_Emp_Seq;
        [LocalData]
        public int? Trans_Emp_Seq
        {
            get { return m_Internal.Trans_Emp_Seq; }
            set
            {
                if(m_Internal.Trans_Emp_Seq!=value){
                    m_Internal.Trans_Emp_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Trans_Emp_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _vat;
        [LocalData]
        public decimal? vat
        {
            get { return m_Internal.vat; }
            set
            {
                if(m_Internal.vat!=value){
                    m_Internal.vat=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="vat");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _vat_ex;
        [LocalData]
        public decimal? vat_ex
        {
            get { return m_Internal.vat_ex; }
            set
            {
                if(m_Internal.vat_ex!=value){
                    m_Internal.vat_ex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="vat_ex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Seq;
        [LocalData]
        public int? Seq
        {
            get { return m_Internal.Seq; }
            set
            {
                if(m_Internal.Seq!=value){
                    m_Internal.Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Uws_Obj;
        [LocalData]
        public int? Uws_Obj
        {
            get { return m_Internal.Uws_Obj; }
            set
            {
                if(m_Internal.Uws_Obj!=value){
                    m_Internal.Uws_Obj=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Uws_Obj");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _mfd_check_dtlID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid mfd_check_dtlID
        {
            get { return m_Internal.mfd_check_dtlID; }
            set
            {
                if(m_Internal.mfd_check_dtlID!=value){
                    m_Internal.mfd_check_dtlID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mfd_check_dtlID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<mfd_check_dtl, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface Imfd_check_ttl : IWCFDataElement
    {
        
        string Imported { get; set; }
        
        DateTime? Business_Date { get; set; }
        
        int? Store_ID { get; set; }
        
        int? Store_Obj { get; set; }
        
        string Store_Name { get; set; }
        
        string Location_Name { get; set; }
        
        int? RVC_Seq { get; set; }
        
        int? RVC_Obj { get; set; }
        
        string RVC_Name { get; set; }
        
        int? Employee_Seq { get; set; }
        
        int? Employee_Obj { get; set; }
        
        string Employee_Name { get; set; }
        
        int? Table_Seq { get; set; }
        
        int? Table_Obj { get; set; }
        
        int? Table_Name { get; set; }
        
        int? Check_Num { get; set; }
        
        int? Check_Seq { get; set; }
        
        int? Uws_Seq { get; set; }
        
        int? Uws_Obj { get; set; }
        
        int? OrderType_Seq { get; set; }
        
        string OrderType_Name { get; set; }
        
        DateTime? Open_Date { get; set; }
        
        DateTime? Open_Time { get; set; }
        
        DateTime? Close_Date { get; set; }
        
        DateTime? Close_Time { get; set; }
        
        int? Cover_Cnt { get; set; }
        
        decimal? Auto_Svc_Ttl { get; set; }
        
        decimal? Other_Svc_Ttl { get; set; }
        
        decimal? Sub_Ttl { get; set; }
        
        decimal? Paymnt_Ttl { get; set; }
        
        decimal? Amt_Due_Ttl { get; set; }
        
        decimal? Tax_Ttl { get; set; }
        
        int? Prntd_Cnt { get; set; }
        
        int? Num_Dtl { get; set; }
        
        int? Num_mi_Dtl { get; set; }
        
        int? Order_Type { get; set; }
        
        string Curr { get; set; }
        
        int? sw1 { get; set; }
        
        string CheckId { get; set; }
        
        int? Seq { get; set; }
        
        Guid mfd_check_ttlID { get; set; }
        
        string DataSource { get; set; }

        void Copy( Imfd_check_ttl _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class Datamfd_check_ttl : Imfd_check_ttl
    {
        [DataMember]
        public string Imported { get; set; }
        [DataMember]
        public DateTime? Business_Date { get; set; }
        [DataMember]
        public int? Store_ID { get; set; }
        [DataMember]
        public int? Store_Obj { get; set; }
        [DataMember]
        public string Store_Name { get; set; }
        [DataMember]
        public string Location_Name { get; set; }
        [DataMember]
        public int? RVC_Seq { get; set; }
        [DataMember]
        public int? RVC_Obj { get; set; }
        [DataMember]
        public string RVC_Name { get; set; }
        [DataMember]
        public int? Employee_Seq { get; set; }
        [DataMember]
        public int? Employee_Obj { get; set; }
        [DataMember]
        public string Employee_Name { get; set; }
        [DataMember]
        public int? Table_Seq { get; set; }
        [DataMember]
        public int? Table_Obj { get; set; }
        [DataMember]
        public int? Table_Name { get; set; }
        [DataMember]
        public int? Check_Num { get; set; }
        [DataMember]
        public int? Check_Seq { get; set; }
        [DataMember]
        public int? Uws_Seq { get; set; }
        [DataMember]
        public int? Uws_Obj { get; set; }
        [DataMember]
        public int? OrderType_Seq { get; set; }
        [DataMember]
        public string OrderType_Name { get; set; }
        [DataMember]
        public DateTime? Open_Date { get; set; }
        [DataMember]
        public DateTime? Open_Time { get; set; }
        [DataMember]
        public DateTime? Close_Date { get; set; }
        [DataMember]
        public DateTime? Close_Time { get; set; }
        [DataMember]
        public int? Cover_Cnt { get; set; }
        [DataMember]
        public decimal? Auto_Svc_Ttl { get; set; }
        [DataMember]
        public decimal? Other_Svc_Ttl { get; set; }
        [DataMember]
        public decimal? Sub_Ttl { get; set; }
        [DataMember]
        public decimal? Paymnt_Ttl { get; set; }
        [DataMember]
        public decimal? Amt_Due_Ttl { get; set; }
        [DataMember]
        public decimal? Tax_Ttl { get; set; }
        [DataMember]
        public int? Prntd_Cnt { get; set; }
        [DataMember]
        public int? Num_Dtl { get; set; }
        [DataMember]
        public int? Num_mi_Dtl { get; set; }
        [DataMember]
        public int? Order_Type { get; set; }
        [DataMember]
        public string Curr { get; set; }
        [DataMember]
        public int? sw1 { get; set; }
        [DataMember]
        public string CheckId { get; set; }
        [DataMember]
        public int? Seq { get; set; }
        [DataMember]
        public Guid mfd_check_ttlID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( Imfd_check_ttl _Item )
        {
             Imported = _Item.Imported;			
             Business_Date = _Item.Business_Date;			
             Store_ID = _Item.Store_ID;			
             Store_Obj = _Item.Store_Obj;			
             Store_Name = _Item.Store_Name;			
             Location_Name = _Item.Location_Name;			
             RVC_Seq = _Item.RVC_Seq;			
             RVC_Obj = _Item.RVC_Obj;			
             RVC_Name = _Item.RVC_Name;			
             Employee_Seq = _Item.Employee_Seq;			
             Employee_Obj = _Item.Employee_Obj;			
             Employee_Name = _Item.Employee_Name;			
             Table_Seq = _Item.Table_Seq;			
             Table_Obj = _Item.Table_Obj;			
             Table_Name = _Item.Table_Name;			
             Check_Num = _Item.Check_Num;			
             Check_Seq = _Item.Check_Seq;			
             Uws_Seq = _Item.Uws_Seq;			
             Uws_Obj = _Item.Uws_Obj;			
             OrderType_Seq = _Item.OrderType_Seq;			
             OrderType_Name = _Item.OrderType_Name;			
             Open_Date = _Item.Open_Date;			
             Open_Time = _Item.Open_Time;			
             Close_Date = _Item.Close_Date;			
             Close_Time = _Item.Close_Time;			
             Cover_Cnt = _Item.Cover_Cnt;			
             Auto_Svc_Ttl = _Item.Auto_Svc_Ttl;			
             Other_Svc_Ttl = _Item.Other_Svc_Ttl;			
             Sub_Ttl = _Item.Sub_Ttl;			
             Paymnt_Ttl = _Item.Paymnt_Ttl;			
             Amt_Due_Ttl = _Item.Amt_Due_Ttl;			
             Tax_Ttl = _Item.Tax_Ttl;			
             Prntd_Cnt = _Item.Prntd_Cnt;			
             Num_Dtl = _Item.Num_Dtl;			
             Num_mi_Dtl = _Item.Num_mi_Dtl;			
             Order_Type = _Item.Order_Type;			
             Curr = _Item.Curr;			
             sw1 = _Item.sw1;			
             CheckId = _Item.CheckId;			
             Seq = _Item.Seq;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new mfd_check_ttl( this );
        }
    }


    /// <summary>
    /// A class which represents the mfd_check_ttl table in the RenAix Database.
    /// </summary>
    public partial class mfd_check_ttl : BaseDataObject<Datamfd_check_ttl>, IActiveRecord, ICallOnCreated, Imfd_check_ttl
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<mfd_check_ttl> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<mfd_check_ttl>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<mfd_check_ttl> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(mfd_check_ttl item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                mfd_check_ttl item=new mfd_check_ttl();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<mfd_check_ttl> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public mfd_check_ttl()
        {
            m_Internal = new Datamfd_check_ttl();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.mfd_check_ttlID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public mfd_check_ttl( bool _CallOnCreated )
        {
            m_Internal = new Datamfd_check_ttl();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public mfd_check_ttl(string connectionString, string providerName) 
        {
            m_Internal = new Datamfd_check_ttl();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.mfd_check_ttlID = Guid.NewGuid( );     
        }

        public mfd_check_ttl( Imfd_check_ttl _Item )
        {
            m_Internal = new Datamfd_check_ttl();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public mfd_check_ttl( Datamfd_check_ttl _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( Imfd_check_ttl _Item )
        {
            m_Internal.Imported = _Item.Imported;			
            m_Internal.Business_Date = _Item.Business_Date;			
            m_Internal.Store_ID = _Item.Store_ID;			
            m_Internal.Store_Obj = _Item.Store_Obj;			
            m_Internal.Store_Name = _Item.Store_Name;			
            m_Internal.Location_Name = _Item.Location_Name;			
            m_Internal.RVC_Seq = _Item.RVC_Seq;			
            m_Internal.RVC_Obj = _Item.RVC_Obj;			
            m_Internal.RVC_Name = _Item.RVC_Name;			
            m_Internal.Employee_Seq = _Item.Employee_Seq;			
            m_Internal.Employee_Obj = _Item.Employee_Obj;			
            m_Internal.Employee_Name = _Item.Employee_Name;			
            m_Internal.Table_Seq = _Item.Table_Seq;			
            m_Internal.Table_Obj = _Item.Table_Obj;			
            m_Internal.Table_Name = _Item.Table_Name;			
            m_Internal.Check_Num = _Item.Check_Num;			
            m_Internal.Check_Seq = _Item.Check_Seq;			
            m_Internal.Uws_Seq = _Item.Uws_Seq;			
            m_Internal.Uws_Obj = _Item.Uws_Obj;			
            m_Internal.OrderType_Seq = _Item.OrderType_Seq;			
            m_Internal.OrderType_Name = _Item.OrderType_Name;			
            m_Internal.Open_Date = _Item.Open_Date;			
            m_Internal.Open_Time = _Item.Open_Time;			
            m_Internal.Close_Date = _Item.Close_Date;			
            m_Internal.Close_Time = _Item.Close_Time;			
            m_Internal.Cover_Cnt = _Item.Cover_Cnt;			
            m_Internal.Auto_Svc_Ttl = _Item.Auto_Svc_Ttl;			
            m_Internal.Other_Svc_Ttl = _Item.Other_Svc_Ttl;			
            m_Internal.Sub_Ttl = _Item.Sub_Ttl;			
            m_Internal.Paymnt_Ttl = _Item.Paymnt_Ttl;			
            m_Internal.Amt_Due_Ttl = _Item.Amt_Due_Ttl;			
            m_Internal.Tax_Ttl = _Item.Tax_Ttl;			
            m_Internal.Prntd_Cnt = _Item.Prntd_Cnt;			
            m_Internal.Num_Dtl = _Item.Num_Dtl;			
            m_Internal.Num_mi_Dtl = _Item.Num_mi_Dtl;			
            m_Internal.Order_Type = _Item.Order_Type;			
            m_Internal.Curr = _Item.Curr;			
            m_Internal.sw1 = _Item.sw1;			
            m_Internal.CheckId = _Item.CheckId;			
            m_Internal.Seq = _Item.Seq;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new mfd_check_ttl( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.mfd_check_ttlID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                mfd_check_ttl.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<mfd_check_ttl>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public mfd_check_ttl(Expression<Func<mfd_check_ttl, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<mfd_check_ttl> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<mfd_check_ttl> _repo;
            
            if(db.TestMode)
            {
                mfd_check_ttl.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<mfd_check_ttl>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<mfd_check_ttl> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static mfd_check_ttl SingleOrDefault(Expression<Func<mfd_check_ttl, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static mfd_check_ttl SingleOrDefault(Expression<Func<mfd_check_ttl, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<mfd_check_ttl> repo = GetRepo(connectionString,providerName);
            mfd_check_ttl single = repo.SingleOrDefault<mfd_check_ttl>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<mfd_check_ttl, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<mfd_check_ttl, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptymfd_check_ttlLoaded = false;
        protected static mfd_check_ttl Emptymfd_check_ttlMember = null;

        public static mfd_check_ttl GetByID(Guid? value) 
        {
            mfd_check_ttl rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static mfd_check_ttl GetByID(Guid value) 
        {
            mfd_check_ttl rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptymfd_check_ttlLoaded )
                    {
                        rc = Emptymfd_check_ttlMember;
                    }
                    else
                    {
                        IsEmptymfd_check_ttlLoaded = true;
                        rc = mfd_check_ttl.Find( L => L.mfd_check_ttlID.Equals( value ) ).FirstOrDefault( );
                        Emptymfd_check_ttlMember = rc;
                    }
                }
                else
                {
                    rc = mfd_check_ttl.Find( L => L.mfd_check_ttlID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<mfd_check_ttl> Find(Expression<Func<mfd_check_ttl, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<mfd_check_ttl> Find(Expression<Func<mfd_check_ttl, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<mfd_check_ttl> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<mfd_check_ttl> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<mfd_check_ttl> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<mfd_check_ttl> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<mfd_check_ttl> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<mfd_check_ttl> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "mfd_check_ttlID";
        }

        public object KeyValue()
        {
            return this.mfd_check_ttlID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Imported )
//			{
//				rc = this.Imported.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is mfd_check_ttl)
            {
                mfd_check_ttl compare=(mfd_check_ttl)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.mfd_check_ttlID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Imported.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Imported";
        }

        public static string GetKeyColumn()
        {
            return "mfd_check_ttlID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Imported";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.mfd_check_ttlID;
            }
            set
            {
                m_Internal.mfd_check_ttlID = value;
            }
        }


//        string _Imported;
        [LocalData]
        public string Imported
        {
            get { return m_Internal.Imported; }
            set
            {
                if(m_Internal.Imported!=value){
                    m_Internal.Imported=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Imported");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _Business_Date;
        [LocalData]
        public DateTime? Business_Date
        {
            get { return m_Internal.Business_Date; }
            set
            {
                if(m_Internal.Business_Date!=value){
                    m_Internal.Business_Date=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Business_Date");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Store_ID;
        [LocalData]
        public int? Store_ID
        {
            get { return m_Internal.Store_ID; }
            set
            {
                if(m_Internal.Store_ID!=value){
                    m_Internal.Store_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Store_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Store_Obj;
        [LocalData]
        public int? Store_Obj
        {
            get { return m_Internal.Store_Obj; }
            set
            {
                if(m_Internal.Store_Obj!=value){
                    m_Internal.Store_Obj=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Store_Obj");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Store_Name;
        [LocalData]
        public string Store_Name
        {
            get { return m_Internal.Store_Name; }
            set
            {
                if(m_Internal.Store_Name!=value){
                    m_Internal.Store_Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Store_Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Location_Name;
        [LocalData]
        public string Location_Name
        {
            get { return m_Internal.Location_Name; }
            set
            {
                if(m_Internal.Location_Name!=value){
                    m_Internal.Location_Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Location_Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _RVC_Seq;
        [LocalData]
        public int? RVC_Seq
        {
            get { return m_Internal.RVC_Seq; }
            set
            {
                if(m_Internal.RVC_Seq!=value){
                    m_Internal.RVC_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RVC_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _RVC_Obj;
        [LocalData]
        public int? RVC_Obj
        {
            get { return m_Internal.RVC_Obj; }
            set
            {
                if(m_Internal.RVC_Obj!=value){
                    m_Internal.RVC_Obj=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RVC_Obj");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RVC_Name;
        [LocalData]
        public string RVC_Name
        {
            get { return m_Internal.RVC_Name; }
            set
            {
                if(m_Internal.RVC_Name!=value){
                    m_Internal.RVC_Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RVC_Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Employee_Seq;
        [LocalData]
        public int? Employee_Seq
        {
            get { return m_Internal.Employee_Seq; }
            set
            {
                if(m_Internal.Employee_Seq!=value){
                    m_Internal.Employee_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Employee_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Employee_Obj;
        [LocalData]
        public int? Employee_Obj
        {
            get { return m_Internal.Employee_Obj; }
            set
            {
                if(m_Internal.Employee_Obj!=value){
                    m_Internal.Employee_Obj=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Employee_Obj");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Employee_Name;
        [LocalData]
        public string Employee_Name
        {
            get { return m_Internal.Employee_Name; }
            set
            {
                if(m_Internal.Employee_Name!=value){
                    m_Internal.Employee_Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Employee_Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Table_Seq;
        [LocalData]
        public int? Table_Seq
        {
            get { return m_Internal.Table_Seq; }
            set
            {
                if(m_Internal.Table_Seq!=value){
                    m_Internal.Table_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Table_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Table_Obj;
        [LocalData]
        public int? Table_Obj
        {
            get { return m_Internal.Table_Obj; }
            set
            {
                if(m_Internal.Table_Obj!=value){
                    m_Internal.Table_Obj=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Table_Obj");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Table_Name;
        [LocalData]
        public int? Table_Name
        {
            get { return m_Internal.Table_Name; }
            set
            {
                if(m_Internal.Table_Name!=value){
                    m_Internal.Table_Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Table_Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Check_Num;
        [LocalData]
        public int? Check_Num
        {
            get { return m_Internal.Check_Num; }
            set
            {
                if(m_Internal.Check_Num!=value){
                    m_Internal.Check_Num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Check_Num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Check_Seq;
        [LocalData]
        public int? Check_Seq
        {
            get { return m_Internal.Check_Seq; }
            set
            {
                if(m_Internal.Check_Seq!=value){
                    m_Internal.Check_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Check_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Uws_Seq;
        [LocalData]
        public int? Uws_Seq
        {
            get { return m_Internal.Uws_Seq; }
            set
            {
                if(m_Internal.Uws_Seq!=value){
                    m_Internal.Uws_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Uws_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Uws_Obj;
        [LocalData]
        public int? Uws_Obj
        {
            get { return m_Internal.Uws_Obj; }
            set
            {
                if(m_Internal.Uws_Obj!=value){
                    m_Internal.Uws_Obj=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Uws_Obj");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _OrderType_Seq;
        [LocalData]
        public int? OrderType_Seq
        {
            get { return m_Internal.OrderType_Seq; }
            set
            {
                if(m_Internal.OrderType_Seq!=value){
                    m_Internal.OrderType_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderType_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OrderType_Name;
        [LocalData]
        public string OrderType_Name
        {
            get { return m_Internal.OrderType_Name; }
            set
            {
                if(m_Internal.OrderType_Name!=value){
                    m_Internal.OrderType_Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderType_Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _Open_Date;
        [LocalData]
        public DateTime? Open_Date
        {
            get { return m_Internal.Open_Date; }
            set
            {
                if(m_Internal.Open_Date!=value){
                    m_Internal.Open_Date=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Open_Date");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _Open_Time;
        [LocalData]
        public DateTime? Open_Time
        {
            get { return m_Internal.Open_Time; }
            set
            {
                if(m_Internal.Open_Time!=value){
                    m_Internal.Open_Time=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Open_Time");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _Close_Date;
        [LocalData]
        public DateTime? Close_Date
        {
            get { return m_Internal.Close_Date; }
            set
            {
                if(m_Internal.Close_Date!=value){
                    m_Internal.Close_Date=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Close_Date");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _Close_Time;
        [LocalData]
        public DateTime? Close_Time
        {
            get { return m_Internal.Close_Time; }
            set
            {
                if(m_Internal.Close_Time!=value){
                    m_Internal.Close_Time=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Close_Time");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Cover_Cnt;
        [LocalData]
        public int? Cover_Cnt
        {
            get { return m_Internal.Cover_Cnt; }
            set
            {
                if(m_Internal.Cover_Cnt!=value){
                    m_Internal.Cover_Cnt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Cover_Cnt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Auto_Svc_Ttl;
        [LocalData]
        public decimal? Auto_Svc_Ttl
        {
            get { return m_Internal.Auto_Svc_Ttl; }
            set
            {
                if(m_Internal.Auto_Svc_Ttl!=value){
                    m_Internal.Auto_Svc_Ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Auto_Svc_Ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Other_Svc_Ttl;
        [LocalData]
        public decimal? Other_Svc_Ttl
        {
            get { return m_Internal.Other_Svc_Ttl; }
            set
            {
                if(m_Internal.Other_Svc_Ttl!=value){
                    m_Internal.Other_Svc_Ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Other_Svc_Ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Sub_Ttl;
        [LocalData]
        public decimal? Sub_Ttl
        {
            get { return m_Internal.Sub_Ttl; }
            set
            {
                if(m_Internal.Sub_Ttl!=value){
                    m_Internal.Sub_Ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Sub_Ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Paymnt_Ttl;
        [LocalData]
        public decimal? Paymnt_Ttl
        {
            get { return m_Internal.Paymnt_Ttl; }
            set
            {
                if(m_Internal.Paymnt_Ttl!=value){
                    m_Internal.Paymnt_Ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Paymnt_Ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Amt_Due_Ttl;
        [LocalData]
        public decimal? Amt_Due_Ttl
        {
            get { return m_Internal.Amt_Due_Ttl; }
            set
            {
                if(m_Internal.Amt_Due_Ttl!=value){
                    m_Internal.Amt_Due_Ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Amt_Due_Ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Tax_Ttl;
        [LocalData]
        public decimal? Tax_Ttl
        {
            get { return m_Internal.Tax_Ttl; }
            set
            {
                if(m_Internal.Tax_Ttl!=value){
                    m_Internal.Tax_Ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tax_Ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Prntd_Cnt;
        [LocalData]
        public int? Prntd_Cnt
        {
            get { return m_Internal.Prntd_Cnt; }
            set
            {
                if(m_Internal.Prntd_Cnt!=value){
                    m_Internal.Prntd_Cnt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Prntd_Cnt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Num_Dtl;
        [LocalData]
        public int? Num_Dtl
        {
            get { return m_Internal.Num_Dtl; }
            set
            {
                if(m_Internal.Num_Dtl!=value){
                    m_Internal.Num_Dtl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Num_Dtl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Num_mi_Dtl;
        [LocalData]
        public int? Num_mi_Dtl
        {
            get { return m_Internal.Num_mi_Dtl; }
            set
            {
                if(m_Internal.Num_mi_Dtl!=value){
                    m_Internal.Num_mi_Dtl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Num_mi_Dtl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Order_Type;
        [LocalData]
        public int? Order_Type
        {
            get { return m_Internal.Order_Type; }
            set
            {
                if(m_Internal.Order_Type!=value){
                    m_Internal.Order_Type=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Order_Type");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Curr;
        [LocalData]
        public string Curr
        {
            get { return m_Internal.Curr; }
            set
            {
                if(m_Internal.Curr!=value){
                    m_Internal.Curr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Curr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _sw1;
        [LocalData]
        public int? sw1
        {
            get { return m_Internal.sw1; }
            set
            {
                if(m_Internal.sw1!=value){
                    m_Internal.sw1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="sw1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CheckId;
        [LocalData]
        public string CheckId
        {
            get { return m_Internal.CheckId; }
            set
            {
                if(m_Internal.CheckId!=value){
                    m_Internal.CheckId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Seq;
        [LocalData]
        public int? Seq
        {
            get { return m_Internal.Seq; }
            set
            {
                if(m_Internal.Seq!=value){
                    m_Internal.Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _mfd_check_ttlID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid mfd_check_ttlID
        {
            get { return m_Internal.mfd_check_ttlID; }
            set
            {
                if(m_Internal.mfd_check_ttlID!=value){
                    m_Internal.mfd_check_ttlID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mfd_check_ttlID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<mfd_check_ttl, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface Imi_def : IWCFDataElement
    {
        
        string mi_seq { get; set; }
        
        int? obj_num { get; set; }
        
        string name_1 { get; set; }
        
        int? name_2 { get; set; }
        
        string maj_grp_seq { get; set; }
        
        string fam_grp_seq { get; set; }
        
        string mi_grp_seq { get; set; }
        
        string mi_slu_seq { get; set; }
        
        string price_grp_seq { get; set; }
        
        string slu_priority { get; set; }
        
        string nlu_grp { get; set; }
        
        string nlu_num { get; set; }
        
        string key_num { get; set; }
        
        string icon_id { get; set; }
        
        string ob_mi31_chk_mi_avail { get; set; }
        
        string ob_mi44_no_edit_in_mgr_proc { get; set; }
        
        string ob_item_is_the_no_modifier { get; set; }
        
        string ob_lite_mi_dirty { get; set; }
        
        string ob_rsvd01 { get; set; }
        
        string ob_rsvd02 { get; set; }
        
        string ob_rsvd03 { get; set; }
        
        string ob_rsvd04 { get; set; }
        
        string mi_type_seq { get; set; }
        
        string cond_grp_mem_seq { get; set; }
        
        string cond_req { get; set; }
        
        string cond_allowed { get; set; }
        
        string crs_mem_seq { get; set; }
        
        string crs_sel_seq { get; set; }
        
        string mlvl_class_seq { get; set; }
        
        string prn_def_class_seq { get; set; }
        
        string product_seq_1 { get; set; }
        
        string product_seq_2 { get; set; }
        
        string product_seq_3 { get; set; }
        
        string product_seq_4 { get; set; }
        
        string comm_amt { get; set; }
        
        string comm_pcnt { get; set; }
        
        string cross_ref1 { get; set; }
        
        string cross_ref2 { get; set; }
        
        int? last_updated_by { get; set; }
        
        string last_updated_date { get; set; }
        
        string ob_workstation_only { get; set; }
        
        string mi_slu2_seq { get; set; }
        
        int? ob_flags { get; set; }
        
        int? multi_user_access_seq { get; set; }
        
        string prep_time { get; set; }
        
        string external_type { get; set; }
        
        string topping_type_seq { get; set; }
        
        string topping_modifier_seq { get; set; }
        
        string build_screen_style_seq { get; set; }
        
        string hht_build_screen_style_seq { get; set; }
        
        string prefix_override_level { get; set; }
        
        int? prefix_override_count { get; set; }
        
        string mi_slu3_seq { get; set; }
        
        string mi_slu4_seq { get; set; }
        
        string mi_slu5_seq { get; set; }
        
        string mi_slu6_seq { get; set; }
        
        string mi_slu7_seq { get; set; }
        
        string mi_slu8_seq { get; set; }
        
        Guid mi_defID { get; set; }
        
        string DataSource { get; set; }

        void Copy( Imi_def _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class Datami_def : Imi_def
    {
        [DataMember]
        public string mi_seq { get; set; }
        [DataMember]
        public int? obj_num { get; set; }
        [DataMember]
        public string name_1 { get; set; }
        [DataMember]
        public int? name_2 { get; set; }
        [DataMember]
        public string maj_grp_seq { get; set; }
        [DataMember]
        public string fam_grp_seq { get; set; }
        [DataMember]
        public string mi_grp_seq { get; set; }
        [DataMember]
        public string mi_slu_seq { get; set; }
        [DataMember]
        public string price_grp_seq { get; set; }
        [DataMember]
        public string slu_priority { get; set; }
        [DataMember]
        public string nlu_grp { get; set; }
        [DataMember]
        public string nlu_num { get; set; }
        [DataMember]
        public string key_num { get; set; }
        [DataMember]
        public string icon_id { get; set; }
        [DataMember]
        public string ob_mi31_chk_mi_avail { get; set; }
        [DataMember]
        public string ob_mi44_no_edit_in_mgr_proc { get; set; }
        [DataMember]
        public string ob_item_is_the_no_modifier { get; set; }
        [DataMember]
        public string ob_lite_mi_dirty { get; set; }
        [DataMember]
        public string ob_rsvd01 { get; set; }
        [DataMember]
        public string ob_rsvd02 { get; set; }
        [DataMember]
        public string ob_rsvd03 { get; set; }
        [DataMember]
        public string ob_rsvd04 { get; set; }
        [DataMember]
        public string mi_type_seq { get; set; }
        [DataMember]
        public string cond_grp_mem_seq { get; set; }
        [DataMember]
        public string cond_req { get; set; }
        [DataMember]
        public string cond_allowed { get; set; }
        [DataMember]
        public string crs_mem_seq { get; set; }
        [DataMember]
        public string crs_sel_seq { get; set; }
        [DataMember]
        public string mlvl_class_seq { get; set; }
        [DataMember]
        public string prn_def_class_seq { get; set; }
        [DataMember]
        public string product_seq_1 { get; set; }
        [DataMember]
        public string product_seq_2 { get; set; }
        [DataMember]
        public string product_seq_3 { get; set; }
        [DataMember]
        public string product_seq_4 { get; set; }
        [DataMember]
        public string comm_amt { get; set; }
        [DataMember]
        public string comm_pcnt { get; set; }
        [DataMember]
        public string cross_ref1 { get; set; }
        [DataMember]
        public string cross_ref2 { get; set; }
        [DataMember]
        public int? last_updated_by { get; set; }
        [DataMember]
        public string last_updated_date { get; set; }
        [DataMember]
        public string ob_workstation_only { get; set; }
        [DataMember]
        public string mi_slu2_seq { get; set; }
        [DataMember]
        public int? ob_flags { get; set; }
        [DataMember]
        public int? multi_user_access_seq { get; set; }
        [DataMember]
        public string prep_time { get; set; }
        [DataMember]
        public string external_type { get; set; }
        [DataMember]
        public string topping_type_seq { get; set; }
        [DataMember]
        public string topping_modifier_seq { get; set; }
        [DataMember]
        public string build_screen_style_seq { get; set; }
        [DataMember]
        public string hht_build_screen_style_seq { get; set; }
        [DataMember]
        public string prefix_override_level { get; set; }
        [DataMember]
        public int? prefix_override_count { get; set; }
        [DataMember]
        public string mi_slu3_seq { get; set; }
        [DataMember]
        public string mi_slu4_seq { get; set; }
        [DataMember]
        public string mi_slu5_seq { get; set; }
        [DataMember]
        public string mi_slu6_seq { get; set; }
        [DataMember]
        public string mi_slu7_seq { get; set; }
        [DataMember]
        public string mi_slu8_seq { get; set; }
        [DataMember]
        public Guid mi_defID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( Imi_def _Item )
        {
             mi_seq = _Item.mi_seq;			
             obj_num = _Item.obj_num;			
             name_1 = _Item.name_1;			
             name_2 = _Item.name_2;			
             maj_grp_seq = _Item.maj_grp_seq;			
             fam_grp_seq = _Item.fam_grp_seq;			
             mi_grp_seq = _Item.mi_grp_seq;			
             mi_slu_seq = _Item.mi_slu_seq;			
             price_grp_seq = _Item.price_grp_seq;			
             slu_priority = _Item.slu_priority;			
             nlu_grp = _Item.nlu_grp;			
             nlu_num = _Item.nlu_num;			
             key_num = _Item.key_num;			
             icon_id = _Item.icon_id;			
             ob_mi31_chk_mi_avail = _Item.ob_mi31_chk_mi_avail;			
             ob_mi44_no_edit_in_mgr_proc = _Item.ob_mi44_no_edit_in_mgr_proc;			
             ob_item_is_the_no_modifier = _Item.ob_item_is_the_no_modifier;			
             ob_lite_mi_dirty = _Item.ob_lite_mi_dirty;			
             ob_rsvd01 = _Item.ob_rsvd01;			
             ob_rsvd02 = _Item.ob_rsvd02;			
             ob_rsvd03 = _Item.ob_rsvd03;			
             ob_rsvd04 = _Item.ob_rsvd04;			
             mi_type_seq = _Item.mi_type_seq;			
             cond_grp_mem_seq = _Item.cond_grp_mem_seq;			
             cond_req = _Item.cond_req;			
             cond_allowed = _Item.cond_allowed;			
             crs_mem_seq = _Item.crs_mem_seq;			
             crs_sel_seq = _Item.crs_sel_seq;			
             mlvl_class_seq = _Item.mlvl_class_seq;			
             prn_def_class_seq = _Item.prn_def_class_seq;			
             product_seq_1 = _Item.product_seq_1;			
             product_seq_2 = _Item.product_seq_2;			
             product_seq_3 = _Item.product_seq_3;			
             product_seq_4 = _Item.product_seq_4;			
             comm_amt = _Item.comm_amt;			
             comm_pcnt = _Item.comm_pcnt;			
             cross_ref1 = _Item.cross_ref1;			
             cross_ref2 = _Item.cross_ref2;			
             last_updated_by = _Item.last_updated_by;			
             last_updated_date = _Item.last_updated_date;			
             ob_workstation_only = _Item.ob_workstation_only;			
             mi_slu2_seq = _Item.mi_slu2_seq;			
             ob_flags = _Item.ob_flags;			
             multi_user_access_seq = _Item.multi_user_access_seq;			
             prep_time = _Item.prep_time;			
             external_type = _Item.external_type;			
             topping_type_seq = _Item.topping_type_seq;			
             topping_modifier_seq = _Item.topping_modifier_seq;			
             build_screen_style_seq = _Item.build_screen_style_seq;			
             hht_build_screen_style_seq = _Item.hht_build_screen_style_seq;			
             prefix_override_level = _Item.prefix_override_level;			
             prefix_override_count = _Item.prefix_override_count;			
             mi_slu3_seq = _Item.mi_slu3_seq;			
             mi_slu4_seq = _Item.mi_slu4_seq;			
             mi_slu5_seq = _Item.mi_slu5_seq;			
             mi_slu6_seq = _Item.mi_slu6_seq;			
             mi_slu7_seq = _Item.mi_slu7_seq;			
             mi_slu8_seq = _Item.mi_slu8_seq;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new mi_def( this );
        }
    }


    /// <summary>
    /// A class which represents the mi_def table in the RenAix Database.
    /// </summary>
    public partial class mi_def : BaseDataObject<Datami_def>, IActiveRecord, ICallOnCreated, Imi_def
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<mi_def> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<mi_def>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<mi_def> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(mi_def item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                mi_def item=new mi_def();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<mi_def> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public mi_def()
        {
            m_Internal = new Datami_def();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.mi_defID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public mi_def( bool _CallOnCreated )
        {
            m_Internal = new Datami_def();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public mi_def(string connectionString, string providerName) 
        {
            m_Internal = new Datami_def();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.mi_defID = Guid.NewGuid( );     
        }

        public mi_def( Imi_def _Item )
        {
            m_Internal = new Datami_def();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public mi_def( Datami_def _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( Imi_def _Item )
        {
            m_Internal.mi_seq = _Item.mi_seq;			
            m_Internal.obj_num = _Item.obj_num;			
            m_Internal.name_1 = _Item.name_1;			
            m_Internal.name_2 = _Item.name_2;			
            m_Internal.maj_grp_seq = _Item.maj_grp_seq;			
            m_Internal.fam_grp_seq = _Item.fam_grp_seq;			
            m_Internal.mi_grp_seq = _Item.mi_grp_seq;			
            m_Internal.mi_slu_seq = _Item.mi_slu_seq;			
            m_Internal.price_grp_seq = _Item.price_grp_seq;			
            m_Internal.slu_priority = _Item.slu_priority;			
            m_Internal.nlu_grp = _Item.nlu_grp;			
            m_Internal.nlu_num = _Item.nlu_num;			
            m_Internal.key_num = _Item.key_num;			
            m_Internal.icon_id = _Item.icon_id;			
            m_Internal.ob_mi31_chk_mi_avail = _Item.ob_mi31_chk_mi_avail;			
            m_Internal.ob_mi44_no_edit_in_mgr_proc = _Item.ob_mi44_no_edit_in_mgr_proc;			
            m_Internal.ob_item_is_the_no_modifier = _Item.ob_item_is_the_no_modifier;			
            m_Internal.ob_lite_mi_dirty = _Item.ob_lite_mi_dirty;			
            m_Internal.ob_rsvd01 = _Item.ob_rsvd01;			
            m_Internal.ob_rsvd02 = _Item.ob_rsvd02;			
            m_Internal.ob_rsvd03 = _Item.ob_rsvd03;			
            m_Internal.ob_rsvd04 = _Item.ob_rsvd04;			
            m_Internal.mi_type_seq = _Item.mi_type_seq;			
            m_Internal.cond_grp_mem_seq = _Item.cond_grp_mem_seq;			
            m_Internal.cond_req = _Item.cond_req;			
            m_Internal.cond_allowed = _Item.cond_allowed;			
            m_Internal.crs_mem_seq = _Item.crs_mem_seq;			
            m_Internal.crs_sel_seq = _Item.crs_sel_seq;			
            m_Internal.mlvl_class_seq = _Item.mlvl_class_seq;			
            m_Internal.prn_def_class_seq = _Item.prn_def_class_seq;			
            m_Internal.product_seq_1 = _Item.product_seq_1;			
            m_Internal.product_seq_2 = _Item.product_seq_2;			
            m_Internal.product_seq_3 = _Item.product_seq_3;			
            m_Internal.product_seq_4 = _Item.product_seq_4;			
            m_Internal.comm_amt = _Item.comm_amt;			
            m_Internal.comm_pcnt = _Item.comm_pcnt;			
            m_Internal.cross_ref1 = _Item.cross_ref1;			
            m_Internal.cross_ref2 = _Item.cross_ref2;			
            m_Internal.last_updated_by = _Item.last_updated_by;			
            m_Internal.last_updated_date = _Item.last_updated_date;			
            m_Internal.ob_workstation_only = _Item.ob_workstation_only;			
            m_Internal.mi_slu2_seq = _Item.mi_slu2_seq;			
            m_Internal.ob_flags = _Item.ob_flags;			
            m_Internal.multi_user_access_seq = _Item.multi_user_access_seq;			
            m_Internal.prep_time = _Item.prep_time;			
            m_Internal.external_type = _Item.external_type;			
            m_Internal.topping_type_seq = _Item.topping_type_seq;			
            m_Internal.topping_modifier_seq = _Item.topping_modifier_seq;			
            m_Internal.build_screen_style_seq = _Item.build_screen_style_seq;			
            m_Internal.hht_build_screen_style_seq = _Item.hht_build_screen_style_seq;			
            m_Internal.prefix_override_level = _Item.prefix_override_level;			
            m_Internal.prefix_override_count = _Item.prefix_override_count;			
            m_Internal.mi_slu3_seq = _Item.mi_slu3_seq;			
            m_Internal.mi_slu4_seq = _Item.mi_slu4_seq;			
            m_Internal.mi_slu5_seq = _Item.mi_slu5_seq;			
            m_Internal.mi_slu6_seq = _Item.mi_slu6_seq;			
            m_Internal.mi_slu7_seq = _Item.mi_slu7_seq;			
            m_Internal.mi_slu8_seq = _Item.mi_slu8_seq;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new mi_def( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.mi_defID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                mi_def.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<mi_def>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public mi_def(Expression<Func<mi_def, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<mi_def> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<mi_def> _repo;
            
            if(db.TestMode)
            {
                mi_def.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<mi_def>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<mi_def> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static mi_def SingleOrDefault(Expression<Func<mi_def, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static mi_def SingleOrDefault(Expression<Func<mi_def, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<mi_def> repo = GetRepo(connectionString,providerName);
            mi_def single = repo.SingleOrDefault<mi_def>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<mi_def, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<mi_def, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptymi_defLoaded = false;
        protected static mi_def Emptymi_defMember = null;

        public static mi_def GetByID(Guid? value) 
        {
            mi_def rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static mi_def GetByID(Guid value) 
        {
            mi_def rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptymi_defLoaded )
                    {
                        rc = Emptymi_defMember;
                    }
                    else
                    {
                        IsEmptymi_defLoaded = true;
                        rc = mi_def.Find( L => L.mi_defID.Equals( value ) ).FirstOrDefault( );
                        Emptymi_defMember = rc;
                    }
                }
                else
                {
                    rc = mi_def.Find( L => L.mi_defID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<mi_def> Find(Expression<Func<mi_def, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<mi_def> Find(Expression<Func<mi_def, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<mi_def> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<mi_def> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<mi_def> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<mi_def> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<mi_def> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<mi_def> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "mi_defID";
        }

        public object KeyValue()
        {
            return this.mi_defID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.mi_seq )
//			{
//				rc = this.mi_seq.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is mi_def)
            {
                mi_def compare=(mi_def)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.mi_defID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.mi_seq.ToString();
        }

        public string DescriptorColumn() 
        {
            return "mi_seq";
        }

        public static string GetKeyColumn()
        {
            return "mi_defID";
        }        

        public static string GetDescriptorColumn()
        {
            return "mi_seq";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.mi_defID;
            }
            set
            {
                m_Internal.mi_defID = value;
            }
        }


//        string _mi_seq;
        [LocalData]
        public string mi_seq
        {
            get { return m_Internal.mi_seq; }
            set
            {
                if(m_Internal.mi_seq!=value){
                    m_Internal.mi_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _obj_num;
        [LocalData]
        public int? obj_num
        {
            get { return m_Internal.obj_num; }
            set
            {
                if(m_Internal.obj_num!=value){
                    m_Internal.obj_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="obj_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _name_1;
        [LocalData]
        public string name_1
        {
            get { return m_Internal.name_1; }
            set
            {
                if(m_Internal.name_1!=value){
                    m_Internal.name_1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="name_1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _name_2;
        [LocalData]
        public int? name_2
        {
            get { return m_Internal.name_2; }
            set
            {
                if(m_Internal.name_2!=value){
                    m_Internal.name_2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="name_2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _maj_grp_seq;
        [LocalData]
        public string maj_grp_seq
        {
            get { return m_Internal.maj_grp_seq; }
            set
            {
                if(m_Internal.maj_grp_seq!=value){
                    m_Internal.maj_grp_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="maj_grp_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _fam_grp_seq;
        [LocalData]
        public string fam_grp_seq
        {
            get { return m_Internal.fam_grp_seq; }
            set
            {
                if(m_Internal.fam_grp_seq!=value){
                    m_Internal.fam_grp_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="fam_grp_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _mi_grp_seq;
        [LocalData]
        public string mi_grp_seq
        {
            get { return m_Internal.mi_grp_seq; }
            set
            {
                if(m_Internal.mi_grp_seq!=value){
                    m_Internal.mi_grp_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_grp_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _mi_slu_seq;
        [LocalData]
        public string mi_slu_seq
        {
            get { return m_Internal.mi_slu_seq; }
            set
            {
                if(m_Internal.mi_slu_seq!=value){
                    m_Internal.mi_slu_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_slu_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _price_grp_seq;
        [LocalData]
        public string price_grp_seq
        {
            get { return m_Internal.price_grp_seq; }
            set
            {
                if(m_Internal.price_grp_seq!=value){
                    m_Internal.price_grp_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="price_grp_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _slu_priority;
        [LocalData]
        public string slu_priority
        {
            get { return m_Internal.slu_priority; }
            set
            {
                if(m_Internal.slu_priority!=value){
                    m_Internal.slu_priority=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="slu_priority");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _nlu_grp;
        [LocalData]
        public string nlu_grp
        {
            get { return m_Internal.nlu_grp; }
            set
            {
                if(m_Internal.nlu_grp!=value){
                    m_Internal.nlu_grp=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="nlu_grp");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _nlu_num;
        [LocalData]
        public string nlu_num
        {
            get { return m_Internal.nlu_num; }
            set
            {
                if(m_Internal.nlu_num!=value){
                    m_Internal.nlu_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="nlu_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _key_num;
        [LocalData]
        public string key_num
        {
            get { return m_Internal.key_num; }
            set
            {
                if(m_Internal.key_num!=value){
                    m_Internal.key_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="key_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _icon_id;
        [LocalData]
        public string icon_id
        {
            get { return m_Internal.icon_id; }
            set
            {
                if(m_Internal.icon_id!=value){
                    m_Internal.icon_id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icon_id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ob_mi31_chk_mi_avail;
        [LocalData]
        public string ob_mi31_chk_mi_avail
        {
            get { return m_Internal.ob_mi31_chk_mi_avail; }
            set
            {
                if(m_Internal.ob_mi31_chk_mi_avail!=value){
                    m_Internal.ob_mi31_chk_mi_avail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_mi31_chk_mi_avail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ob_mi44_no_edit_in_mgr_proc;
        [LocalData]
        public string ob_mi44_no_edit_in_mgr_proc
        {
            get { return m_Internal.ob_mi44_no_edit_in_mgr_proc; }
            set
            {
                if(m_Internal.ob_mi44_no_edit_in_mgr_proc!=value){
                    m_Internal.ob_mi44_no_edit_in_mgr_proc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_mi44_no_edit_in_mgr_proc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ob_item_is_the_no_modifier;
        [LocalData]
        public string ob_item_is_the_no_modifier
        {
            get { return m_Internal.ob_item_is_the_no_modifier; }
            set
            {
                if(m_Internal.ob_item_is_the_no_modifier!=value){
                    m_Internal.ob_item_is_the_no_modifier=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_item_is_the_no_modifier");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ob_lite_mi_dirty;
        [LocalData]
        public string ob_lite_mi_dirty
        {
            get { return m_Internal.ob_lite_mi_dirty; }
            set
            {
                if(m_Internal.ob_lite_mi_dirty!=value){
                    m_Internal.ob_lite_mi_dirty=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_lite_mi_dirty");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ob_rsvd01;
        [LocalData]
        public string ob_rsvd01
        {
            get { return m_Internal.ob_rsvd01; }
            set
            {
                if(m_Internal.ob_rsvd01!=value){
                    m_Internal.ob_rsvd01=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_rsvd01");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ob_rsvd02;
        [LocalData]
        public string ob_rsvd02
        {
            get { return m_Internal.ob_rsvd02; }
            set
            {
                if(m_Internal.ob_rsvd02!=value){
                    m_Internal.ob_rsvd02=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_rsvd02");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ob_rsvd03;
        [LocalData]
        public string ob_rsvd03
        {
            get { return m_Internal.ob_rsvd03; }
            set
            {
                if(m_Internal.ob_rsvd03!=value){
                    m_Internal.ob_rsvd03=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_rsvd03");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ob_rsvd04;
        [LocalData]
        public string ob_rsvd04
        {
            get { return m_Internal.ob_rsvd04; }
            set
            {
                if(m_Internal.ob_rsvd04!=value){
                    m_Internal.ob_rsvd04=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_rsvd04");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _mi_type_seq;
        [LocalData]
        public string mi_type_seq
        {
            get { return m_Internal.mi_type_seq; }
            set
            {
                if(m_Internal.mi_type_seq!=value){
                    m_Internal.mi_type_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_type_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _cond_grp_mem_seq;
        [LocalData]
        public string cond_grp_mem_seq
        {
            get { return m_Internal.cond_grp_mem_seq; }
            set
            {
                if(m_Internal.cond_grp_mem_seq!=value){
                    m_Internal.cond_grp_mem_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cond_grp_mem_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _cond_req;
        [LocalData]
        public string cond_req
        {
            get { return m_Internal.cond_req; }
            set
            {
                if(m_Internal.cond_req!=value){
                    m_Internal.cond_req=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cond_req");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _cond_allowed;
        [LocalData]
        public string cond_allowed
        {
            get { return m_Internal.cond_allowed; }
            set
            {
                if(m_Internal.cond_allowed!=value){
                    m_Internal.cond_allowed=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cond_allowed");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _crs_mem_seq;
        [LocalData]
        public string crs_mem_seq
        {
            get { return m_Internal.crs_mem_seq; }
            set
            {
                if(m_Internal.crs_mem_seq!=value){
                    m_Internal.crs_mem_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="crs_mem_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _crs_sel_seq;
        [LocalData]
        public string crs_sel_seq
        {
            get { return m_Internal.crs_sel_seq; }
            set
            {
                if(m_Internal.crs_sel_seq!=value){
                    m_Internal.crs_sel_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="crs_sel_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _mlvl_class_seq;
        [LocalData]
        public string mlvl_class_seq
        {
            get { return m_Internal.mlvl_class_seq; }
            set
            {
                if(m_Internal.mlvl_class_seq!=value){
                    m_Internal.mlvl_class_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mlvl_class_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _prn_def_class_seq;
        [LocalData]
        public string prn_def_class_seq
        {
            get { return m_Internal.prn_def_class_seq; }
            set
            {
                if(m_Internal.prn_def_class_seq!=value){
                    m_Internal.prn_def_class_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="prn_def_class_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _product_seq_1;
        [LocalData]
        public string product_seq_1
        {
            get { return m_Internal.product_seq_1; }
            set
            {
                if(m_Internal.product_seq_1!=value){
                    m_Internal.product_seq_1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="product_seq_1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _product_seq_2;
        [LocalData]
        public string product_seq_2
        {
            get { return m_Internal.product_seq_2; }
            set
            {
                if(m_Internal.product_seq_2!=value){
                    m_Internal.product_seq_2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="product_seq_2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _product_seq_3;
        [LocalData]
        public string product_seq_3
        {
            get { return m_Internal.product_seq_3; }
            set
            {
                if(m_Internal.product_seq_3!=value){
                    m_Internal.product_seq_3=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="product_seq_3");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _product_seq_4;
        [LocalData]
        public string product_seq_4
        {
            get { return m_Internal.product_seq_4; }
            set
            {
                if(m_Internal.product_seq_4!=value){
                    m_Internal.product_seq_4=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="product_seq_4");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _comm_amt;
        [LocalData]
        public string comm_amt
        {
            get { return m_Internal.comm_amt; }
            set
            {
                if(m_Internal.comm_amt!=value){
                    m_Internal.comm_amt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="comm_amt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _comm_pcnt;
        [LocalData]
        public string comm_pcnt
        {
            get { return m_Internal.comm_pcnt; }
            set
            {
                if(m_Internal.comm_pcnt!=value){
                    m_Internal.comm_pcnt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="comm_pcnt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _cross_ref1;
        [LocalData]
        public string cross_ref1
        {
            get { return m_Internal.cross_ref1; }
            set
            {
                if(m_Internal.cross_ref1!=value){
                    m_Internal.cross_ref1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cross_ref1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _cross_ref2;
        [LocalData]
        public string cross_ref2
        {
            get { return m_Internal.cross_ref2; }
            set
            {
                if(m_Internal.cross_ref2!=value){
                    m_Internal.cross_ref2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cross_ref2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _last_updated_by;
        [LocalData]
        public int? last_updated_by
        {
            get { return m_Internal.last_updated_by; }
            set
            {
                if(m_Internal.last_updated_by!=value){
                    m_Internal.last_updated_by=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="last_updated_by");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _last_updated_date;
        [LocalData]
        public string last_updated_date
        {
            get { return m_Internal.last_updated_date; }
            set
            {
                if(m_Internal.last_updated_date!=value){
                    m_Internal.last_updated_date=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="last_updated_date");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ob_workstation_only;
        [LocalData]
        public string ob_workstation_only
        {
            get { return m_Internal.ob_workstation_only; }
            set
            {
                if(m_Internal.ob_workstation_only!=value){
                    m_Internal.ob_workstation_only=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_workstation_only");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _mi_slu2_seq;
        [LocalData]
        public string mi_slu2_seq
        {
            get { return m_Internal.mi_slu2_seq; }
            set
            {
                if(m_Internal.mi_slu2_seq!=value){
                    m_Internal.mi_slu2_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_slu2_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ob_flags;
        [LocalData]
        public int? ob_flags
        {
            get { return m_Internal.ob_flags; }
            set
            {
                if(m_Internal.ob_flags!=value){
                    m_Internal.ob_flags=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_flags");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _multi_user_access_seq;
        [LocalData]
        public int? multi_user_access_seq
        {
            get { return m_Internal.multi_user_access_seq; }
            set
            {
                if(m_Internal.multi_user_access_seq!=value){
                    m_Internal.multi_user_access_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="multi_user_access_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _prep_time;
        [LocalData]
        public string prep_time
        {
            get { return m_Internal.prep_time; }
            set
            {
                if(m_Internal.prep_time!=value){
                    m_Internal.prep_time=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="prep_time");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _external_type;
        [LocalData]
        public string external_type
        {
            get { return m_Internal.external_type; }
            set
            {
                if(m_Internal.external_type!=value){
                    m_Internal.external_type=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="external_type");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _topping_type_seq;
        [LocalData]
        public string topping_type_seq
        {
            get { return m_Internal.topping_type_seq; }
            set
            {
                if(m_Internal.topping_type_seq!=value){
                    m_Internal.topping_type_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="topping_type_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _topping_modifier_seq;
        [LocalData]
        public string topping_modifier_seq
        {
            get { return m_Internal.topping_modifier_seq; }
            set
            {
                if(m_Internal.topping_modifier_seq!=value){
                    m_Internal.topping_modifier_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="topping_modifier_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _build_screen_style_seq;
        [LocalData]
        public string build_screen_style_seq
        {
            get { return m_Internal.build_screen_style_seq; }
            set
            {
                if(m_Internal.build_screen_style_seq!=value){
                    m_Internal.build_screen_style_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="build_screen_style_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _hht_build_screen_style_seq;
        [LocalData]
        public string hht_build_screen_style_seq
        {
            get { return m_Internal.hht_build_screen_style_seq; }
            set
            {
                if(m_Internal.hht_build_screen_style_seq!=value){
                    m_Internal.hht_build_screen_style_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="hht_build_screen_style_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _prefix_override_level;
        [LocalData]
        public string prefix_override_level
        {
            get { return m_Internal.prefix_override_level; }
            set
            {
                if(m_Internal.prefix_override_level!=value){
                    m_Internal.prefix_override_level=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="prefix_override_level");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _prefix_override_count;
        [LocalData]
        public int? prefix_override_count
        {
            get { return m_Internal.prefix_override_count; }
            set
            {
                if(m_Internal.prefix_override_count!=value){
                    m_Internal.prefix_override_count=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="prefix_override_count");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _mi_slu3_seq;
        [LocalData]
        public string mi_slu3_seq
        {
            get { return m_Internal.mi_slu3_seq; }
            set
            {
                if(m_Internal.mi_slu3_seq!=value){
                    m_Internal.mi_slu3_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_slu3_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _mi_slu4_seq;
        [LocalData]
        public string mi_slu4_seq
        {
            get { return m_Internal.mi_slu4_seq; }
            set
            {
                if(m_Internal.mi_slu4_seq!=value){
                    m_Internal.mi_slu4_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_slu4_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _mi_slu5_seq;
        [LocalData]
        public string mi_slu5_seq
        {
            get { return m_Internal.mi_slu5_seq; }
            set
            {
                if(m_Internal.mi_slu5_seq!=value){
                    m_Internal.mi_slu5_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_slu5_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _mi_slu6_seq;
        [LocalData]
        public string mi_slu6_seq
        {
            get { return m_Internal.mi_slu6_seq; }
            set
            {
                if(m_Internal.mi_slu6_seq!=value){
                    m_Internal.mi_slu6_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_slu6_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _mi_slu7_seq;
        [LocalData]
        public string mi_slu7_seq
        {
            get { return m_Internal.mi_slu7_seq; }
            set
            {
                if(m_Internal.mi_slu7_seq!=value){
                    m_Internal.mi_slu7_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_slu7_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _mi_slu8_seq;
        [LocalData]
        public string mi_slu8_seq
        {
            get { return m_Internal.mi_slu8_seq; }
            set
            {
                if(m_Internal.mi_slu8_seq!=value){
                    m_Internal.mi_slu8_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_slu8_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _mi_defID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid mi_defID
        {
            get { return m_Internal.mi_defID; }
            set
            {
                if(m_Internal.mi_defID!=value){
                    m_Internal.mi_defID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_defID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<mi_def, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface Imi_price_def : IWCFDataElement
    {
        
        string mi_seq { get; set; }
        
        int? mi_price_seq { get; set; }
        
        DateTime? effective_from { get; set; }
        
        DateTime? effective_to { get; set; }
        
        decimal? preset_amt_1 { get; set; }
        
        decimal? preset_amt_2 { get; set; }
        
        decimal? preset_amt_3 { get; set; }
        
        decimal? preset_amt_4 { get; set; }
        
        decimal? preset_amt_5 { get; set; }
        
        decimal? preset_amt_6 { get; set; }
        
        decimal? preset_amt_7 { get; set; }
        
        decimal? preset_amt_8 { get; set; }
        
        decimal? preset_amt_9 { get; set; }
        
        decimal? preset_amt_10 { get; set; }
        
        decimal? vat_txbl_1 { get; set; }
        
        decimal? vat_txbl_2 { get; set; }
        
        decimal? vat_txbl_3 { get; set; }
        
        decimal? vat_txbl_4 { get; set; }
        
        decimal? vat_txbl_5 { get; set; }
        
        decimal? vat_txbl_6 { get; set; }
        
        decimal? vat_txbl_7 { get; set; }
        
        decimal? vat_txbl_8 { get; set; }
        
        decimal? vat_txbl_9 { get; set; }
        
        decimal? vat_txbl_10 { get; set; }
        
        decimal? cost_1 { get; set; }
        
        decimal? cost_2 { get; set; }
        
        decimal? cost_3 { get; set; }
        
        decimal? cost_4 { get; set; }
        
        decimal? cost_5 { get; set; }
        
        decimal? cost_6 { get; set; }
        
        decimal? cost_7 { get; set; }
        
        decimal? cost_8 { get; set; }
        
        decimal? cost_9 { get; set; }
        
        decimal? cost_10 { get; set; }
        
        decimal? tare_weight { get; set; }
        
        decimal? surcharge_tax { get; set; }
        
        int? em_chg_set_seq { get; set; }
        
        int? price_grp_seq { get; set; }
        
        int? price_tier_seq { get; set; }
        
        string em_repl_status { get; set; }
        
        string comments { get; set; }
        
        string ob_rsvd01 { get; set; }
        
        string ob_rsvd02 { get; set; }
        
        string ob_rsvd03 { get; set; }
        
        string ob_rsvd04 { get; set; }
        
        string last_updated_by { get; set; }
        
        string menu_panel_price_01 { get; set; }
        
        string menu_panel_price_02 { get; set; }
        
        string menu_panel_price_03 { get; set; }
        
        string menu_panel_price_04 { get; set; }
        
        string menu_panel_price_05 { get; set; }
        
        string menu_panel_price_06 { get; set; }
        
        string menu_panel_price_07 { get; set; }
        
        string menu_panel_price_08 { get; set; }
        
        string menu_panel_price_09 { get; set; }
        
        string menu_panel_price_10 { get; set; }
        
        Guid mi_price_defID { get; set; }
        
        string DataSource { get; set; }

        void Copy( Imi_price_def _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class Datami_price_def : Imi_price_def
    {
        [DataMember]
        public string mi_seq { get; set; }
        [DataMember]
        public int? mi_price_seq { get; set; }
        [DataMember]
        public DateTime? effective_from { get; set; }
        [DataMember]
        public DateTime? effective_to { get; set; }
        [DataMember]
        public decimal? preset_amt_1 { get; set; }
        [DataMember]
        public decimal? preset_amt_2 { get; set; }
        [DataMember]
        public decimal? preset_amt_3 { get; set; }
        [DataMember]
        public decimal? preset_amt_4 { get; set; }
        [DataMember]
        public decimal? preset_amt_5 { get; set; }
        [DataMember]
        public decimal? preset_amt_6 { get; set; }
        [DataMember]
        public decimal? preset_amt_7 { get; set; }
        [DataMember]
        public decimal? preset_amt_8 { get; set; }
        [DataMember]
        public decimal? preset_amt_9 { get; set; }
        [DataMember]
        public decimal? preset_amt_10 { get; set; }
        [DataMember]
        public decimal? vat_txbl_1 { get; set; }
        [DataMember]
        public decimal? vat_txbl_2 { get; set; }
        [DataMember]
        public decimal? vat_txbl_3 { get; set; }
        [DataMember]
        public decimal? vat_txbl_4 { get; set; }
        [DataMember]
        public decimal? vat_txbl_5 { get; set; }
        [DataMember]
        public decimal? vat_txbl_6 { get; set; }
        [DataMember]
        public decimal? vat_txbl_7 { get; set; }
        [DataMember]
        public decimal? vat_txbl_8 { get; set; }
        [DataMember]
        public decimal? vat_txbl_9 { get; set; }
        [DataMember]
        public decimal? vat_txbl_10 { get; set; }
        [DataMember]
        public decimal? cost_1 { get; set; }
        [DataMember]
        public decimal? cost_2 { get; set; }
        [DataMember]
        public decimal? cost_3 { get; set; }
        [DataMember]
        public decimal? cost_4 { get; set; }
        [DataMember]
        public decimal? cost_5 { get; set; }
        [DataMember]
        public decimal? cost_6 { get; set; }
        [DataMember]
        public decimal? cost_7 { get; set; }
        [DataMember]
        public decimal? cost_8 { get; set; }
        [DataMember]
        public decimal? cost_9 { get; set; }
        [DataMember]
        public decimal? cost_10 { get; set; }
        [DataMember]
        public decimal? tare_weight { get; set; }
        [DataMember]
        public decimal? surcharge_tax { get; set; }
        [DataMember]
        public int? em_chg_set_seq { get; set; }
        [DataMember]
        public int? price_grp_seq { get; set; }
        [DataMember]
        public int? price_tier_seq { get; set; }
        [DataMember]
        public string em_repl_status { get; set; }
        [DataMember]
        public string comments { get; set; }
        [DataMember]
        public string ob_rsvd01 { get; set; }
        [DataMember]
        public string ob_rsvd02 { get; set; }
        [DataMember]
        public string ob_rsvd03 { get; set; }
        [DataMember]
        public string ob_rsvd04 { get; set; }
        [DataMember]
        public string last_updated_by { get; set; }
        [DataMember]
        public string menu_panel_price_01 { get; set; }
        [DataMember]
        public string menu_panel_price_02 { get; set; }
        [DataMember]
        public string menu_panel_price_03 { get; set; }
        [DataMember]
        public string menu_panel_price_04 { get; set; }
        [DataMember]
        public string menu_panel_price_05 { get; set; }
        [DataMember]
        public string menu_panel_price_06 { get; set; }
        [DataMember]
        public string menu_panel_price_07 { get; set; }
        [DataMember]
        public string menu_panel_price_08 { get; set; }
        [DataMember]
        public string menu_panel_price_09 { get; set; }
        [DataMember]
        public string menu_panel_price_10 { get; set; }
        [DataMember]
        public Guid mi_price_defID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( Imi_price_def _Item )
        {
             mi_seq = _Item.mi_seq;			
             mi_price_seq = _Item.mi_price_seq;			
             effective_from = _Item.effective_from;			
             effective_to = _Item.effective_to;			
             preset_amt_1 = _Item.preset_amt_1;			
             preset_amt_2 = _Item.preset_amt_2;			
             preset_amt_3 = _Item.preset_amt_3;			
             preset_amt_4 = _Item.preset_amt_4;			
             preset_amt_5 = _Item.preset_amt_5;			
             preset_amt_6 = _Item.preset_amt_6;			
             preset_amt_7 = _Item.preset_amt_7;			
             preset_amt_8 = _Item.preset_amt_8;			
             preset_amt_9 = _Item.preset_amt_9;			
             preset_amt_10 = _Item.preset_amt_10;			
             vat_txbl_1 = _Item.vat_txbl_1;			
             vat_txbl_2 = _Item.vat_txbl_2;			
             vat_txbl_3 = _Item.vat_txbl_3;			
             vat_txbl_4 = _Item.vat_txbl_4;			
             vat_txbl_5 = _Item.vat_txbl_5;			
             vat_txbl_6 = _Item.vat_txbl_6;			
             vat_txbl_7 = _Item.vat_txbl_7;			
             vat_txbl_8 = _Item.vat_txbl_8;			
             vat_txbl_9 = _Item.vat_txbl_9;			
             vat_txbl_10 = _Item.vat_txbl_10;			
             cost_1 = _Item.cost_1;			
             cost_2 = _Item.cost_2;			
             cost_3 = _Item.cost_3;			
             cost_4 = _Item.cost_4;			
             cost_5 = _Item.cost_5;			
             cost_6 = _Item.cost_6;			
             cost_7 = _Item.cost_7;			
             cost_8 = _Item.cost_8;			
             cost_9 = _Item.cost_9;			
             cost_10 = _Item.cost_10;			
             tare_weight = _Item.tare_weight;			
             surcharge_tax = _Item.surcharge_tax;			
             em_chg_set_seq = _Item.em_chg_set_seq;			
             price_grp_seq = _Item.price_grp_seq;			
             price_tier_seq = _Item.price_tier_seq;			
             em_repl_status = _Item.em_repl_status;			
             comments = _Item.comments;			
             ob_rsvd01 = _Item.ob_rsvd01;			
             ob_rsvd02 = _Item.ob_rsvd02;			
             ob_rsvd03 = _Item.ob_rsvd03;			
             ob_rsvd04 = _Item.ob_rsvd04;			
             last_updated_by = _Item.last_updated_by;			
             menu_panel_price_01 = _Item.menu_panel_price_01;			
             menu_panel_price_02 = _Item.menu_panel_price_02;			
             menu_panel_price_03 = _Item.menu_panel_price_03;			
             menu_panel_price_04 = _Item.menu_panel_price_04;			
             menu_panel_price_05 = _Item.menu_panel_price_05;			
             menu_panel_price_06 = _Item.menu_panel_price_06;			
             menu_panel_price_07 = _Item.menu_panel_price_07;			
             menu_panel_price_08 = _Item.menu_panel_price_08;			
             menu_panel_price_09 = _Item.menu_panel_price_09;			
             menu_panel_price_10 = _Item.menu_panel_price_10;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new mi_price_def( this );
        }
    }


    /// <summary>
    /// A class which represents the mi_price_def table in the RenAix Database.
    /// </summary>
    public partial class mi_price_def : BaseDataObject<Datami_price_def>, IActiveRecord, ICallOnCreated, Imi_price_def
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<mi_price_def> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<mi_price_def>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<mi_price_def> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(mi_price_def item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                mi_price_def item=new mi_price_def();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<mi_price_def> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public mi_price_def()
        {
            m_Internal = new Datami_price_def();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.mi_price_defID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public mi_price_def( bool _CallOnCreated )
        {
            m_Internal = new Datami_price_def();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public mi_price_def(string connectionString, string providerName) 
        {
            m_Internal = new Datami_price_def();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.mi_price_defID = Guid.NewGuid( );     
        }

        public mi_price_def( Imi_price_def _Item )
        {
            m_Internal = new Datami_price_def();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public mi_price_def( Datami_price_def _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( Imi_price_def _Item )
        {
            m_Internal.mi_seq = _Item.mi_seq;			
            m_Internal.mi_price_seq = _Item.mi_price_seq;			
            m_Internal.effective_from = _Item.effective_from;			
            m_Internal.effective_to = _Item.effective_to;			
            m_Internal.preset_amt_1 = _Item.preset_amt_1;			
            m_Internal.preset_amt_2 = _Item.preset_amt_2;			
            m_Internal.preset_amt_3 = _Item.preset_amt_3;			
            m_Internal.preset_amt_4 = _Item.preset_amt_4;			
            m_Internal.preset_amt_5 = _Item.preset_amt_5;			
            m_Internal.preset_amt_6 = _Item.preset_amt_6;			
            m_Internal.preset_amt_7 = _Item.preset_amt_7;			
            m_Internal.preset_amt_8 = _Item.preset_amt_8;			
            m_Internal.preset_amt_9 = _Item.preset_amt_9;			
            m_Internal.preset_amt_10 = _Item.preset_amt_10;			
            m_Internal.vat_txbl_1 = _Item.vat_txbl_1;			
            m_Internal.vat_txbl_2 = _Item.vat_txbl_2;			
            m_Internal.vat_txbl_3 = _Item.vat_txbl_3;			
            m_Internal.vat_txbl_4 = _Item.vat_txbl_4;			
            m_Internal.vat_txbl_5 = _Item.vat_txbl_5;			
            m_Internal.vat_txbl_6 = _Item.vat_txbl_6;			
            m_Internal.vat_txbl_7 = _Item.vat_txbl_7;			
            m_Internal.vat_txbl_8 = _Item.vat_txbl_8;			
            m_Internal.vat_txbl_9 = _Item.vat_txbl_9;			
            m_Internal.vat_txbl_10 = _Item.vat_txbl_10;			
            m_Internal.cost_1 = _Item.cost_1;			
            m_Internal.cost_2 = _Item.cost_2;			
            m_Internal.cost_3 = _Item.cost_3;			
            m_Internal.cost_4 = _Item.cost_4;			
            m_Internal.cost_5 = _Item.cost_5;			
            m_Internal.cost_6 = _Item.cost_6;			
            m_Internal.cost_7 = _Item.cost_7;			
            m_Internal.cost_8 = _Item.cost_8;			
            m_Internal.cost_9 = _Item.cost_9;			
            m_Internal.cost_10 = _Item.cost_10;			
            m_Internal.tare_weight = _Item.tare_weight;			
            m_Internal.surcharge_tax = _Item.surcharge_tax;			
            m_Internal.em_chg_set_seq = _Item.em_chg_set_seq;			
            m_Internal.price_grp_seq = _Item.price_grp_seq;			
            m_Internal.price_tier_seq = _Item.price_tier_seq;			
            m_Internal.em_repl_status = _Item.em_repl_status;			
            m_Internal.comments = _Item.comments;			
            m_Internal.ob_rsvd01 = _Item.ob_rsvd01;			
            m_Internal.ob_rsvd02 = _Item.ob_rsvd02;			
            m_Internal.ob_rsvd03 = _Item.ob_rsvd03;			
            m_Internal.ob_rsvd04 = _Item.ob_rsvd04;			
            m_Internal.last_updated_by = _Item.last_updated_by;			
            m_Internal.menu_panel_price_01 = _Item.menu_panel_price_01;			
            m_Internal.menu_panel_price_02 = _Item.menu_panel_price_02;			
            m_Internal.menu_panel_price_03 = _Item.menu_panel_price_03;			
            m_Internal.menu_panel_price_04 = _Item.menu_panel_price_04;			
            m_Internal.menu_panel_price_05 = _Item.menu_panel_price_05;			
            m_Internal.menu_panel_price_06 = _Item.menu_panel_price_06;			
            m_Internal.menu_panel_price_07 = _Item.menu_panel_price_07;			
            m_Internal.menu_panel_price_08 = _Item.menu_panel_price_08;			
            m_Internal.menu_panel_price_09 = _Item.menu_panel_price_09;			
            m_Internal.menu_panel_price_10 = _Item.menu_panel_price_10;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new mi_price_def( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.mi_price_defID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                mi_price_def.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<mi_price_def>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public mi_price_def(Expression<Func<mi_price_def, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<mi_price_def> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<mi_price_def> _repo;
            
            if(db.TestMode)
            {
                mi_price_def.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<mi_price_def>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<mi_price_def> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static mi_price_def SingleOrDefault(Expression<Func<mi_price_def, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static mi_price_def SingleOrDefault(Expression<Func<mi_price_def, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<mi_price_def> repo = GetRepo(connectionString,providerName);
            mi_price_def single = repo.SingleOrDefault<mi_price_def>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<mi_price_def, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<mi_price_def, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptymi_price_defLoaded = false;
        protected static mi_price_def Emptymi_price_defMember = null;

        public static mi_price_def GetByID(Guid? value) 
        {
            mi_price_def rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static mi_price_def GetByID(Guid value) 
        {
            mi_price_def rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptymi_price_defLoaded )
                    {
                        rc = Emptymi_price_defMember;
                    }
                    else
                    {
                        IsEmptymi_price_defLoaded = true;
                        rc = mi_price_def.Find( L => L.mi_price_defID.Equals( value ) ).FirstOrDefault( );
                        Emptymi_price_defMember = rc;
                    }
                }
                else
                {
                    rc = mi_price_def.Find( L => L.mi_price_defID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<mi_price_def> Find(Expression<Func<mi_price_def, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<mi_price_def> Find(Expression<Func<mi_price_def, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<mi_price_def> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<mi_price_def> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<mi_price_def> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<mi_price_def> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<mi_price_def> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<mi_price_def> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "mi_price_defID";
        }

        public object KeyValue()
        {
            return this.mi_price_defID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.mi_seq )
//			{
//				rc = this.mi_seq.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is mi_price_def)
            {
                mi_price_def compare=(mi_price_def)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.mi_price_defID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.mi_seq.ToString();
        }

        public string DescriptorColumn() 
        {
            return "mi_seq";
        }

        public static string GetKeyColumn()
        {
            return "mi_price_defID";
        }        

        public static string GetDescriptorColumn()
        {
            return "mi_seq";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.mi_price_defID;
            }
            set
            {
                m_Internal.mi_price_defID = value;
            }
        }


//        string _mi_seq;
        [LocalData]
        public string mi_seq
        {
            get { return m_Internal.mi_seq; }
            set
            {
                if(m_Internal.mi_seq!=value){
                    m_Internal.mi_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _mi_price_seq;
        [LocalData]
        public int? mi_price_seq
        {
            get { return m_Internal.mi_price_seq; }
            set
            {
                if(m_Internal.mi_price_seq!=value){
                    m_Internal.mi_price_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_price_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _effective_from;
        [LocalData]
        public DateTime? effective_from
        {
            get { return m_Internal.effective_from; }
            set
            {
                if(m_Internal.effective_from!=value){
                    m_Internal.effective_from=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="effective_from");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _effective_to;
        [LocalData]
        public DateTime? effective_to
        {
            get { return m_Internal.effective_to; }
            set
            {
                if(m_Internal.effective_to!=value){
                    m_Internal.effective_to=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="effective_to");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _preset_amt_1;
        [LocalData]
        public decimal? preset_amt_1
        {
            get { return m_Internal.preset_amt_1; }
            set
            {
                if(m_Internal.preset_amt_1!=value){
                    m_Internal.preset_amt_1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="preset_amt_1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _preset_amt_2;
        [LocalData]
        public decimal? preset_amt_2
        {
            get { return m_Internal.preset_amt_2; }
            set
            {
                if(m_Internal.preset_amt_2!=value){
                    m_Internal.preset_amt_2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="preset_amt_2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _preset_amt_3;
        [LocalData]
        public decimal? preset_amt_3
        {
            get { return m_Internal.preset_amt_3; }
            set
            {
                if(m_Internal.preset_amt_3!=value){
                    m_Internal.preset_amt_3=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="preset_amt_3");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _preset_amt_4;
        [LocalData]
        public decimal? preset_amt_4
        {
            get { return m_Internal.preset_amt_4; }
            set
            {
                if(m_Internal.preset_amt_4!=value){
                    m_Internal.preset_amt_4=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="preset_amt_4");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _preset_amt_5;
        [LocalData]
        public decimal? preset_amt_5
        {
            get { return m_Internal.preset_amt_5; }
            set
            {
                if(m_Internal.preset_amt_5!=value){
                    m_Internal.preset_amt_5=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="preset_amt_5");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _preset_amt_6;
        [LocalData]
        public decimal? preset_amt_6
        {
            get { return m_Internal.preset_amt_6; }
            set
            {
                if(m_Internal.preset_amt_6!=value){
                    m_Internal.preset_amt_6=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="preset_amt_6");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _preset_amt_7;
        [LocalData]
        public decimal? preset_amt_7
        {
            get { return m_Internal.preset_amt_7; }
            set
            {
                if(m_Internal.preset_amt_7!=value){
                    m_Internal.preset_amt_7=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="preset_amt_7");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _preset_amt_8;
        [LocalData]
        public decimal? preset_amt_8
        {
            get { return m_Internal.preset_amt_8; }
            set
            {
                if(m_Internal.preset_amt_8!=value){
                    m_Internal.preset_amt_8=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="preset_amt_8");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _preset_amt_9;
        [LocalData]
        public decimal? preset_amt_9
        {
            get { return m_Internal.preset_amt_9; }
            set
            {
                if(m_Internal.preset_amt_9!=value){
                    m_Internal.preset_amt_9=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="preset_amt_9");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _preset_amt_10;
        [LocalData]
        public decimal? preset_amt_10
        {
            get { return m_Internal.preset_amt_10; }
            set
            {
                if(m_Internal.preset_amt_10!=value){
                    m_Internal.preset_amt_10=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="preset_amt_10");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _vat_txbl_1;
        [LocalData]
        public decimal? vat_txbl_1
        {
            get { return m_Internal.vat_txbl_1; }
            set
            {
                if(m_Internal.vat_txbl_1!=value){
                    m_Internal.vat_txbl_1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="vat_txbl_1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _vat_txbl_2;
        [LocalData]
        public decimal? vat_txbl_2
        {
            get { return m_Internal.vat_txbl_2; }
            set
            {
                if(m_Internal.vat_txbl_2!=value){
                    m_Internal.vat_txbl_2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="vat_txbl_2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _vat_txbl_3;
        [LocalData]
        public decimal? vat_txbl_3
        {
            get { return m_Internal.vat_txbl_3; }
            set
            {
                if(m_Internal.vat_txbl_3!=value){
                    m_Internal.vat_txbl_3=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="vat_txbl_3");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _vat_txbl_4;
        [LocalData]
        public decimal? vat_txbl_4
        {
            get { return m_Internal.vat_txbl_4; }
            set
            {
                if(m_Internal.vat_txbl_4!=value){
                    m_Internal.vat_txbl_4=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="vat_txbl_4");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _vat_txbl_5;
        [LocalData]
        public decimal? vat_txbl_5
        {
            get { return m_Internal.vat_txbl_5; }
            set
            {
                if(m_Internal.vat_txbl_5!=value){
                    m_Internal.vat_txbl_5=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="vat_txbl_5");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _vat_txbl_6;
        [LocalData]
        public decimal? vat_txbl_6
        {
            get { return m_Internal.vat_txbl_6; }
            set
            {
                if(m_Internal.vat_txbl_6!=value){
                    m_Internal.vat_txbl_6=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="vat_txbl_6");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _vat_txbl_7;
        [LocalData]
        public decimal? vat_txbl_7
        {
            get { return m_Internal.vat_txbl_7; }
            set
            {
                if(m_Internal.vat_txbl_7!=value){
                    m_Internal.vat_txbl_7=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="vat_txbl_7");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _vat_txbl_8;
        [LocalData]
        public decimal? vat_txbl_8
        {
            get { return m_Internal.vat_txbl_8; }
            set
            {
                if(m_Internal.vat_txbl_8!=value){
                    m_Internal.vat_txbl_8=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="vat_txbl_8");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _vat_txbl_9;
        [LocalData]
        public decimal? vat_txbl_9
        {
            get { return m_Internal.vat_txbl_9; }
            set
            {
                if(m_Internal.vat_txbl_9!=value){
                    m_Internal.vat_txbl_9=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="vat_txbl_9");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _vat_txbl_10;
        [LocalData]
        public decimal? vat_txbl_10
        {
            get { return m_Internal.vat_txbl_10; }
            set
            {
                if(m_Internal.vat_txbl_10!=value){
                    m_Internal.vat_txbl_10=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="vat_txbl_10");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _cost_1;
        [LocalData]
        public decimal? cost_1
        {
            get { return m_Internal.cost_1; }
            set
            {
                if(m_Internal.cost_1!=value){
                    m_Internal.cost_1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cost_1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _cost_2;
        [LocalData]
        public decimal? cost_2
        {
            get { return m_Internal.cost_2; }
            set
            {
                if(m_Internal.cost_2!=value){
                    m_Internal.cost_2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cost_2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _cost_3;
        [LocalData]
        public decimal? cost_3
        {
            get { return m_Internal.cost_3; }
            set
            {
                if(m_Internal.cost_3!=value){
                    m_Internal.cost_3=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cost_3");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _cost_4;
        [LocalData]
        public decimal? cost_4
        {
            get { return m_Internal.cost_4; }
            set
            {
                if(m_Internal.cost_4!=value){
                    m_Internal.cost_4=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cost_4");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _cost_5;
        [LocalData]
        public decimal? cost_5
        {
            get { return m_Internal.cost_5; }
            set
            {
                if(m_Internal.cost_5!=value){
                    m_Internal.cost_5=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cost_5");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _cost_6;
        [LocalData]
        public decimal? cost_6
        {
            get { return m_Internal.cost_6; }
            set
            {
                if(m_Internal.cost_6!=value){
                    m_Internal.cost_6=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cost_6");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _cost_7;
        [LocalData]
        public decimal? cost_7
        {
            get { return m_Internal.cost_7; }
            set
            {
                if(m_Internal.cost_7!=value){
                    m_Internal.cost_7=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cost_7");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _cost_8;
        [LocalData]
        public decimal? cost_8
        {
            get { return m_Internal.cost_8; }
            set
            {
                if(m_Internal.cost_8!=value){
                    m_Internal.cost_8=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cost_8");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _cost_9;
        [LocalData]
        public decimal? cost_9
        {
            get { return m_Internal.cost_9; }
            set
            {
                if(m_Internal.cost_9!=value){
                    m_Internal.cost_9=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cost_9");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _cost_10;
        [LocalData]
        public decimal? cost_10
        {
            get { return m_Internal.cost_10; }
            set
            {
                if(m_Internal.cost_10!=value){
                    m_Internal.cost_10=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cost_10");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _tare_weight;
        [LocalData]
        public decimal? tare_weight
        {
            get { return m_Internal.tare_weight; }
            set
            {
                if(m_Internal.tare_weight!=value){
                    m_Internal.tare_weight=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="tare_weight");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _surcharge_tax;
        [LocalData]
        public decimal? surcharge_tax
        {
            get { return m_Internal.surcharge_tax; }
            set
            {
                if(m_Internal.surcharge_tax!=value){
                    m_Internal.surcharge_tax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="surcharge_tax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _em_chg_set_seq;
        [LocalData]
        public int? em_chg_set_seq
        {
            get { return m_Internal.em_chg_set_seq; }
            set
            {
                if(m_Internal.em_chg_set_seq!=value){
                    m_Internal.em_chg_set_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="em_chg_set_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _price_grp_seq;
        [LocalData]
        public int? price_grp_seq
        {
            get { return m_Internal.price_grp_seq; }
            set
            {
                if(m_Internal.price_grp_seq!=value){
                    m_Internal.price_grp_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="price_grp_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _price_tier_seq;
        [LocalData]
        public int? price_tier_seq
        {
            get { return m_Internal.price_tier_seq; }
            set
            {
                if(m_Internal.price_tier_seq!=value){
                    m_Internal.price_tier_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="price_tier_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _em_repl_status;
        [LocalData]
        public string em_repl_status
        {
            get { return m_Internal.em_repl_status; }
            set
            {
                if(m_Internal.em_repl_status!=value){
                    m_Internal.em_repl_status=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="em_repl_status");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _comments;
        [LocalData]
        public string comments
        {
            get { return m_Internal.comments; }
            set
            {
                if(m_Internal.comments!=value){
                    m_Internal.comments=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="comments");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ob_rsvd01;
        [LocalData]
        public string ob_rsvd01
        {
            get { return m_Internal.ob_rsvd01; }
            set
            {
                if(m_Internal.ob_rsvd01!=value){
                    m_Internal.ob_rsvd01=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_rsvd01");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ob_rsvd02;
        [LocalData]
        public string ob_rsvd02
        {
            get { return m_Internal.ob_rsvd02; }
            set
            {
                if(m_Internal.ob_rsvd02!=value){
                    m_Internal.ob_rsvd02=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_rsvd02");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ob_rsvd03;
        [LocalData]
        public string ob_rsvd03
        {
            get { return m_Internal.ob_rsvd03; }
            set
            {
                if(m_Internal.ob_rsvd03!=value){
                    m_Internal.ob_rsvd03=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_rsvd03");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ob_rsvd04;
        [LocalData]
        public string ob_rsvd04
        {
            get { return m_Internal.ob_rsvd04; }
            set
            {
                if(m_Internal.ob_rsvd04!=value){
                    m_Internal.ob_rsvd04=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ob_rsvd04");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _last_updated_by;
        [LocalData]
        public string last_updated_by
        {
            get { return m_Internal.last_updated_by; }
            set
            {
                if(m_Internal.last_updated_by!=value){
                    m_Internal.last_updated_by=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="last_updated_by");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _menu_panel_price_01;
        [LocalData]
        public string menu_panel_price_01
        {
            get { return m_Internal.menu_panel_price_01; }
            set
            {
                if(m_Internal.menu_panel_price_01!=value){
                    m_Internal.menu_panel_price_01=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="menu_panel_price_01");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _menu_panel_price_02;
        [LocalData]
        public string menu_panel_price_02
        {
            get { return m_Internal.menu_panel_price_02; }
            set
            {
                if(m_Internal.menu_panel_price_02!=value){
                    m_Internal.menu_panel_price_02=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="menu_panel_price_02");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _menu_panel_price_03;
        [LocalData]
        public string menu_panel_price_03
        {
            get { return m_Internal.menu_panel_price_03; }
            set
            {
                if(m_Internal.menu_panel_price_03!=value){
                    m_Internal.menu_panel_price_03=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="menu_panel_price_03");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _menu_panel_price_04;
        [LocalData]
        public string menu_panel_price_04
        {
            get { return m_Internal.menu_panel_price_04; }
            set
            {
                if(m_Internal.menu_panel_price_04!=value){
                    m_Internal.menu_panel_price_04=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="menu_panel_price_04");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _menu_panel_price_05;
        [LocalData]
        public string menu_panel_price_05
        {
            get { return m_Internal.menu_panel_price_05; }
            set
            {
                if(m_Internal.menu_panel_price_05!=value){
                    m_Internal.menu_panel_price_05=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="menu_panel_price_05");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _menu_panel_price_06;
        [LocalData]
        public string menu_panel_price_06
        {
            get { return m_Internal.menu_panel_price_06; }
            set
            {
                if(m_Internal.menu_panel_price_06!=value){
                    m_Internal.menu_panel_price_06=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="menu_panel_price_06");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _menu_panel_price_07;
        [LocalData]
        public string menu_panel_price_07
        {
            get { return m_Internal.menu_panel_price_07; }
            set
            {
                if(m_Internal.menu_panel_price_07!=value){
                    m_Internal.menu_panel_price_07=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="menu_panel_price_07");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _menu_panel_price_08;
        [LocalData]
        public string menu_panel_price_08
        {
            get { return m_Internal.menu_panel_price_08; }
            set
            {
                if(m_Internal.menu_panel_price_08!=value){
                    m_Internal.menu_panel_price_08=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="menu_panel_price_08");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _menu_panel_price_09;
        [LocalData]
        public string menu_panel_price_09
        {
            get { return m_Internal.menu_panel_price_09; }
            set
            {
                if(m_Internal.menu_panel_price_09!=value){
                    m_Internal.menu_panel_price_09=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="menu_panel_price_09");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _menu_panel_price_10;
        [LocalData]
        public string menu_panel_price_10
        {
            get { return m_Internal.menu_panel_price_10; }
            set
            {
                if(m_Internal.menu_panel_price_10!=value){
                    m_Internal.menu_panel_price_10=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="menu_panel_price_10");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _mi_price_defID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid mi_price_defID
        {
            get { return m_Internal.mi_price_defID; }
            set
            {
                if(m_Internal.mi_price_defID!=value){
                    m_Internal.mi_price_defID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_price_defID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<mi_price_def, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface Imi_slu_def : IWCFDataElement
    {
        
        string mi_slu_seq { get; set; }
        
        int? obj_num { get; set; }
        
        string name { get; set; }
        
        int? ts_style_seq { get; set; }
        
        int? last_updated_by { get; set; }
        
        string last_updated_date { get; set; }
        
        int? hht_ts_style_seq { get; set; }
        
        Guid mi_slu_defID { get; set; }
        
        string DataSource { get; set; }

        void Copy( Imi_slu_def _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class Datami_slu_def : Imi_slu_def
    {
        [DataMember]
        public string mi_slu_seq { get; set; }
        [DataMember]
        public int? obj_num { get; set; }
        [DataMember]
        public string name { get; set; }
        [DataMember]
        public int? ts_style_seq { get; set; }
        [DataMember]
        public int? last_updated_by { get; set; }
        [DataMember]
        public string last_updated_date { get; set; }
        [DataMember]
        public int? hht_ts_style_seq { get; set; }
        [DataMember]
        public Guid mi_slu_defID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( Imi_slu_def _Item )
        {
             mi_slu_seq = _Item.mi_slu_seq;			
             obj_num = _Item.obj_num;			
             name = _Item.name;			
             ts_style_seq = _Item.ts_style_seq;			
             last_updated_by = _Item.last_updated_by;			
             last_updated_date = _Item.last_updated_date;			
             hht_ts_style_seq = _Item.hht_ts_style_seq;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new mi_slu_def( this );
        }
    }


    /// <summary>
    /// A class which represents the mi_slu_def table in the RenAix Database.
    /// </summary>
    public partial class mi_slu_def : BaseDataObject<Datami_slu_def>, IActiveRecord, ICallOnCreated, Imi_slu_def
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<mi_slu_def> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<mi_slu_def>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<mi_slu_def> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(mi_slu_def item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                mi_slu_def item=new mi_slu_def();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<mi_slu_def> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public mi_slu_def()
        {
            m_Internal = new Datami_slu_def();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.mi_slu_defID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public mi_slu_def( bool _CallOnCreated )
        {
            m_Internal = new Datami_slu_def();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public mi_slu_def(string connectionString, string providerName) 
        {
            m_Internal = new Datami_slu_def();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.mi_slu_defID = Guid.NewGuid( );     
        }

        public mi_slu_def( Imi_slu_def _Item )
        {
            m_Internal = new Datami_slu_def();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public mi_slu_def( Datami_slu_def _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( Imi_slu_def _Item )
        {
            m_Internal.mi_slu_seq = _Item.mi_slu_seq;			
            m_Internal.obj_num = _Item.obj_num;			
            m_Internal.name = _Item.name;			
            m_Internal.ts_style_seq = _Item.ts_style_seq;			
            m_Internal.last_updated_by = _Item.last_updated_by;			
            m_Internal.last_updated_date = _Item.last_updated_date;			
            m_Internal.hht_ts_style_seq = _Item.hht_ts_style_seq;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new mi_slu_def( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.mi_slu_defID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                mi_slu_def.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<mi_slu_def>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public mi_slu_def(Expression<Func<mi_slu_def, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<mi_slu_def> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<mi_slu_def> _repo;
            
            if(db.TestMode)
            {
                mi_slu_def.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<mi_slu_def>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<mi_slu_def> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static mi_slu_def SingleOrDefault(Expression<Func<mi_slu_def, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static mi_slu_def SingleOrDefault(Expression<Func<mi_slu_def, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<mi_slu_def> repo = GetRepo(connectionString,providerName);
            mi_slu_def single = repo.SingleOrDefault<mi_slu_def>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<mi_slu_def, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<mi_slu_def, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptymi_slu_defLoaded = false;
        protected static mi_slu_def Emptymi_slu_defMember = null;

        public static mi_slu_def GetByID(Guid? value) 
        {
            mi_slu_def rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static mi_slu_def GetByID(Guid value) 
        {
            mi_slu_def rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptymi_slu_defLoaded )
                    {
                        rc = Emptymi_slu_defMember;
                    }
                    else
                    {
                        IsEmptymi_slu_defLoaded = true;
                        rc = mi_slu_def.Find( L => L.mi_slu_defID.Equals( value ) ).FirstOrDefault( );
                        Emptymi_slu_defMember = rc;
                    }
                }
                else
                {
                    rc = mi_slu_def.Find( L => L.mi_slu_defID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<mi_slu_def> Find(Expression<Func<mi_slu_def, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<mi_slu_def> Find(Expression<Func<mi_slu_def, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<mi_slu_def> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<mi_slu_def> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<mi_slu_def> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<mi_slu_def> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<mi_slu_def> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<mi_slu_def> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "mi_slu_defID";
        }

        public object KeyValue()
        {
            return this.mi_slu_defID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.mi_slu_seq )
//			{
//				rc = this.mi_slu_seq.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is mi_slu_def)
            {
                mi_slu_def compare=(mi_slu_def)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.mi_slu_defID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.mi_slu_seq.ToString();
        }

        public string DescriptorColumn() 
        {
            return "mi_slu_seq";
        }

        public static string GetKeyColumn()
        {
            return "mi_slu_defID";
        }        

        public static string GetDescriptorColumn()
        {
            return "mi_slu_seq";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.mi_slu_defID;
            }
            set
            {
                m_Internal.mi_slu_defID = value;
            }
        }


//        string _mi_slu_seq;
        [LocalData]
        public string mi_slu_seq
        {
            get { return m_Internal.mi_slu_seq; }
            set
            {
                if(m_Internal.mi_slu_seq!=value){
                    m_Internal.mi_slu_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_slu_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _obj_num;
        [LocalData]
        public int? obj_num
        {
            get { return m_Internal.obj_num; }
            set
            {
                if(m_Internal.obj_num!=value){
                    m_Internal.obj_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="obj_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _name;
        [LocalData]
        public string name
        {
            get { return m_Internal.name; }
            set
            {
                if(m_Internal.name!=value){
                    m_Internal.name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ts_style_seq;
        [LocalData]
        public int? ts_style_seq
        {
            get { return m_Internal.ts_style_seq; }
            set
            {
                if(m_Internal.ts_style_seq!=value){
                    m_Internal.ts_style_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ts_style_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _last_updated_by;
        [LocalData]
        public int? last_updated_by
        {
            get { return m_Internal.last_updated_by; }
            set
            {
                if(m_Internal.last_updated_by!=value){
                    m_Internal.last_updated_by=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="last_updated_by");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _last_updated_date;
        [LocalData]
        public string last_updated_date
        {
            get { return m_Internal.last_updated_date; }
            set
            {
                if(m_Internal.last_updated_date!=value){
                    m_Internal.last_updated_date=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="last_updated_date");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _hht_ts_style_seq;
        [LocalData]
        public int? hht_ts_style_seq
        {
            get { return m_Internal.hht_ts_style_seq; }
            set
            {
                if(m_Internal.hht_ts_style_seq!=value){
                    m_Internal.hht_ts_style_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="hht_ts_style_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _mi_slu_defID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid mi_slu_defID
        {
            get { return m_Internal.mi_slu_defID; }
            set
            {
                if(m_Internal.mi_slu_defID!=value){
                    m_Internal.mi_slu_defID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mi_slu_defID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<mi_slu_def, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IMicros_Ticket_Detail : IWCFDataElement
    {
        
        DateTime? BUSINESS_DATE { get; set; }
        
        int? RVC_SEQ { get; set; }
        
        int? RVC_OBJ_NUM { get; set; }
        
        string NAME { get; set; }
        
        int? UWS_OBJ_NUM { get; set; }
        
        int? CHK_NUM { get; set; }
        
        int? ORDER_TYPE_SEQ { get; set; }
        
        int? CHK_SEQ { get; set; }
        
        int? SRV_PERIOD_SEQ { get; set; }
        
        int? TRANS_EMP_SEQ { get; set; }
        
        int? CHK_EMP_SEQ { get; set; }
        
        int? TRAINING_STATUS { get; set; }
        
        int? FIXED_PERIOD_SEQ { get; set; }
        
        DateTime? DATE_TIME { get; set; }
        
        int? DTL_SEQ { get; set; }
        
        int? TRANS_SEQ { get; set; }
        
        string DTL_TYPE { get; set; }
        
        int? SEAT { get; set; }
        
        string RECORD_TYPE { get; set; }
        
        int? DTL_INDEX { get; set; }
        
        string SHARED_NUMERATOR { get; set; }
        
        string SHARED_DENOMINATOR { get; set; }
        
        string RPT_INCLUSIVE_TAX_TTL { get; set; }
        
        string RPT_INCLUSIVE_TAX_TTL_EX { get; set; }
        
        int? ACTIVE_TAXES { get; set; }
        
        string COMM_TTL { get; set; }
        
        int? CHK_CNT { get; set; }
        
        string CHK_TTL { get; set; }
        
        int? RPT_CNT { get; set; }
        
        string RPT_TTL { get; set; }
        
        int? DTL_ID { get; set; }
        
        string DTL_STATUS { get; set; }
        
        string OB_DTL05_VOID_FLAG { get; set; }
        
        int? MI_SEQ { get; set; }
        
        int? MI_OBJ_NUM { get; set; }
        
        string NAME_1 { get; set; }
        
        string NAME_2 { get; set; }
        
        string CRS { get; set; }
        
        string OB_TAX_1_ACTIVE { get; set; }
        
        string OB_TAX_2_ACTIVE { get; set; }
        
        string OB_TAX_3_ACTIVE { get; set; }
        
        string OB_TAX_4_ACTIVE { get; set; }
        
        string OB_TAX_5_ACTIVE { get; set; }
        
        string OB_TAX_6_ACTIVE { get; set; }
        
        string OB_TAX_7_ACTIVE { get; set; }
        
        string OB_TAX_8_ACTIVE { get; set; }
        
        int? SLS_ITMZR_SEQ { get; set; }
        
        int? DSC_ITMZR { get; set; }
        
        int? SVC_ITMZR { get; set; }
        
        int? PRICE_LVL { get; set; }
        
        string SURCHARGE_TAX_TTL { get; set; }
        
        string OB_DTL04_RTN { get; set; }
        
        string TMED_SEQ { get; set; }
        
        string OTHER_EMP_SEQ { get; set; }
        
        string OB_TAX_1_EXEMPT_A { get; set; }
        
        string OB_TAX_2_EXEMPT_A { get; set; }
        
        string OB_TAX_3_EXEMPT_A { get; set; }
        
        string OB_TAX_4_EXEMPT_A { get; set; }
        
        string OB_TAX_5_EXEMPT_A { get; set; }
        
        string OB_TAX_6_EXEMPT_A { get; set; }
        
        string OB_TAX_7_EXEMPT_A { get; set; }
        
        string OB_TAX_8_EXEMPT_A { get; set; }
        
        string EXPIRATION_DATE { get; set; }
        
        string CHG_TIP_TTL { get; set; }
        
        string FRGN_CNCY_TTL { get; set; }
        
        string FRGN_CNCY_NUM_DECIMAL_PLACES { get; set; }
        
        string FRGN_CNCY_SEQ { get; set; }
        
        string OB_TIPS_PAID { get; set; }
        
        string ALLOCATED_TAX_TTL { get; set; }
        
        string REF { get; set; }
        
        string PARENT_DTL_SEQ_A { get; set; }
        
        string PARENT_TRANS_SEQ_A { get; set; }
        
        string REF2 { get; set; }
        
        string DSVC_SEQ { get; set; }
        
        string EMP_MEAL_EMP { get; set; }
        
        string PERCENTAGE { get; set; }
        
        string OB_TAX_1_EXEMPT_B { get; set; }
        
        string OB_TAX_2_EXEMPT_B { get; set; }
        
        string OB_TAX_3_EXEMPT_B { get; set; }
        
        string OB_TAX_4_EXEMPT_B { get; set; }
        
        string OB_TAX_5_EXEMPT_B { get; set; }
        
        string OB_TAX_6_EXEMPT_B { get; set; }
        
        string OB_TAX_7_EXEMPT_B { get; set; }
        
        string OB_TAX_8_EXEMPT_B { get; set; }
        
        string PARENT_DTL_SEQ_B { get; set; }
        
        string PARENT_TRANS_SEQ_B { get; set; }
        
        string PARENT_DTL_ID { get; set; }
        
        string TID_REF { get; set; }
        
        string TID_INST_ID { get; set; }
        
        string D_NI_SEQ { get; set; }
        
        string OB_CHK_REOPENED { get; set; }
        
        string OB_CLOSED_CHECK_EDIT { get; set; }
        
        string ITEM_WEIGHT { get; set; }
        
        string TYPE { get; set; }
        
        string DSC_SUM { get; set; }
        
        int? DSC_CNT { get; set; }
        
        string DSC_TAX { get; set; }
        
        Guid Micros_Ticket_DetailsID { get; set; }
        
        string DataSource { get; set; }

        void Copy( IMicros_Ticket_Detail _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataMicros_Ticket_Detail : IMicros_Ticket_Detail
    {
        [DataMember]
        public DateTime? BUSINESS_DATE { get; set; }
        [DataMember]
        public int? RVC_SEQ { get; set; }
        [DataMember]
        public int? RVC_OBJ_NUM { get; set; }
        [DataMember]
        public string NAME { get; set; }
        [DataMember]
        public int? UWS_OBJ_NUM { get; set; }
        [DataMember]
        public int? CHK_NUM { get; set; }
        [DataMember]
        public int? ORDER_TYPE_SEQ { get; set; }
        [DataMember]
        public int? CHK_SEQ { get; set; }
        [DataMember]
        public int? SRV_PERIOD_SEQ { get; set; }
        [DataMember]
        public int? TRANS_EMP_SEQ { get; set; }
        [DataMember]
        public int? CHK_EMP_SEQ { get; set; }
        [DataMember]
        public int? TRAINING_STATUS { get; set; }
        [DataMember]
        public int? FIXED_PERIOD_SEQ { get; set; }
        [DataMember]
        public DateTime? DATE_TIME { get; set; }
        [DataMember]
        public int? DTL_SEQ { get; set; }
        [DataMember]
        public int? TRANS_SEQ { get; set; }
        [DataMember]
        public string DTL_TYPE { get; set; }
        [DataMember]
        public int? SEAT { get; set; }
        [DataMember]
        public string RECORD_TYPE { get; set; }
        [DataMember]
        public int? DTL_INDEX { get; set; }
        [DataMember]
        public string SHARED_NUMERATOR { get; set; }
        [DataMember]
        public string SHARED_DENOMINATOR { get; set; }
        [DataMember]
        public string RPT_INCLUSIVE_TAX_TTL { get; set; }
        [DataMember]
        public string RPT_INCLUSIVE_TAX_TTL_EX { get; set; }
        [DataMember]
        public int? ACTIVE_TAXES { get; set; }
        [DataMember]
        public string COMM_TTL { get; set; }
        [DataMember]
        public int? CHK_CNT { get; set; }
        [DataMember]
        public string CHK_TTL { get; set; }
        [DataMember]
        public int? RPT_CNT { get; set; }
        [DataMember]
        public string RPT_TTL { get; set; }
        [DataMember]
        public int? DTL_ID { get; set; }
        [DataMember]
        public string DTL_STATUS { get; set; }
        [DataMember]
        public string OB_DTL05_VOID_FLAG { get; set; }
        [DataMember]
        public int? MI_SEQ { get; set; }
        [DataMember]
        public int? MI_OBJ_NUM { get; set; }
        [DataMember]
        public string NAME_1 { get; set; }
        [DataMember]
        public string NAME_2 { get; set; }
        [DataMember]
        public string CRS { get; set; }
        [DataMember]
        public string OB_TAX_1_ACTIVE { get; set; }
        [DataMember]
        public string OB_TAX_2_ACTIVE { get; set; }
        [DataMember]
        public string OB_TAX_3_ACTIVE { get; set; }
        [DataMember]
        public string OB_TAX_4_ACTIVE { get; set; }
        [DataMember]
        public string OB_TAX_5_ACTIVE { get; set; }
        [DataMember]
        public string OB_TAX_6_ACTIVE { get; set; }
        [DataMember]
        public string OB_TAX_7_ACTIVE { get; set; }
        [DataMember]
        public string OB_TAX_8_ACTIVE { get; set; }
        [DataMember]
        public int? SLS_ITMZR_SEQ { get; set; }
        [DataMember]
        public int? DSC_ITMZR { get; set; }
        [DataMember]
        public int? SVC_ITMZR { get; set; }
        [DataMember]
        public int? PRICE_LVL { get; set; }
        [DataMember]
        public string SURCHARGE_TAX_TTL { get; set; }
        [DataMember]
        public string OB_DTL04_RTN { get; set; }
        [DataMember]
        public string TMED_SEQ { get; set; }
        [DataMember]
        public string OTHER_EMP_SEQ { get; set; }
        [DataMember]
        public string OB_TAX_1_EXEMPT_A { get; set; }
        [DataMember]
        public string OB_TAX_2_EXEMPT_A { get; set; }
        [DataMember]
        public string OB_TAX_3_EXEMPT_A { get; set; }
        [DataMember]
        public string OB_TAX_4_EXEMPT_A { get; set; }
        [DataMember]
        public string OB_TAX_5_EXEMPT_A { get; set; }
        [DataMember]
        public string OB_TAX_6_EXEMPT_A { get; set; }
        [DataMember]
        public string OB_TAX_7_EXEMPT_A { get; set; }
        [DataMember]
        public string OB_TAX_8_EXEMPT_A { get; set; }
        [DataMember]
        public string EXPIRATION_DATE { get; set; }
        [DataMember]
        public string CHG_TIP_TTL { get; set; }
        [DataMember]
        public string FRGN_CNCY_TTL { get; set; }
        [DataMember]
        public string FRGN_CNCY_NUM_DECIMAL_PLACES { get; set; }
        [DataMember]
        public string FRGN_CNCY_SEQ { get; set; }
        [DataMember]
        public string OB_TIPS_PAID { get; set; }
        [DataMember]
        public string ALLOCATED_TAX_TTL { get; set; }
        [DataMember]
        public string REF { get; set; }
        [DataMember]
        public string PARENT_DTL_SEQ_A { get; set; }
        [DataMember]
        public string PARENT_TRANS_SEQ_A { get; set; }
        [DataMember]
        public string REF2 { get; set; }
        [DataMember]
        public string DSVC_SEQ { get; set; }
        [DataMember]
        public string EMP_MEAL_EMP { get; set; }
        [DataMember]
        public string PERCENTAGE { get; set; }
        [DataMember]
        public string OB_TAX_1_EXEMPT_B { get; set; }
        [DataMember]
        public string OB_TAX_2_EXEMPT_B { get; set; }
        [DataMember]
        public string OB_TAX_3_EXEMPT_B { get; set; }
        [DataMember]
        public string OB_TAX_4_EXEMPT_B { get; set; }
        [DataMember]
        public string OB_TAX_5_EXEMPT_B { get; set; }
        [DataMember]
        public string OB_TAX_6_EXEMPT_B { get; set; }
        [DataMember]
        public string OB_TAX_7_EXEMPT_B { get; set; }
        [DataMember]
        public string OB_TAX_8_EXEMPT_B { get; set; }
        [DataMember]
        public string PARENT_DTL_SEQ_B { get; set; }
        [DataMember]
        public string PARENT_TRANS_SEQ_B { get; set; }
        [DataMember]
        public string PARENT_DTL_ID { get; set; }
        [DataMember]
        public string TID_REF { get; set; }
        [DataMember]
        public string TID_INST_ID { get; set; }
        [DataMember]
        public string D_NI_SEQ { get; set; }
        [DataMember]
        public string OB_CHK_REOPENED { get; set; }
        [DataMember]
        public string OB_CLOSED_CHECK_EDIT { get; set; }
        [DataMember]
        public string ITEM_WEIGHT { get; set; }
        [DataMember]
        public string TYPE { get; set; }
        [DataMember]
        public string DSC_SUM { get; set; }
        [DataMember]
        public int? DSC_CNT { get; set; }
        [DataMember]
        public string DSC_TAX { get; set; }
        [DataMember]
        public Guid Micros_Ticket_DetailsID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( IMicros_Ticket_Detail _Item )
        {
             BUSINESS_DATE = _Item.BUSINESS_DATE;			
             RVC_SEQ = _Item.RVC_SEQ;			
             RVC_OBJ_NUM = _Item.RVC_OBJ_NUM;			
             NAME = _Item.NAME;			
             UWS_OBJ_NUM = _Item.UWS_OBJ_NUM;			
             CHK_NUM = _Item.CHK_NUM;			
             ORDER_TYPE_SEQ = _Item.ORDER_TYPE_SEQ;			
             CHK_SEQ = _Item.CHK_SEQ;			
             SRV_PERIOD_SEQ = _Item.SRV_PERIOD_SEQ;			
             TRANS_EMP_SEQ = _Item.TRANS_EMP_SEQ;			
             CHK_EMP_SEQ = _Item.CHK_EMP_SEQ;			
             TRAINING_STATUS = _Item.TRAINING_STATUS;			
             FIXED_PERIOD_SEQ = _Item.FIXED_PERIOD_SEQ;			
             DATE_TIME = _Item.DATE_TIME;			
             DTL_SEQ = _Item.DTL_SEQ;			
             TRANS_SEQ = _Item.TRANS_SEQ;			
             DTL_TYPE = _Item.DTL_TYPE;			
             SEAT = _Item.SEAT;			
             RECORD_TYPE = _Item.RECORD_TYPE;			
             DTL_INDEX = _Item.DTL_INDEX;			
             SHARED_NUMERATOR = _Item.SHARED_NUMERATOR;			
             SHARED_DENOMINATOR = _Item.SHARED_DENOMINATOR;			
             RPT_INCLUSIVE_TAX_TTL = _Item.RPT_INCLUSIVE_TAX_TTL;			
             RPT_INCLUSIVE_TAX_TTL_EX = _Item.RPT_INCLUSIVE_TAX_TTL_EX;			
             ACTIVE_TAXES = _Item.ACTIVE_TAXES;			
             COMM_TTL = _Item.COMM_TTL;			
             CHK_CNT = _Item.CHK_CNT;			
             CHK_TTL = _Item.CHK_TTL;			
             RPT_CNT = _Item.RPT_CNT;			
             RPT_TTL = _Item.RPT_TTL;			
             DTL_ID = _Item.DTL_ID;			
             DTL_STATUS = _Item.DTL_STATUS;			
             OB_DTL05_VOID_FLAG = _Item.OB_DTL05_VOID_FLAG;			
             MI_SEQ = _Item.MI_SEQ;			
             MI_OBJ_NUM = _Item.MI_OBJ_NUM;			
             NAME_1 = _Item.NAME_1;			
             NAME_2 = _Item.NAME_2;			
             CRS = _Item.CRS;			
             OB_TAX_1_ACTIVE = _Item.OB_TAX_1_ACTIVE;			
             OB_TAX_2_ACTIVE = _Item.OB_TAX_2_ACTIVE;			
             OB_TAX_3_ACTIVE = _Item.OB_TAX_3_ACTIVE;			
             OB_TAX_4_ACTIVE = _Item.OB_TAX_4_ACTIVE;			
             OB_TAX_5_ACTIVE = _Item.OB_TAX_5_ACTIVE;			
             OB_TAX_6_ACTIVE = _Item.OB_TAX_6_ACTIVE;			
             OB_TAX_7_ACTIVE = _Item.OB_TAX_7_ACTIVE;			
             OB_TAX_8_ACTIVE = _Item.OB_TAX_8_ACTIVE;			
             SLS_ITMZR_SEQ = _Item.SLS_ITMZR_SEQ;			
             DSC_ITMZR = _Item.DSC_ITMZR;			
             SVC_ITMZR = _Item.SVC_ITMZR;			
             PRICE_LVL = _Item.PRICE_LVL;			
             SURCHARGE_TAX_TTL = _Item.SURCHARGE_TAX_TTL;			
             OB_DTL04_RTN = _Item.OB_DTL04_RTN;			
             TMED_SEQ = _Item.TMED_SEQ;			
             OTHER_EMP_SEQ = _Item.OTHER_EMP_SEQ;			
             OB_TAX_1_EXEMPT_A = _Item.OB_TAX_1_EXEMPT_A;			
             OB_TAX_2_EXEMPT_A = _Item.OB_TAX_2_EXEMPT_A;			
             OB_TAX_3_EXEMPT_A = _Item.OB_TAX_3_EXEMPT_A;			
             OB_TAX_4_EXEMPT_A = _Item.OB_TAX_4_EXEMPT_A;			
             OB_TAX_5_EXEMPT_A = _Item.OB_TAX_5_EXEMPT_A;			
             OB_TAX_6_EXEMPT_A = _Item.OB_TAX_6_EXEMPT_A;			
             OB_TAX_7_EXEMPT_A = _Item.OB_TAX_7_EXEMPT_A;			
             OB_TAX_8_EXEMPT_A = _Item.OB_TAX_8_EXEMPT_A;			
             EXPIRATION_DATE = _Item.EXPIRATION_DATE;			
             CHG_TIP_TTL = _Item.CHG_TIP_TTL;			
             FRGN_CNCY_TTL = _Item.FRGN_CNCY_TTL;			
             FRGN_CNCY_NUM_DECIMAL_PLACES = _Item.FRGN_CNCY_NUM_DECIMAL_PLACES;			
             FRGN_CNCY_SEQ = _Item.FRGN_CNCY_SEQ;			
             OB_TIPS_PAID = _Item.OB_TIPS_PAID;			
             ALLOCATED_TAX_TTL = _Item.ALLOCATED_TAX_TTL;			
             REF = _Item.REF;			
             PARENT_DTL_SEQ_A = _Item.PARENT_DTL_SEQ_A;			
             PARENT_TRANS_SEQ_A = _Item.PARENT_TRANS_SEQ_A;			
             REF2 = _Item.REF2;			
             DSVC_SEQ = _Item.DSVC_SEQ;			
             EMP_MEAL_EMP = _Item.EMP_MEAL_EMP;			
             PERCENTAGE = _Item.PERCENTAGE;			
             OB_TAX_1_EXEMPT_B = _Item.OB_TAX_1_EXEMPT_B;			
             OB_TAX_2_EXEMPT_B = _Item.OB_TAX_2_EXEMPT_B;			
             OB_TAX_3_EXEMPT_B = _Item.OB_TAX_3_EXEMPT_B;			
             OB_TAX_4_EXEMPT_B = _Item.OB_TAX_4_EXEMPT_B;			
             OB_TAX_5_EXEMPT_B = _Item.OB_TAX_5_EXEMPT_B;			
             OB_TAX_6_EXEMPT_B = _Item.OB_TAX_6_EXEMPT_B;			
             OB_TAX_7_EXEMPT_B = _Item.OB_TAX_7_EXEMPT_B;			
             OB_TAX_8_EXEMPT_B = _Item.OB_TAX_8_EXEMPT_B;			
             PARENT_DTL_SEQ_B = _Item.PARENT_DTL_SEQ_B;			
             PARENT_TRANS_SEQ_B = _Item.PARENT_TRANS_SEQ_B;			
             PARENT_DTL_ID = _Item.PARENT_DTL_ID;			
             TID_REF = _Item.TID_REF;			
             TID_INST_ID = _Item.TID_INST_ID;			
             D_NI_SEQ = _Item.D_NI_SEQ;			
             OB_CHK_REOPENED = _Item.OB_CHK_REOPENED;			
             OB_CLOSED_CHECK_EDIT = _Item.OB_CLOSED_CHECK_EDIT;			
             ITEM_WEIGHT = _Item.ITEM_WEIGHT;			
             TYPE = _Item.TYPE;			
             DSC_SUM = _Item.DSC_SUM;			
             DSC_CNT = _Item.DSC_CNT;			
             DSC_TAX = _Item.DSC_TAX;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Micros_Ticket_Detail( this );
        }
    }


    /// <summary>
    /// A class which represents the Micros_Ticket_Details table in the RenAix Database.
    /// </summary>
    public partial class Micros_Ticket_Detail : BaseDataObject<DataMicros_Ticket_Detail>, IActiveRecord, ICallOnCreated, IMicros_Ticket_Detail
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Micros_Ticket_Detail> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Micros_Ticket_Detail>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Micros_Ticket_Detail> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Micros_Ticket_Detail item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Micros_Ticket_Detail item=new Micros_Ticket_Detail();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<Micros_Ticket_Detail> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public Micros_Ticket_Detail()
        {
            m_Internal = new DataMicros_Ticket_Detail();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.Micros_Ticket_DetailsID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Micros_Ticket_Detail( bool _CallOnCreated )
        {
            m_Internal = new DataMicros_Ticket_Detail();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Micros_Ticket_Detail(string connectionString, string providerName) 
        {
            m_Internal = new DataMicros_Ticket_Detail();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.Micros_Ticket_DetailsID = Guid.NewGuid( );     
        }

        public Micros_Ticket_Detail( IMicros_Ticket_Detail _Item )
        {
            m_Internal = new DataMicros_Ticket_Detail();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public Micros_Ticket_Detail( DataMicros_Ticket_Detail _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IMicros_Ticket_Detail _Item )
        {
            m_Internal.BUSINESS_DATE = _Item.BUSINESS_DATE;			
            m_Internal.RVC_SEQ = _Item.RVC_SEQ;			
            m_Internal.RVC_OBJ_NUM = _Item.RVC_OBJ_NUM;			
            m_Internal.NAME = _Item.NAME;			
            m_Internal.UWS_OBJ_NUM = _Item.UWS_OBJ_NUM;			
            m_Internal.CHK_NUM = _Item.CHK_NUM;			
            m_Internal.ORDER_TYPE_SEQ = _Item.ORDER_TYPE_SEQ;			
            m_Internal.CHK_SEQ = _Item.CHK_SEQ;			
            m_Internal.SRV_PERIOD_SEQ = _Item.SRV_PERIOD_SEQ;			
            m_Internal.TRANS_EMP_SEQ = _Item.TRANS_EMP_SEQ;			
            m_Internal.CHK_EMP_SEQ = _Item.CHK_EMP_SEQ;			
            m_Internal.TRAINING_STATUS = _Item.TRAINING_STATUS;			
            m_Internal.FIXED_PERIOD_SEQ = _Item.FIXED_PERIOD_SEQ;			
            m_Internal.DATE_TIME = _Item.DATE_TIME;			
            m_Internal.DTL_SEQ = _Item.DTL_SEQ;			
            m_Internal.TRANS_SEQ = _Item.TRANS_SEQ;			
            m_Internal.DTL_TYPE = _Item.DTL_TYPE;			
            m_Internal.SEAT = _Item.SEAT;			
            m_Internal.RECORD_TYPE = _Item.RECORD_TYPE;			
            m_Internal.DTL_INDEX = _Item.DTL_INDEX;			
            m_Internal.SHARED_NUMERATOR = _Item.SHARED_NUMERATOR;			
            m_Internal.SHARED_DENOMINATOR = _Item.SHARED_DENOMINATOR;			
            m_Internal.RPT_INCLUSIVE_TAX_TTL = _Item.RPT_INCLUSIVE_TAX_TTL;			
            m_Internal.RPT_INCLUSIVE_TAX_TTL_EX = _Item.RPT_INCLUSIVE_TAX_TTL_EX;			
            m_Internal.ACTIVE_TAXES = _Item.ACTIVE_TAXES;			
            m_Internal.COMM_TTL = _Item.COMM_TTL;			
            m_Internal.CHK_CNT = _Item.CHK_CNT;			
            m_Internal.CHK_TTL = _Item.CHK_TTL;			
            m_Internal.RPT_CNT = _Item.RPT_CNT;			
            m_Internal.RPT_TTL = _Item.RPT_TTL;			
            m_Internal.DTL_ID = _Item.DTL_ID;			
            m_Internal.DTL_STATUS = _Item.DTL_STATUS;			
            m_Internal.OB_DTL05_VOID_FLAG = _Item.OB_DTL05_VOID_FLAG;			
            m_Internal.MI_SEQ = _Item.MI_SEQ;			
            m_Internal.MI_OBJ_NUM = _Item.MI_OBJ_NUM;			
            m_Internal.NAME_1 = _Item.NAME_1;			
            m_Internal.NAME_2 = _Item.NAME_2;			
            m_Internal.CRS = _Item.CRS;			
            m_Internal.OB_TAX_1_ACTIVE = _Item.OB_TAX_1_ACTIVE;			
            m_Internal.OB_TAX_2_ACTIVE = _Item.OB_TAX_2_ACTIVE;			
            m_Internal.OB_TAX_3_ACTIVE = _Item.OB_TAX_3_ACTIVE;			
            m_Internal.OB_TAX_4_ACTIVE = _Item.OB_TAX_4_ACTIVE;			
            m_Internal.OB_TAX_5_ACTIVE = _Item.OB_TAX_5_ACTIVE;			
            m_Internal.OB_TAX_6_ACTIVE = _Item.OB_TAX_6_ACTIVE;			
            m_Internal.OB_TAX_7_ACTIVE = _Item.OB_TAX_7_ACTIVE;			
            m_Internal.OB_TAX_8_ACTIVE = _Item.OB_TAX_8_ACTIVE;			
            m_Internal.SLS_ITMZR_SEQ = _Item.SLS_ITMZR_SEQ;			
            m_Internal.DSC_ITMZR = _Item.DSC_ITMZR;			
            m_Internal.SVC_ITMZR = _Item.SVC_ITMZR;			
            m_Internal.PRICE_LVL = _Item.PRICE_LVL;			
            m_Internal.SURCHARGE_TAX_TTL = _Item.SURCHARGE_TAX_TTL;			
            m_Internal.OB_DTL04_RTN = _Item.OB_DTL04_RTN;			
            m_Internal.TMED_SEQ = _Item.TMED_SEQ;			
            m_Internal.OTHER_EMP_SEQ = _Item.OTHER_EMP_SEQ;			
            m_Internal.OB_TAX_1_EXEMPT_A = _Item.OB_TAX_1_EXEMPT_A;			
            m_Internal.OB_TAX_2_EXEMPT_A = _Item.OB_TAX_2_EXEMPT_A;			
            m_Internal.OB_TAX_3_EXEMPT_A = _Item.OB_TAX_3_EXEMPT_A;			
            m_Internal.OB_TAX_4_EXEMPT_A = _Item.OB_TAX_4_EXEMPT_A;			
            m_Internal.OB_TAX_5_EXEMPT_A = _Item.OB_TAX_5_EXEMPT_A;			
            m_Internal.OB_TAX_6_EXEMPT_A = _Item.OB_TAX_6_EXEMPT_A;			
            m_Internal.OB_TAX_7_EXEMPT_A = _Item.OB_TAX_7_EXEMPT_A;			
            m_Internal.OB_TAX_8_EXEMPT_A = _Item.OB_TAX_8_EXEMPT_A;			
            m_Internal.EXPIRATION_DATE = _Item.EXPIRATION_DATE;			
            m_Internal.CHG_TIP_TTL = _Item.CHG_TIP_TTL;			
            m_Internal.FRGN_CNCY_TTL = _Item.FRGN_CNCY_TTL;			
            m_Internal.FRGN_CNCY_NUM_DECIMAL_PLACES = _Item.FRGN_CNCY_NUM_DECIMAL_PLACES;			
            m_Internal.FRGN_CNCY_SEQ = _Item.FRGN_CNCY_SEQ;			
            m_Internal.OB_TIPS_PAID = _Item.OB_TIPS_PAID;			
            m_Internal.ALLOCATED_TAX_TTL = _Item.ALLOCATED_TAX_TTL;			
            m_Internal.REF = _Item.REF;			
            m_Internal.PARENT_DTL_SEQ_A = _Item.PARENT_DTL_SEQ_A;			
            m_Internal.PARENT_TRANS_SEQ_A = _Item.PARENT_TRANS_SEQ_A;			
            m_Internal.REF2 = _Item.REF2;			
            m_Internal.DSVC_SEQ = _Item.DSVC_SEQ;			
            m_Internal.EMP_MEAL_EMP = _Item.EMP_MEAL_EMP;			
            m_Internal.PERCENTAGE = _Item.PERCENTAGE;			
            m_Internal.OB_TAX_1_EXEMPT_B = _Item.OB_TAX_1_EXEMPT_B;			
            m_Internal.OB_TAX_2_EXEMPT_B = _Item.OB_TAX_2_EXEMPT_B;			
            m_Internal.OB_TAX_3_EXEMPT_B = _Item.OB_TAX_3_EXEMPT_B;			
            m_Internal.OB_TAX_4_EXEMPT_B = _Item.OB_TAX_4_EXEMPT_B;			
            m_Internal.OB_TAX_5_EXEMPT_B = _Item.OB_TAX_5_EXEMPT_B;			
            m_Internal.OB_TAX_6_EXEMPT_B = _Item.OB_TAX_6_EXEMPT_B;			
            m_Internal.OB_TAX_7_EXEMPT_B = _Item.OB_TAX_7_EXEMPT_B;			
            m_Internal.OB_TAX_8_EXEMPT_B = _Item.OB_TAX_8_EXEMPT_B;			
            m_Internal.PARENT_DTL_SEQ_B = _Item.PARENT_DTL_SEQ_B;			
            m_Internal.PARENT_TRANS_SEQ_B = _Item.PARENT_TRANS_SEQ_B;			
            m_Internal.PARENT_DTL_ID = _Item.PARENT_DTL_ID;			
            m_Internal.TID_REF = _Item.TID_REF;			
            m_Internal.TID_INST_ID = _Item.TID_INST_ID;			
            m_Internal.D_NI_SEQ = _Item.D_NI_SEQ;			
            m_Internal.OB_CHK_REOPENED = _Item.OB_CHK_REOPENED;			
            m_Internal.OB_CLOSED_CHECK_EDIT = _Item.OB_CLOSED_CHECK_EDIT;			
            m_Internal.ITEM_WEIGHT = _Item.ITEM_WEIGHT;			
            m_Internal.TYPE = _Item.TYPE;			
            m_Internal.DSC_SUM = _Item.DSC_SUM;			
            m_Internal.DSC_CNT = _Item.DSC_CNT;			
            m_Internal.DSC_TAX = _Item.DSC_TAX;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new Micros_Ticket_Detail( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.Micros_Ticket_DetailsID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Micros_Ticket_Detail.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Micros_Ticket_Detail>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Micros_Ticket_Detail(Expression<Func<Micros_Ticket_Detail, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Micros_Ticket_Detail> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<Micros_Ticket_Detail> _repo;
            
            if(db.TestMode)
            {
                Micros_Ticket_Detail.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Micros_Ticket_Detail>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Micros_Ticket_Detail> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Micros_Ticket_Detail SingleOrDefault(Expression<Func<Micros_Ticket_Detail, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Micros_Ticket_Detail SingleOrDefault(Expression<Func<Micros_Ticket_Detail, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Micros_Ticket_Detail> repo = GetRepo(connectionString,providerName);
            Micros_Ticket_Detail single = repo.SingleOrDefault<Micros_Ticket_Detail>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Micros_Ticket_Detail, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Micros_Ticket_Detail, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyMicros_Ticket_DetailLoaded = false;
        protected static Micros_Ticket_Detail EmptyMicros_Ticket_DetailMember = null;

        public static Micros_Ticket_Detail GetByID(Guid? value) 
        {
            Micros_Ticket_Detail rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Micros_Ticket_Detail GetByID(Guid value) 
        {
            Micros_Ticket_Detail rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyMicros_Ticket_DetailLoaded )
                    {
                        rc = EmptyMicros_Ticket_DetailMember;
                    }
                    else
                    {
                        IsEmptyMicros_Ticket_DetailLoaded = true;
                        rc = Micros_Ticket_Detail.Find( L => L.Micros_Ticket_DetailsID.Equals( value ) ).FirstOrDefault( );
                        EmptyMicros_Ticket_DetailMember = rc;
                    }
                }
                else
                {
                    rc = Micros_Ticket_Detail.Find( L => L.Micros_Ticket_DetailsID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Micros_Ticket_Detail> Find(Expression<Func<Micros_Ticket_Detail, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Micros_Ticket_Detail> Find(Expression<Func<Micros_Ticket_Detail, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Micros_Ticket_Detail> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Micros_Ticket_Detail> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Micros_Ticket_Detail> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Micros_Ticket_Detail> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Micros_Ticket_Detail> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Micros_Ticket_Detail> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Micros_Ticket_DetailsID";
        }

        public object KeyValue()
        {
            return this.Micros_Ticket_DetailsID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.NAME )
//			{
//				rc = this.NAME.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Micros_Ticket_Detail)
            {
                Micros_Ticket_Detail compare=(Micros_Ticket_Detail)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.Micros_Ticket_DetailsID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.NAME.ToString();
        }

        public string DescriptorColumn() 
        {
            return "NAME";
        }

        public static string GetKeyColumn()
        {
            return "Micros_Ticket_DetailsID";
        }        

        public static string GetDescriptorColumn()
        {
            return "NAME";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.Micros_Ticket_DetailsID;
            }
            set
            {
                m_Internal.Micros_Ticket_DetailsID = value;
            }
        }


//        DateTime? _BUSINESS_DATE;
        [LocalData]
        public DateTime? BUSINESS_DATE
        {
            get { return m_Internal.BUSINESS_DATE; }
            set
            {
                if(m_Internal.BUSINESS_DATE!=value){
                    m_Internal.BUSINESS_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BUSINESS_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _RVC_SEQ;
        [LocalData]
        public int? RVC_SEQ
        {
            get { return m_Internal.RVC_SEQ; }
            set
            {
                if(m_Internal.RVC_SEQ!=value){
                    m_Internal.RVC_SEQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RVC_SEQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _RVC_OBJ_NUM;
        [LocalData]
        public int? RVC_OBJ_NUM
        {
            get { return m_Internal.RVC_OBJ_NUM; }
            set
            {
                if(m_Internal.RVC_OBJ_NUM!=value){
                    m_Internal.RVC_OBJ_NUM=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RVC_OBJ_NUM");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _NAME;
        [LocalData]
        public string NAME
        {
            get { return m_Internal.NAME; }
            set
            {
                if(m_Internal.NAME!=value){
                    m_Internal.NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _UWS_OBJ_NUM;
        [LocalData]
        public int? UWS_OBJ_NUM
        {
            get { return m_Internal.UWS_OBJ_NUM; }
            set
            {
                if(m_Internal.UWS_OBJ_NUM!=value){
                    m_Internal.UWS_OBJ_NUM=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UWS_OBJ_NUM");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _CHK_NUM;
        [LocalData]
        public int? CHK_NUM
        {
            get { return m_Internal.CHK_NUM; }
            set
            {
                if(m_Internal.CHK_NUM!=value){
                    m_Internal.CHK_NUM=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CHK_NUM");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ORDER_TYPE_SEQ;
        [LocalData]
        public int? ORDER_TYPE_SEQ
        {
            get { return m_Internal.ORDER_TYPE_SEQ; }
            set
            {
                if(m_Internal.ORDER_TYPE_SEQ!=value){
                    m_Internal.ORDER_TYPE_SEQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ORDER_TYPE_SEQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _CHK_SEQ;
        [LocalData]
        public int? CHK_SEQ
        {
            get { return m_Internal.CHK_SEQ; }
            set
            {
                if(m_Internal.CHK_SEQ!=value){
                    m_Internal.CHK_SEQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CHK_SEQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _SRV_PERIOD_SEQ;
        [LocalData]
        public int? SRV_PERIOD_SEQ
        {
            get { return m_Internal.SRV_PERIOD_SEQ; }
            set
            {
                if(m_Internal.SRV_PERIOD_SEQ!=value){
                    m_Internal.SRV_PERIOD_SEQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SRV_PERIOD_SEQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TRANS_EMP_SEQ;
        [LocalData]
        public int? TRANS_EMP_SEQ
        {
            get { return m_Internal.TRANS_EMP_SEQ; }
            set
            {
                if(m_Internal.TRANS_EMP_SEQ!=value){
                    m_Internal.TRANS_EMP_SEQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TRANS_EMP_SEQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _CHK_EMP_SEQ;
        [LocalData]
        public int? CHK_EMP_SEQ
        {
            get { return m_Internal.CHK_EMP_SEQ; }
            set
            {
                if(m_Internal.CHK_EMP_SEQ!=value){
                    m_Internal.CHK_EMP_SEQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CHK_EMP_SEQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TRAINING_STATUS;
        [LocalData]
        public int? TRAINING_STATUS
        {
            get { return m_Internal.TRAINING_STATUS; }
            set
            {
                if(m_Internal.TRAINING_STATUS!=value){
                    m_Internal.TRAINING_STATUS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TRAINING_STATUS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _FIXED_PERIOD_SEQ;
        [LocalData]
        public int? FIXED_PERIOD_SEQ
        {
            get { return m_Internal.FIXED_PERIOD_SEQ; }
            set
            {
                if(m_Internal.FIXED_PERIOD_SEQ!=value){
                    m_Internal.FIXED_PERIOD_SEQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FIXED_PERIOD_SEQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _DATE_TIME;
        [LocalData]
        public DateTime? DATE_TIME
        {
            get { return m_Internal.DATE_TIME; }
            set
            {
                if(m_Internal.DATE_TIME!=value){
                    m_Internal.DATE_TIME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DATE_TIME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _DTL_SEQ;
        [LocalData]
        public int? DTL_SEQ
        {
            get { return m_Internal.DTL_SEQ; }
            set
            {
                if(m_Internal.DTL_SEQ!=value){
                    m_Internal.DTL_SEQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DTL_SEQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TRANS_SEQ;
        [LocalData]
        public int? TRANS_SEQ
        {
            get { return m_Internal.TRANS_SEQ; }
            set
            {
                if(m_Internal.TRANS_SEQ!=value){
                    m_Internal.TRANS_SEQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TRANS_SEQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DTL_TYPE;
        [LocalData]
        public string DTL_TYPE
        {
            get { return m_Internal.DTL_TYPE; }
            set
            {
                if(m_Internal.DTL_TYPE!=value){
                    m_Internal.DTL_TYPE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DTL_TYPE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _SEAT;
        [LocalData]
        public int? SEAT
        {
            get { return m_Internal.SEAT; }
            set
            {
                if(m_Internal.SEAT!=value){
                    m_Internal.SEAT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SEAT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RECORD_TYPE;
        [LocalData]
        public string RECORD_TYPE
        {
            get { return m_Internal.RECORD_TYPE; }
            set
            {
                if(m_Internal.RECORD_TYPE!=value){
                    m_Internal.RECORD_TYPE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RECORD_TYPE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _DTL_INDEX;
        [LocalData]
        public int? DTL_INDEX
        {
            get { return m_Internal.DTL_INDEX; }
            set
            {
                if(m_Internal.DTL_INDEX!=value){
                    m_Internal.DTL_INDEX=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DTL_INDEX");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SHARED_NUMERATOR;
        [LocalData]
        public string SHARED_NUMERATOR
        {
            get { return m_Internal.SHARED_NUMERATOR; }
            set
            {
                if(m_Internal.SHARED_NUMERATOR!=value){
                    m_Internal.SHARED_NUMERATOR=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SHARED_NUMERATOR");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SHARED_DENOMINATOR;
        [LocalData]
        public string SHARED_DENOMINATOR
        {
            get { return m_Internal.SHARED_DENOMINATOR; }
            set
            {
                if(m_Internal.SHARED_DENOMINATOR!=value){
                    m_Internal.SHARED_DENOMINATOR=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SHARED_DENOMINATOR");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RPT_INCLUSIVE_TAX_TTL;
        [LocalData]
        public string RPT_INCLUSIVE_TAX_TTL
        {
            get { return m_Internal.RPT_INCLUSIVE_TAX_TTL; }
            set
            {
                if(m_Internal.RPT_INCLUSIVE_TAX_TTL!=value){
                    m_Internal.RPT_INCLUSIVE_TAX_TTL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RPT_INCLUSIVE_TAX_TTL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RPT_INCLUSIVE_TAX_TTL_EX;
        [LocalData]
        public string RPT_INCLUSIVE_TAX_TTL_EX
        {
            get { return m_Internal.RPT_INCLUSIVE_TAX_TTL_EX; }
            set
            {
                if(m_Internal.RPT_INCLUSIVE_TAX_TTL_EX!=value){
                    m_Internal.RPT_INCLUSIVE_TAX_TTL_EX=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RPT_INCLUSIVE_TAX_TTL_EX");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ACTIVE_TAXES;
        [LocalData]
        public int? ACTIVE_TAXES
        {
            get { return m_Internal.ACTIVE_TAXES; }
            set
            {
                if(m_Internal.ACTIVE_TAXES!=value){
                    m_Internal.ACTIVE_TAXES=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ACTIVE_TAXES");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _COMM_TTL;
        [LocalData]
        public string COMM_TTL
        {
            get { return m_Internal.COMM_TTL; }
            set
            {
                if(m_Internal.COMM_TTL!=value){
                    m_Internal.COMM_TTL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="COMM_TTL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _CHK_CNT;
        [LocalData]
        public int? CHK_CNT
        {
            get { return m_Internal.CHK_CNT; }
            set
            {
                if(m_Internal.CHK_CNT!=value){
                    m_Internal.CHK_CNT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CHK_CNT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CHK_TTL;
        [LocalData]
        public string CHK_TTL
        {
            get { return m_Internal.CHK_TTL; }
            set
            {
                if(m_Internal.CHK_TTL!=value){
                    m_Internal.CHK_TTL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CHK_TTL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _RPT_CNT;
        [LocalData]
        public int? RPT_CNT
        {
            get { return m_Internal.RPT_CNT; }
            set
            {
                if(m_Internal.RPT_CNT!=value){
                    m_Internal.RPT_CNT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RPT_CNT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RPT_TTL;
        [LocalData]
        public string RPT_TTL
        {
            get { return m_Internal.RPT_TTL; }
            set
            {
                if(m_Internal.RPT_TTL!=value){
                    m_Internal.RPT_TTL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RPT_TTL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _DTL_ID;
        [LocalData]
        public int? DTL_ID
        {
            get { return m_Internal.DTL_ID; }
            set
            {
                if(m_Internal.DTL_ID!=value){
                    m_Internal.DTL_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DTL_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DTL_STATUS;
        [LocalData]
        public string DTL_STATUS
        {
            get { return m_Internal.DTL_STATUS; }
            set
            {
                if(m_Internal.DTL_STATUS!=value){
                    m_Internal.DTL_STATUS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DTL_STATUS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_DTL05_VOID_FLAG;
        [LocalData]
        public string OB_DTL05_VOID_FLAG
        {
            get { return m_Internal.OB_DTL05_VOID_FLAG; }
            set
            {
                if(m_Internal.OB_DTL05_VOID_FLAG!=value){
                    m_Internal.OB_DTL05_VOID_FLAG=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_DTL05_VOID_FLAG");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _MI_SEQ;
        [LocalData]
        public int? MI_SEQ
        {
            get { return m_Internal.MI_SEQ; }
            set
            {
                if(m_Internal.MI_SEQ!=value){
                    m_Internal.MI_SEQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MI_SEQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _MI_OBJ_NUM;
        [LocalData]
        public int? MI_OBJ_NUM
        {
            get { return m_Internal.MI_OBJ_NUM; }
            set
            {
                if(m_Internal.MI_OBJ_NUM!=value){
                    m_Internal.MI_OBJ_NUM=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MI_OBJ_NUM");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _NAME_1;
        [LocalData]
        public string NAME_1
        {
            get { return m_Internal.NAME_1; }
            set
            {
                if(m_Internal.NAME_1!=value){
                    m_Internal.NAME_1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NAME_1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _NAME_2;
        [LocalData]
        public string NAME_2
        {
            get { return m_Internal.NAME_2; }
            set
            {
                if(m_Internal.NAME_2!=value){
                    m_Internal.NAME_2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NAME_2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CRS;
        [LocalData]
        public string CRS
        {
            get { return m_Internal.CRS; }
            set
            {
                if(m_Internal.CRS!=value){
                    m_Internal.CRS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CRS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_1_ACTIVE;
        [LocalData]
        public string OB_TAX_1_ACTIVE
        {
            get { return m_Internal.OB_TAX_1_ACTIVE; }
            set
            {
                if(m_Internal.OB_TAX_1_ACTIVE!=value){
                    m_Internal.OB_TAX_1_ACTIVE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_1_ACTIVE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_2_ACTIVE;
        [LocalData]
        public string OB_TAX_2_ACTIVE
        {
            get { return m_Internal.OB_TAX_2_ACTIVE; }
            set
            {
                if(m_Internal.OB_TAX_2_ACTIVE!=value){
                    m_Internal.OB_TAX_2_ACTIVE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_2_ACTIVE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_3_ACTIVE;
        [LocalData]
        public string OB_TAX_3_ACTIVE
        {
            get { return m_Internal.OB_TAX_3_ACTIVE; }
            set
            {
                if(m_Internal.OB_TAX_3_ACTIVE!=value){
                    m_Internal.OB_TAX_3_ACTIVE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_3_ACTIVE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_4_ACTIVE;
        [LocalData]
        public string OB_TAX_4_ACTIVE
        {
            get { return m_Internal.OB_TAX_4_ACTIVE; }
            set
            {
                if(m_Internal.OB_TAX_4_ACTIVE!=value){
                    m_Internal.OB_TAX_4_ACTIVE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_4_ACTIVE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_5_ACTIVE;
        [LocalData]
        public string OB_TAX_5_ACTIVE
        {
            get { return m_Internal.OB_TAX_5_ACTIVE; }
            set
            {
                if(m_Internal.OB_TAX_5_ACTIVE!=value){
                    m_Internal.OB_TAX_5_ACTIVE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_5_ACTIVE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_6_ACTIVE;
        [LocalData]
        public string OB_TAX_6_ACTIVE
        {
            get { return m_Internal.OB_TAX_6_ACTIVE; }
            set
            {
                if(m_Internal.OB_TAX_6_ACTIVE!=value){
                    m_Internal.OB_TAX_6_ACTIVE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_6_ACTIVE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_7_ACTIVE;
        [LocalData]
        public string OB_TAX_7_ACTIVE
        {
            get { return m_Internal.OB_TAX_7_ACTIVE; }
            set
            {
                if(m_Internal.OB_TAX_7_ACTIVE!=value){
                    m_Internal.OB_TAX_7_ACTIVE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_7_ACTIVE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_8_ACTIVE;
        [LocalData]
        public string OB_TAX_8_ACTIVE
        {
            get { return m_Internal.OB_TAX_8_ACTIVE; }
            set
            {
                if(m_Internal.OB_TAX_8_ACTIVE!=value){
                    m_Internal.OB_TAX_8_ACTIVE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_8_ACTIVE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _SLS_ITMZR_SEQ;
        [LocalData]
        public int? SLS_ITMZR_SEQ
        {
            get { return m_Internal.SLS_ITMZR_SEQ; }
            set
            {
                if(m_Internal.SLS_ITMZR_SEQ!=value){
                    m_Internal.SLS_ITMZR_SEQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SLS_ITMZR_SEQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _DSC_ITMZR;
        [LocalData]
        public int? DSC_ITMZR
        {
            get { return m_Internal.DSC_ITMZR; }
            set
            {
                if(m_Internal.DSC_ITMZR!=value){
                    m_Internal.DSC_ITMZR=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DSC_ITMZR");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _SVC_ITMZR;
        [LocalData]
        public int? SVC_ITMZR
        {
            get { return m_Internal.SVC_ITMZR; }
            set
            {
                if(m_Internal.SVC_ITMZR!=value){
                    m_Internal.SVC_ITMZR=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SVC_ITMZR");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _PRICE_LVL;
        [LocalData]
        public int? PRICE_LVL
        {
            get { return m_Internal.PRICE_LVL; }
            set
            {
                if(m_Internal.PRICE_LVL!=value){
                    m_Internal.PRICE_LVL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PRICE_LVL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SURCHARGE_TAX_TTL;
        [LocalData]
        public string SURCHARGE_TAX_TTL
        {
            get { return m_Internal.SURCHARGE_TAX_TTL; }
            set
            {
                if(m_Internal.SURCHARGE_TAX_TTL!=value){
                    m_Internal.SURCHARGE_TAX_TTL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SURCHARGE_TAX_TTL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_DTL04_RTN;
        [LocalData]
        public string OB_DTL04_RTN
        {
            get { return m_Internal.OB_DTL04_RTN; }
            set
            {
                if(m_Internal.OB_DTL04_RTN!=value){
                    m_Internal.OB_DTL04_RTN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_DTL04_RTN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TMED_SEQ;
        [LocalData]
        public string TMED_SEQ
        {
            get { return m_Internal.TMED_SEQ; }
            set
            {
                if(m_Internal.TMED_SEQ!=value){
                    m_Internal.TMED_SEQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TMED_SEQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OTHER_EMP_SEQ;
        [LocalData]
        public string OTHER_EMP_SEQ
        {
            get { return m_Internal.OTHER_EMP_SEQ; }
            set
            {
                if(m_Internal.OTHER_EMP_SEQ!=value){
                    m_Internal.OTHER_EMP_SEQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OTHER_EMP_SEQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_1_EXEMPT_A;
        [LocalData]
        public string OB_TAX_1_EXEMPT_A
        {
            get { return m_Internal.OB_TAX_1_EXEMPT_A; }
            set
            {
                if(m_Internal.OB_TAX_1_EXEMPT_A!=value){
                    m_Internal.OB_TAX_1_EXEMPT_A=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_1_EXEMPT_A");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_2_EXEMPT_A;
        [LocalData]
        public string OB_TAX_2_EXEMPT_A
        {
            get { return m_Internal.OB_TAX_2_EXEMPT_A; }
            set
            {
                if(m_Internal.OB_TAX_2_EXEMPT_A!=value){
                    m_Internal.OB_TAX_2_EXEMPT_A=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_2_EXEMPT_A");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_3_EXEMPT_A;
        [LocalData]
        public string OB_TAX_3_EXEMPT_A
        {
            get { return m_Internal.OB_TAX_3_EXEMPT_A; }
            set
            {
                if(m_Internal.OB_TAX_3_EXEMPT_A!=value){
                    m_Internal.OB_TAX_3_EXEMPT_A=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_3_EXEMPT_A");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_4_EXEMPT_A;
        [LocalData]
        public string OB_TAX_4_EXEMPT_A
        {
            get { return m_Internal.OB_TAX_4_EXEMPT_A; }
            set
            {
                if(m_Internal.OB_TAX_4_EXEMPT_A!=value){
                    m_Internal.OB_TAX_4_EXEMPT_A=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_4_EXEMPT_A");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_5_EXEMPT_A;
        [LocalData]
        public string OB_TAX_5_EXEMPT_A
        {
            get { return m_Internal.OB_TAX_5_EXEMPT_A; }
            set
            {
                if(m_Internal.OB_TAX_5_EXEMPT_A!=value){
                    m_Internal.OB_TAX_5_EXEMPT_A=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_5_EXEMPT_A");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_6_EXEMPT_A;
        [LocalData]
        public string OB_TAX_6_EXEMPT_A
        {
            get { return m_Internal.OB_TAX_6_EXEMPT_A; }
            set
            {
                if(m_Internal.OB_TAX_6_EXEMPT_A!=value){
                    m_Internal.OB_TAX_6_EXEMPT_A=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_6_EXEMPT_A");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_7_EXEMPT_A;
        [LocalData]
        public string OB_TAX_7_EXEMPT_A
        {
            get { return m_Internal.OB_TAX_7_EXEMPT_A; }
            set
            {
                if(m_Internal.OB_TAX_7_EXEMPT_A!=value){
                    m_Internal.OB_TAX_7_EXEMPT_A=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_7_EXEMPT_A");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_8_EXEMPT_A;
        [LocalData]
        public string OB_TAX_8_EXEMPT_A
        {
            get { return m_Internal.OB_TAX_8_EXEMPT_A; }
            set
            {
                if(m_Internal.OB_TAX_8_EXEMPT_A!=value){
                    m_Internal.OB_TAX_8_EXEMPT_A=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_8_EXEMPT_A");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EXPIRATION_DATE;
        [LocalData]
        public string EXPIRATION_DATE
        {
            get { return m_Internal.EXPIRATION_DATE; }
            set
            {
                if(m_Internal.EXPIRATION_DATE!=value){
                    m_Internal.EXPIRATION_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EXPIRATION_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CHG_TIP_TTL;
        [LocalData]
        public string CHG_TIP_TTL
        {
            get { return m_Internal.CHG_TIP_TTL; }
            set
            {
                if(m_Internal.CHG_TIP_TTL!=value){
                    m_Internal.CHG_TIP_TTL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CHG_TIP_TTL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _FRGN_CNCY_TTL;
        [LocalData]
        public string FRGN_CNCY_TTL
        {
            get { return m_Internal.FRGN_CNCY_TTL; }
            set
            {
                if(m_Internal.FRGN_CNCY_TTL!=value){
                    m_Internal.FRGN_CNCY_TTL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FRGN_CNCY_TTL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _FRGN_CNCY_NUM_DECIMAL_PLACES;
        [LocalData]
        public string FRGN_CNCY_NUM_DECIMAL_PLACES
        {
            get { return m_Internal.FRGN_CNCY_NUM_DECIMAL_PLACES; }
            set
            {
                if(m_Internal.FRGN_CNCY_NUM_DECIMAL_PLACES!=value){
                    m_Internal.FRGN_CNCY_NUM_DECIMAL_PLACES=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FRGN_CNCY_NUM_DECIMAL_PLACES");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _FRGN_CNCY_SEQ;
        [LocalData]
        public string FRGN_CNCY_SEQ
        {
            get { return m_Internal.FRGN_CNCY_SEQ; }
            set
            {
                if(m_Internal.FRGN_CNCY_SEQ!=value){
                    m_Internal.FRGN_CNCY_SEQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FRGN_CNCY_SEQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TIPS_PAID;
        [LocalData]
        public string OB_TIPS_PAID
        {
            get { return m_Internal.OB_TIPS_PAID; }
            set
            {
                if(m_Internal.OB_TIPS_PAID!=value){
                    m_Internal.OB_TIPS_PAID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TIPS_PAID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ALLOCATED_TAX_TTL;
        [LocalData]
        public string ALLOCATED_TAX_TTL
        {
            get { return m_Internal.ALLOCATED_TAX_TTL; }
            set
            {
                if(m_Internal.ALLOCATED_TAX_TTL!=value){
                    m_Internal.ALLOCATED_TAX_TTL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ALLOCATED_TAX_TTL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _REF;
        [LocalData]
        public string REF
        {
            get { return m_Internal.REF; }
            set
            {
                if(m_Internal.REF!=value){
                    m_Internal.REF=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REF");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PARENT_DTL_SEQ_A;
        [LocalData]
        public string PARENT_DTL_SEQ_A
        {
            get { return m_Internal.PARENT_DTL_SEQ_A; }
            set
            {
                if(m_Internal.PARENT_DTL_SEQ_A!=value){
                    m_Internal.PARENT_DTL_SEQ_A=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PARENT_DTL_SEQ_A");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PARENT_TRANS_SEQ_A;
        [LocalData]
        public string PARENT_TRANS_SEQ_A
        {
            get { return m_Internal.PARENT_TRANS_SEQ_A; }
            set
            {
                if(m_Internal.PARENT_TRANS_SEQ_A!=value){
                    m_Internal.PARENT_TRANS_SEQ_A=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PARENT_TRANS_SEQ_A");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _REF2;
        [LocalData]
        public string REF2
        {
            get { return m_Internal.REF2; }
            set
            {
                if(m_Internal.REF2!=value){
                    m_Internal.REF2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REF2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DSVC_SEQ;
        [LocalData]
        public string DSVC_SEQ
        {
            get { return m_Internal.DSVC_SEQ; }
            set
            {
                if(m_Internal.DSVC_SEQ!=value){
                    m_Internal.DSVC_SEQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DSVC_SEQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EMP_MEAL_EMP;
        [LocalData]
        public string EMP_MEAL_EMP
        {
            get { return m_Internal.EMP_MEAL_EMP; }
            set
            {
                if(m_Internal.EMP_MEAL_EMP!=value){
                    m_Internal.EMP_MEAL_EMP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EMP_MEAL_EMP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PERCENTAGE;
        [LocalData]
        public string PERCENTAGE
        {
            get { return m_Internal.PERCENTAGE; }
            set
            {
                if(m_Internal.PERCENTAGE!=value){
                    m_Internal.PERCENTAGE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PERCENTAGE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_1_EXEMPT_B;
        [LocalData]
        public string OB_TAX_1_EXEMPT_B
        {
            get { return m_Internal.OB_TAX_1_EXEMPT_B; }
            set
            {
                if(m_Internal.OB_TAX_1_EXEMPT_B!=value){
                    m_Internal.OB_TAX_1_EXEMPT_B=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_1_EXEMPT_B");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_2_EXEMPT_B;
        [LocalData]
        public string OB_TAX_2_EXEMPT_B
        {
            get { return m_Internal.OB_TAX_2_EXEMPT_B; }
            set
            {
                if(m_Internal.OB_TAX_2_EXEMPT_B!=value){
                    m_Internal.OB_TAX_2_EXEMPT_B=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_2_EXEMPT_B");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_3_EXEMPT_B;
        [LocalData]
        public string OB_TAX_3_EXEMPT_B
        {
            get { return m_Internal.OB_TAX_3_EXEMPT_B; }
            set
            {
                if(m_Internal.OB_TAX_3_EXEMPT_B!=value){
                    m_Internal.OB_TAX_3_EXEMPT_B=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_3_EXEMPT_B");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_4_EXEMPT_B;
        [LocalData]
        public string OB_TAX_4_EXEMPT_B
        {
            get { return m_Internal.OB_TAX_4_EXEMPT_B; }
            set
            {
                if(m_Internal.OB_TAX_4_EXEMPT_B!=value){
                    m_Internal.OB_TAX_4_EXEMPT_B=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_4_EXEMPT_B");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_5_EXEMPT_B;
        [LocalData]
        public string OB_TAX_5_EXEMPT_B
        {
            get { return m_Internal.OB_TAX_5_EXEMPT_B; }
            set
            {
                if(m_Internal.OB_TAX_5_EXEMPT_B!=value){
                    m_Internal.OB_TAX_5_EXEMPT_B=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_5_EXEMPT_B");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_6_EXEMPT_B;
        [LocalData]
        public string OB_TAX_6_EXEMPT_B
        {
            get { return m_Internal.OB_TAX_6_EXEMPT_B; }
            set
            {
                if(m_Internal.OB_TAX_6_EXEMPT_B!=value){
                    m_Internal.OB_TAX_6_EXEMPT_B=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_6_EXEMPT_B");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_7_EXEMPT_B;
        [LocalData]
        public string OB_TAX_7_EXEMPT_B
        {
            get { return m_Internal.OB_TAX_7_EXEMPT_B; }
            set
            {
                if(m_Internal.OB_TAX_7_EXEMPT_B!=value){
                    m_Internal.OB_TAX_7_EXEMPT_B=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_7_EXEMPT_B");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_TAX_8_EXEMPT_B;
        [LocalData]
        public string OB_TAX_8_EXEMPT_B
        {
            get { return m_Internal.OB_TAX_8_EXEMPT_B; }
            set
            {
                if(m_Internal.OB_TAX_8_EXEMPT_B!=value){
                    m_Internal.OB_TAX_8_EXEMPT_B=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_TAX_8_EXEMPT_B");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PARENT_DTL_SEQ_B;
        [LocalData]
        public string PARENT_DTL_SEQ_B
        {
            get { return m_Internal.PARENT_DTL_SEQ_B; }
            set
            {
                if(m_Internal.PARENT_DTL_SEQ_B!=value){
                    m_Internal.PARENT_DTL_SEQ_B=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PARENT_DTL_SEQ_B");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PARENT_TRANS_SEQ_B;
        [LocalData]
        public string PARENT_TRANS_SEQ_B
        {
            get { return m_Internal.PARENT_TRANS_SEQ_B; }
            set
            {
                if(m_Internal.PARENT_TRANS_SEQ_B!=value){
                    m_Internal.PARENT_TRANS_SEQ_B=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PARENT_TRANS_SEQ_B");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PARENT_DTL_ID;
        [LocalData]
        public string PARENT_DTL_ID
        {
            get { return m_Internal.PARENT_DTL_ID; }
            set
            {
                if(m_Internal.PARENT_DTL_ID!=value){
                    m_Internal.PARENT_DTL_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PARENT_DTL_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TID_REF;
        [LocalData]
        public string TID_REF
        {
            get { return m_Internal.TID_REF; }
            set
            {
                if(m_Internal.TID_REF!=value){
                    m_Internal.TID_REF=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TID_REF");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TID_INST_ID;
        [LocalData]
        public string TID_INST_ID
        {
            get { return m_Internal.TID_INST_ID; }
            set
            {
                if(m_Internal.TID_INST_ID!=value){
                    m_Internal.TID_INST_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TID_INST_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _D_NI_SEQ;
        [LocalData]
        public string D_NI_SEQ
        {
            get { return m_Internal.D_NI_SEQ; }
            set
            {
                if(m_Internal.D_NI_SEQ!=value){
                    m_Internal.D_NI_SEQ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="D_NI_SEQ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_CHK_REOPENED;
        [LocalData]
        public string OB_CHK_REOPENED
        {
            get { return m_Internal.OB_CHK_REOPENED; }
            set
            {
                if(m_Internal.OB_CHK_REOPENED!=value){
                    m_Internal.OB_CHK_REOPENED=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_CHK_REOPENED");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OB_CLOSED_CHECK_EDIT;
        [LocalData]
        public string OB_CLOSED_CHECK_EDIT
        {
            get { return m_Internal.OB_CLOSED_CHECK_EDIT; }
            set
            {
                if(m_Internal.OB_CLOSED_CHECK_EDIT!=value){
                    m_Internal.OB_CLOSED_CHECK_EDIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OB_CLOSED_CHECK_EDIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ITEM_WEIGHT;
        [LocalData]
        public string ITEM_WEIGHT
        {
            get { return m_Internal.ITEM_WEIGHT; }
            set
            {
                if(m_Internal.ITEM_WEIGHT!=value){
                    m_Internal.ITEM_WEIGHT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ITEM_WEIGHT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TYPE;
        [LocalData]
        public string TYPE
        {
            get { return m_Internal.TYPE; }
            set
            {
                if(m_Internal.TYPE!=value){
                    m_Internal.TYPE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TYPE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DSC_SUM;
        [LocalData]
        public string DSC_SUM
        {
            get { return m_Internal.DSC_SUM; }
            set
            {
                if(m_Internal.DSC_SUM!=value){
                    m_Internal.DSC_SUM=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DSC_SUM");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _DSC_CNT;
        [LocalData]
        public int? DSC_CNT
        {
            get { return m_Internal.DSC_CNT; }
            set
            {
                if(m_Internal.DSC_CNT!=value){
                    m_Internal.DSC_CNT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DSC_CNT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DSC_TAX;
        [LocalData]
        public string DSC_TAX
        {
            get { return m_Internal.DSC_TAX; }
            set
            {
                if(m_Internal.DSC_TAX!=value){
                    m_Internal.DSC_TAX=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DSC_TAX");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _Micros_Ticket_DetailsID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid Micros_Ticket_DetailsID
        {
            get { return m_Internal.Micros_Ticket_DetailsID; }
            set
            {
                if(m_Internal.Micros_Ticket_DetailsID!=value){
                    m_Internal.Micros_Ticket_DetailsID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Micros_Ticket_DetailsID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Micros_Ticket_Detail, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IMicros_Ticket : IWCFDataElement
    {
        
        DateTime? business_date { get; set; }
        
        int? rvc_seq { get; set; }
        
        int? obj_num { get; set; }
        
        string name { get; set; }
        
        int? emp_seq { get; set; }
        
        int? obj_num_emp { get; set; }
        
        string last_name { get; set; }
        
        int? Tbl_Seq { get; set; }
        
        int? Obj_Num_tbl { get; set; }
        
        int? Obj_Name { get; set; }
        
        int? chk_seq { get; set; }
        
        int? chk_num { get; set; }
        
        int? last_uws_seq { get; set; }
        
        int? obj_num_uws { get; set; }
        
        int? order_type_seq { get; set; }
        
        string order_type_name { get; set; }
        
        DateTime? chk_open_date_time { get; set; }
        
        DateTime? chk_clsd_date_time { get; set; }
        
        int? cov_cnt { get; set; }
        
        decimal? auto_svc_ttl { get; set; }
        
        decimal? other_svc_ttl { get; set; }
        
        decimal? sub_ttl { get; set; }
        
        decimal? pymnt_ttl { get; set; }
        
        decimal? amt_due_ttl { get; set; }
        
        decimal? tax_ttl { get; set; }
        
        int? chk_prntd_cnt { get; set; }
        
        int? num_dtl { get; set; }
        
        int? num_mi_dtl { get; set; }
        
        Guid Micros_TicketsID { get; set; }
        
        string DataSource { get; set; }

        void Copy( IMicros_Ticket _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataMicros_Ticket : IMicros_Ticket
    {
        [DataMember]
        public DateTime? business_date { get; set; }
        [DataMember]
        public int? rvc_seq { get; set; }
        [DataMember]
        public int? obj_num { get; set; }
        [DataMember]
        public string name { get; set; }
        [DataMember]
        public int? emp_seq { get; set; }
        [DataMember]
        public int? obj_num_emp { get; set; }
        [DataMember]
        public string last_name { get; set; }
        [DataMember]
        public int? Tbl_Seq { get; set; }
        [DataMember]
        public int? Obj_Num_tbl { get; set; }
        [DataMember]
        public int? Obj_Name { get; set; }
        [DataMember]
        public int? chk_seq { get; set; }
        [DataMember]
        public int? chk_num { get; set; }
        [DataMember]
        public int? last_uws_seq { get; set; }
        [DataMember]
        public int? obj_num_uws { get; set; }
        [DataMember]
        public int? order_type_seq { get; set; }
        [DataMember]
        public string order_type_name { get; set; }
        [DataMember]
        public DateTime? chk_open_date_time { get; set; }
        [DataMember]
        public DateTime? chk_clsd_date_time { get; set; }
        [DataMember]
        public int? cov_cnt { get; set; }
        [DataMember]
        public decimal? auto_svc_ttl { get; set; }
        [DataMember]
        public decimal? other_svc_ttl { get; set; }
        [DataMember]
        public decimal? sub_ttl { get; set; }
        [DataMember]
        public decimal? pymnt_ttl { get; set; }
        [DataMember]
        public decimal? amt_due_ttl { get; set; }
        [DataMember]
        public decimal? tax_ttl { get; set; }
        [DataMember]
        public int? chk_prntd_cnt { get; set; }
        [DataMember]
        public int? num_dtl { get; set; }
        [DataMember]
        public int? num_mi_dtl { get; set; }
        [DataMember]
        public Guid Micros_TicketsID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( IMicros_Ticket _Item )
        {
             business_date = _Item.business_date;			
             rvc_seq = _Item.rvc_seq;			
             obj_num = _Item.obj_num;			
             name = _Item.name;			
             emp_seq = _Item.emp_seq;			
             obj_num_emp = _Item.obj_num_emp;			
             last_name = _Item.last_name;			
             Tbl_Seq = _Item.Tbl_Seq;			
             Obj_Num_tbl = _Item.Obj_Num_tbl;			
             Obj_Name = _Item.Obj_Name;			
             chk_seq = _Item.chk_seq;			
             chk_num = _Item.chk_num;			
             last_uws_seq = _Item.last_uws_seq;			
             obj_num_uws = _Item.obj_num_uws;			
             order_type_seq = _Item.order_type_seq;			
             order_type_name = _Item.order_type_name;			
             chk_open_date_time = _Item.chk_open_date_time;			
             chk_clsd_date_time = _Item.chk_clsd_date_time;			
             cov_cnt = _Item.cov_cnt;			
             auto_svc_ttl = _Item.auto_svc_ttl;			
             other_svc_ttl = _Item.other_svc_ttl;			
             sub_ttl = _Item.sub_ttl;			
             pymnt_ttl = _Item.pymnt_ttl;			
             amt_due_ttl = _Item.amt_due_ttl;			
             tax_ttl = _Item.tax_ttl;			
             chk_prntd_cnt = _Item.chk_prntd_cnt;			
             num_dtl = _Item.num_dtl;			
             num_mi_dtl = _Item.num_mi_dtl;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Micros_Ticket( this );
        }
    }


    /// <summary>
    /// A class which represents the Micros_Tickets table in the RenAix Database.
    /// </summary>
    public partial class Micros_Ticket : BaseDataObject<DataMicros_Ticket>, IActiveRecord, ICallOnCreated, IMicros_Ticket
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Micros_Ticket> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Micros_Ticket>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Micros_Ticket> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Micros_Ticket item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Micros_Ticket item=new Micros_Ticket();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<Micros_Ticket> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public Micros_Ticket()
        {
            m_Internal = new DataMicros_Ticket();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.Micros_TicketsID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Micros_Ticket( bool _CallOnCreated )
        {
            m_Internal = new DataMicros_Ticket();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Micros_Ticket(string connectionString, string providerName) 
        {
            m_Internal = new DataMicros_Ticket();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.Micros_TicketsID = Guid.NewGuid( );     
        }

        public Micros_Ticket( IMicros_Ticket _Item )
        {
            m_Internal = new DataMicros_Ticket();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public Micros_Ticket( DataMicros_Ticket _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IMicros_Ticket _Item )
        {
            m_Internal.business_date = _Item.business_date;			
            m_Internal.rvc_seq = _Item.rvc_seq;			
            m_Internal.obj_num = _Item.obj_num;			
            m_Internal.name = _Item.name;			
            m_Internal.emp_seq = _Item.emp_seq;			
            m_Internal.obj_num_emp = _Item.obj_num_emp;			
            m_Internal.last_name = _Item.last_name;			
            m_Internal.Tbl_Seq = _Item.Tbl_Seq;			
            m_Internal.Obj_Num_tbl = _Item.Obj_Num_tbl;			
            m_Internal.Obj_Name = _Item.Obj_Name;			
            m_Internal.chk_seq = _Item.chk_seq;			
            m_Internal.chk_num = _Item.chk_num;			
            m_Internal.last_uws_seq = _Item.last_uws_seq;			
            m_Internal.obj_num_uws = _Item.obj_num_uws;			
            m_Internal.order_type_seq = _Item.order_type_seq;			
            m_Internal.order_type_name = _Item.order_type_name;			
            m_Internal.chk_open_date_time = _Item.chk_open_date_time;			
            m_Internal.chk_clsd_date_time = _Item.chk_clsd_date_time;			
            m_Internal.cov_cnt = _Item.cov_cnt;			
            m_Internal.auto_svc_ttl = _Item.auto_svc_ttl;			
            m_Internal.other_svc_ttl = _Item.other_svc_ttl;			
            m_Internal.sub_ttl = _Item.sub_ttl;			
            m_Internal.pymnt_ttl = _Item.pymnt_ttl;			
            m_Internal.amt_due_ttl = _Item.amt_due_ttl;			
            m_Internal.tax_ttl = _Item.tax_ttl;			
            m_Internal.chk_prntd_cnt = _Item.chk_prntd_cnt;			
            m_Internal.num_dtl = _Item.num_dtl;			
            m_Internal.num_mi_dtl = _Item.num_mi_dtl;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new Micros_Ticket( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.Micros_TicketsID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Micros_Ticket.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Micros_Ticket>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Micros_Ticket(Expression<Func<Micros_Ticket, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Micros_Ticket> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<Micros_Ticket> _repo;
            
            if(db.TestMode)
            {
                Micros_Ticket.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Micros_Ticket>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Micros_Ticket> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Micros_Ticket SingleOrDefault(Expression<Func<Micros_Ticket, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Micros_Ticket SingleOrDefault(Expression<Func<Micros_Ticket, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Micros_Ticket> repo = GetRepo(connectionString,providerName);
            Micros_Ticket single = repo.SingleOrDefault<Micros_Ticket>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Micros_Ticket, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Micros_Ticket, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyMicros_TicketLoaded = false;
        protected static Micros_Ticket EmptyMicros_TicketMember = null;

        public static Micros_Ticket GetByID(Guid? value) 
        {
            Micros_Ticket rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Micros_Ticket GetByID(Guid value) 
        {
            Micros_Ticket rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyMicros_TicketLoaded )
                    {
                        rc = EmptyMicros_TicketMember;
                    }
                    else
                    {
                        IsEmptyMicros_TicketLoaded = true;
                        rc = Micros_Ticket.Find( L => L.Micros_TicketsID.Equals( value ) ).FirstOrDefault( );
                        EmptyMicros_TicketMember = rc;
                    }
                }
                else
                {
                    rc = Micros_Ticket.Find( L => L.Micros_TicketsID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Micros_Ticket> Find(Expression<Func<Micros_Ticket, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Micros_Ticket> Find(Expression<Func<Micros_Ticket, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Micros_Ticket> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Micros_Ticket> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Micros_Ticket> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Micros_Ticket> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Micros_Ticket> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Micros_Ticket> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Micros_TicketsID";
        }

        public object KeyValue()
        {
            return this.Micros_TicketsID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.name )
//			{
//				rc = this.name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Micros_Ticket)
            {
                Micros_Ticket compare=(Micros_Ticket)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.Micros_TicketsID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "name";
        }

        public static string GetKeyColumn()
        {
            return "Micros_TicketsID";
        }        

        public static string GetDescriptorColumn()
        {
            return "name";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.Micros_TicketsID;
            }
            set
            {
                m_Internal.Micros_TicketsID = value;
            }
        }


//        DateTime? _business_date;
        [LocalData]
        public DateTime? business_date
        {
            get { return m_Internal.business_date; }
            set
            {
                if(m_Internal.business_date!=value){
                    m_Internal.business_date=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="business_date");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _rvc_seq;
        [LocalData]
        public int? rvc_seq
        {
            get { return m_Internal.rvc_seq; }
            set
            {
                if(m_Internal.rvc_seq!=value){
                    m_Internal.rvc_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="rvc_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _obj_num;
        [LocalData]
        public int? obj_num
        {
            get { return m_Internal.obj_num; }
            set
            {
                if(m_Internal.obj_num!=value){
                    m_Internal.obj_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="obj_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _name;
        [LocalData]
        public string name
        {
            get { return m_Internal.name; }
            set
            {
                if(m_Internal.name!=value){
                    m_Internal.name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _emp_seq;
        [LocalData]
        public int? emp_seq
        {
            get { return m_Internal.emp_seq; }
            set
            {
                if(m_Internal.emp_seq!=value){
                    m_Internal.emp_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="emp_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _obj_num_emp;
        [LocalData]
        public int? obj_num_emp
        {
            get { return m_Internal.obj_num_emp; }
            set
            {
                if(m_Internal.obj_num_emp!=value){
                    m_Internal.obj_num_emp=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="obj_num_emp");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _last_name;
        [LocalData]
        public string last_name
        {
            get { return m_Internal.last_name; }
            set
            {
                if(m_Internal.last_name!=value){
                    m_Internal.last_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="last_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Tbl_Seq;
        [LocalData]
        public int? Tbl_Seq
        {
            get { return m_Internal.Tbl_Seq; }
            set
            {
                if(m_Internal.Tbl_Seq!=value){
                    m_Internal.Tbl_Seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tbl_Seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Obj_Num_tbl;
        [LocalData]
        public int? Obj_Num_tbl
        {
            get { return m_Internal.Obj_Num_tbl; }
            set
            {
                if(m_Internal.Obj_Num_tbl!=value){
                    m_Internal.Obj_Num_tbl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Obj_Num_tbl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Obj_Name;
        [LocalData]
        public int? Obj_Name
        {
            get { return m_Internal.Obj_Name; }
            set
            {
                if(m_Internal.Obj_Name!=value){
                    m_Internal.Obj_Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Obj_Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _chk_seq;
        [LocalData]
        public int? chk_seq
        {
            get { return m_Internal.chk_seq; }
            set
            {
                if(m_Internal.chk_seq!=value){
                    m_Internal.chk_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="chk_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _chk_num;
        [LocalData]
        public int? chk_num
        {
            get { return m_Internal.chk_num; }
            set
            {
                if(m_Internal.chk_num!=value){
                    m_Internal.chk_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="chk_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _last_uws_seq;
        [LocalData]
        public int? last_uws_seq
        {
            get { return m_Internal.last_uws_seq; }
            set
            {
                if(m_Internal.last_uws_seq!=value){
                    m_Internal.last_uws_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="last_uws_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _obj_num_uws;
        [LocalData]
        public int? obj_num_uws
        {
            get { return m_Internal.obj_num_uws; }
            set
            {
                if(m_Internal.obj_num_uws!=value){
                    m_Internal.obj_num_uws=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="obj_num_uws");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _order_type_seq;
        [LocalData]
        public int? order_type_seq
        {
            get { return m_Internal.order_type_seq; }
            set
            {
                if(m_Internal.order_type_seq!=value){
                    m_Internal.order_type_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="order_type_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _order_type_name;
        [LocalData]
        public string order_type_name
        {
            get { return m_Internal.order_type_name; }
            set
            {
                if(m_Internal.order_type_name!=value){
                    m_Internal.order_type_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="order_type_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _chk_open_date_time;
        [LocalData]
        public DateTime? chk_open_date_time
        {
            get { return m_Internal.chk_open_date_time; }
            set
            {
                if(m_Internal.chk_open_date_time!=value){
                    m_Internal.chk_open_date_time=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="chk_open_date_time");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _chk_clsd_date_time;
        [LocalData]
        public DateTime? chk_clsd_date_time
        {
            get { return m_Internal.chk_clsd_date_time; }
            set
            {
                if(m_Internal.chk_clsd_date_time!=value){
                    m_Internal.chk_clsd_date_time=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="chk_clsd_date_time");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _cov_cnt;
        [LocalData]
        public int? cov_cnt
        {
            get { return m_Internal.cov_cnt; }
            set
            {
                if(m_Internal.cov_cnt!=value){
                    m_Internal.cov_cnt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="cov_cnt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _auto_svc_ttl;
        [LocalData]
        public decimal? auto_svc_ttl
        {
            get { return m_Internal.auto_svc_ttl; }
            set
            {
                if(m_Internal.auto_svc_ttl!=value){
                    m_Internal.auto_svc_ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="auto_svc_ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _other_svc_ttl;
        [LocalData]
        public decimal? other_svc_ttl
        {
            get { return m_Internal.other_svc_ttl; }
            set
            {
                if(m_Internal.other_svc_ttl!=value){
                    m_Internal.other_svc_ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="other_svc_ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _sub_ttl;
        [LocalData]
        public decimal? sub_ttl
        {
            get { return m_Internal.sub_ttl; }
            set
            {
                if(m_Internal.sub_ttl!=value){
                    m_Internal.sub_ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="sub_ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _pymnt_ttl;
        [LocalData]
        public decimal? pymnt_ttl
        {
            get { return m_Internal.pymnt_ttl; }
            set
            {
                if(m_Internal.pymnt_ttl!=value){
                    m_Internal.pymnt_ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="pymnt_ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _amt_due_ttl;
        [LocalData]
        public decimal? amt_due_ttl
        {
            get { return m_Internal.amt_due_ttl; }
            set
            {
                if(m_Internal.amt_due_ttl!=value){
                    m_Internal.amt_due_ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="amt_due_ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _tax_ttl;
        [LocalData]
        public decimal? tax_ttl
        {
            get { return m_Internal.tax_ttl; }
            set
            {
                if(m_Internal.tax_ttl!=value){
                    m_Internal.tax_ttl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="tax_ttl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _chk_prntd_cnt;
        [LocalData]
        public int? chk_prntd_cnt
        {
            get { return m_Internal.chk_prntd_cnt; }
            set
            {
                if(m_Internal.chk_prntd_cnt!=value){
                    m_Internal.chk_prntd_cnt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="chk_prntd_cnt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _num_dtl;
        [LocalData]
        public int? num_dtl
        {
            get { return m_Internal.num_dtl; }
            set
            {
                if(m_Internal.num_dtl!=value){
                    m_Internal.num_dtl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="num_dtl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _num_mi_dtl;
        [LocalData]
        public int? num_mi_dtl
        {
            get { return m_Internal.num_mi_dtl; }
            set
            {
                if(m_Internal.num_mi_dtl!=value){
                    m_Internal.num_mi_dtl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="num_mi_dtl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _Micros_TicketsID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid Micros_TicketsID
        {
            get { return m_Internal.Micros_TicketsID; }
            set
            {
                if(m_Internal.Micros_TicketsID!=value){
                    m_Internal.Micros_TicketsID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Micros_TicketsID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Micros_Ticket, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface Imrsbr_financial : IWCFDataElement
    {
        
        DateTime? BusinessDate { get; set; }
        
        string AdjustmentReasonCode { get; set; }
        
        string AdjustmentYN { get; set; }
        
        decimal? AmountPosted { get; set; }
        
        string ARCompressedYN { get; set; }
        
        string ARCreditAmount { get; set; }
        
        string ARDebitAmount { get; set; }
        
        string ARInvoiceNumber { get; set; }
        
        string ARStatus { get; set; }
        
        string ARTransferDate { get; set; }
        
        string ArrangementCode { get; set; }
        
        string ArrangementDescription { get; set; }
        
        string BillNo { get; set; }
        
        int? CashierID { get; set; }
        
        string CheckNumber { get; set; }
        
        string CurrencyCode { get; set; }
        
        string DepositLedgerCredit { get; set; }
        
        string DepositLedgerDebit { get; set; }
        
        string DisplayYN { get; set; }
        
        decimal? ExchangeRateExcludingCommission { get; set; }
        
        decimal? ExchangeRateForTransaction { get; set; }
        
        string FixedChargesYN { get; set; }
        
        string FolioName { get; set; }
        
        int? FolioWindow { get; set; }
        
        decimal? FoodTax { get; set; }
        
        string ForeignExchangeCommissionAmount { get; set; }
        
        string ForeignExchangeCommissionPercent { get; set; }
        
        string ForeignExchangeType { get; set; }
        
        string Generates { get; set; }
        
        decimal? GrossAmount { get; set; }
        
        string GuestAccountCredit { get; set; }
        
        decimal? GuestAccountDebit { get; set; }
        
        DateTime? InsertDate { get; set; }
        
        string InsertUser { get; set; }
        
        string InternalYN { get; set; }
        
        string InvoiceClosingDate { get; set; }
        
        string InvoiceType { get; set; }
        
        string MarketCode { get; set; }
        
        decimal? MinibarTax { get; set; }
        
        decimal? NetAmount { get; set; }
        
        decimal? OtherTax { get; set; }
        
        string PackageAccountCredit { get; set; }
        
        string PackageAccountDebit { get; set; }
        
        string ParrallelCurrencyCode { get; set; }
        
        decimal? Price { get; set; }
        
        string Product { get; set; }
        
        string Property { get; set; }
        
        int? QuantityOfProduct { get; set; }
        
        string RateCode { get; set; }
        
        string ReceiptNumber { get; set; }
        
        string Reference { get; set; }
        
        string Remark { get; set; }
        
        decimal? RevenueAmount { get; set; }
        
        string RoomClass { get; set; }
        
        int? RoomNumber { get; set; }
        
        decimal? RoomTax { get; set; }
        
        string SourceCode { get; set; }
        
        string SummaryReferenceCode { get; set; }
        
        string TACommissionable { get; set; }
        
        string TaxDeferredYN { get; set; }
        
        string TaxGeneratedYN { get; set; }
        
        string TaxInclusiveYN { get; set; }
        
        decimal? TransactionAmount { get; set; }
        
        string TransactionCode { get; set; }
        
        string TransactionCodeDescription { get; set; }
        
        string TransactionCodeGroup { get; set; }
        
        string TransactionCodeSubgroup { get; set; }
        
        DateTime? TransactionDate { get; set; }
        
        string TransactionGroupType { get; set; }
        
        string TransactionType { get; set; }
        
        string TransferDate { get; set; }
        
        decimal? GrossAmount2 { get; set; }
        
        decimal? NetAmount2 { get; set; }
        
        DateTime? UpdateDate { get; set; }
        
        string UpdateUser { get; set; }
        
        Guid mrsbr_financialID { get; set; }
        
        string DataSource { get; set; }

        void Copy( Imrsbr_financial _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class Datamrsbr_financial : Imrsbr_financial
    {
        [DataMember]
        public DateTime? BusinessDate { get; set; }
        [DataMember]
        public string AdjustmentReasonCode { get; set; }
        [DataMember]
        public string AdjustmentYN { get; set; }
        [DataMember]
        public decimal? AmountPosted { get; set; }
        [DataMember]
        public string ARCompressedYN { get; set; }
        [DataMember]
        public string ARCreditAmount { get; set; }
        [DataMember]
        public string ARDebitAmount { get; set; }
        [DataMember]
        public string ARInvoiceNumber { get; set; }
        [DataMember]
        public string ARStatus { get; set; }
        [DataMember]
        public string ARTransferDate { get; set; }
        [DataMember]
        public string ArrangementCode { get; set; }
        [DataMember]
        public string ArrangementDescription { get; set; }
        [DataMember]
        public string BillNo { get; set; }
        [DataMember]
        public int? CashierID { get; set; }
        [DataMember]
        public string CheckNumber { get; set; }
        [DataMember]
        public string CurrencyCode { get; set; }
        [DataMember]
        public string DepositLedgerCredit { get; set; }
        [DataMember]
        public string DepositLedgerDebit { get; set; }
        [DataMember]
        public string DisplayYN { get; set; }
        [DataMember]
        public decimal? ExchangeRateExcludingCommission { get; set; }
        [DataMember]
        public decimal? ExchangeRateForTransaction { get; set; }
        [DataMember]
        public string FixedChargesYN { get; set; }
        [DataMember]
        public string FolioName { get; set; }
        [DataMember]
        public int? FolioWindow { get; set; }
        [DataMember]
        public decimal? FoodTax { get; set; }
        [DataMember]
        public string ForeignExchangeCommissionAmount { get; set; }
        [DataMember]
        public string ForeignExchangeCommissionPercent { get; set; }
        [DataMember]
        public string ForeignExchangeType { get; set; }
        [DataMember]
        public string Generates { get; set; }
        [DataMember]
        public decimal? GrossAmount { get; set; }
        [DataMember]
        public string GuestAccountCredit { get; set; }
        [DataMember]
        public decimal? GuestAccountDebit { get; set; }
        [DataMember]
        public DateTime? InsertDate { get; set; }
        [DataMember]
        public string InsertUser { get; set; }
        [DataMember]
        public string InternalYN { get; set; }
        [DataMember]
        public string InvoiceClosingDate { get; set; }
        [DataMember]
        public string InvoiceType { get; set; }
        [DataMember]
        public string MarketCode { get; set; }
        [DataMember]
        public decimal? MinibarTax { get; set; }
        [DataMember]
        public decimal? NetAmount { get; set; }
        [DataMember]
        public decimal? OtherTax { get; set; }
        [DataMember]
        public string PackageAccountCredit { get; set; }
        [DataMember]
        public string PackageAccountDebit { get; set; }
        [DataMember]
        public string ParrallelCurrencyCode { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public string Product { get; set; }
        [DataMember]
        public string Property { get; set; }
        [DataMember]
        public int? QuantityOfProduct { get; set; }
        [DataMember]
        public string RateCode { get; set; }
        [DataMember]
        public string ReceiptNumber { get; set; }
        [DataMember]
        public string Reference { get; set; }
        [DataMember]
        public string Remark { get; set; }
        [DataMember]
        public decimal? RevenueAmount { get; set; }
        [DataMember]
        public string RoomClass { get; set; }
        [DataMember]
        public int? RoomNumber { get; set; }
        [DataMember]
        public decimal? RoomTax { get; set; }
        [DataMember]
        public string SourceCode { get; set; }
        [DataMember]
        public string SummaryReferenceCode { get; set; }
        [DataMember]
        public string TACommissionable { get; set; }
        [DataMember]
        public string TaxDeferredYN { get; set; }
        [DataMember]
        public string TaxGeneratedYN { get; set; }
        [DataMember]
        public string TaxInclusiveYN { get; set; }
        [DataMember]
        public decimal? TransactionAmount { get; set; }
        [DataMember]
        public string TransactionCode { get; set; }
        [DataMember]
        public string TransactionCodeDescription { get; set; }
        [DataMember]
        public string TransactionCodeGroup { get; set; }
        [DataMember]
        public string TransactionCodeSubgroup { get; set; }
        [DataMember]
        public DateTime? TransactionDate { get; set; }
        [DataMember]
        public string TransactionGroupType { get; set; }
        [DataMember]
        public string TransactionType { get; set; }
        [DataMember]
        public string TransferDate { get; set; }
        [DataMember]
        public decimal? GrossAmount2 { get; set; }
        [DataMember]
        public decimal? NetAmount2 { get; set; }
        [DataMember]
        public DateTime? UpdateDate { get; set; }
        [DataMember]
        public string UpdateUser { get; set; }
        [DataMember]
        public Guid mrsbr_financialID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( Imrsbr_financial _Item )
        {
             BusinessDate = _Item.BusinessDate;			
             AdjustmentReasonCode = _Item.AdjustmentReasonCode;			
             AdjustmentYN = _Item.AdjustmentYN;			
             AmountPosted = _Item.AmountPosted;			
             ARCompressedYN = _Item.ARCompressedYN;			
             ARCreditAmount = _Item.ARCreditAmount;			
             ARDebitAmount = _Item.ARDebitAmount;			
             ARInvoiceNumber = _Item.ARInvoiceNumber;			
             ARStatus = _Item.ARStatus;			
             ARTransferDate = _Item.ARTransferDate;			
             ArrangementCode = _Item.ArrangementCode;			
             ArrangementDescription = _Item.ArrangementDescription;			
             BillNo = _Item.BillNo;			
             CashierID = _Item.CashierID;			
             CheckNumber = _Item.CheckNumber;			
             CurrencyCode = _Item.CurrencyCode;			
             DepositLedgerCredit = _Item.DepositLedgerCredit;			
             DepositLedgerDebit = _Item.DepositLedgerDebit;			
             DisplayYN = _Item.DisplayYN;			
             ExchangeRateExcludingCommission = _Item.ExchangeRateExcludingCommission;			
             ExchangeRateForTransaction = _Item.ExchangeRateForTransaction;			
             FixedChargesYN = _Item.FixedChargesYN;			
             FolioName = _Item.FolioName;			
             FolioWindow = _Item.FolioWindow;			
             FoodTax = _Item.FoodTax;			
             ForeignExchangeCommissionAmount = _Item.ForeignExchangeCommissionAmount;			
             ForeignExchangeCommissionPercent = _Item.ForeignExchangeCommissionPercent;			
             ForeignExchangeType = _Item.ForeignExchangeType;			
             Generates = _Item.Generates;			
             GrossAmount = _Item.GrossAmount;			
             GuestAccountCredit = _Item.GuestAccountCredit;			
             GuestAccountDebit = _Item.GuestAccountDebit;			
             InsertDate = _Item.InsertDate;			
             InsertUser = _Item.InsertUser;			
             InternalYN = _Item.InternalYN;			
             InvoiceClosingDate = _Item.InvoiceClosingDate;			
             InvoiceType = _Item.InvoiceType;			
             MarketCode = _Item.MarketCode;			
             MinibarTax = _Item.MinibarTax;			
             NetAmount = _Item.NetAmount;			
             OtherTax = _Item.OtherTax;			
             PackageAccountCredit = _Item.PackageAccountCredit;			
             PackageAccountDebit = _Item.PackageAccountDebit;			
             ParrallelCurrencyCode = _Item.ParrallelCurrencyCode;			
             Price = _Item.Price;			
             Product = _Item.Product;			
             Property = _Item.Property;			
             QuantityOfProduct = _Item.QuantityOfProduct;			
             RateCode = _Item.RateCode;			
             ReceiptNumber = _Item.ReceiptNumber;			
             Reference = _Item.Reference;			
             Remark = _Item.Remark;			
             RevenueAmount = _Item.RevenueAmount;			
             RoomClass = _Item.RoomClass;			
             RoomNumber = _Item.RoomNumber;			
             RoomTax = _Item.RoomTax;			
             SourceCode = _Item.SourceCode;			
             SummaryReferenceCode = _Item.SummaryReferenceCode;			
             TACommissionable = _Item.TACommissionable;			
             TaxDeferredYN = _Item.TaxDeferredYN;			
             TaxGeneratedYN = _Item.TaxGeneratedYN;			
             TaxInclusiveYN = _Item.TaxInclusiveYN;			
             TransactionAmount = _Item.TransactionAmount;			
             TransactionCode = _Item.TransactionCode;			
             TransactionCodeDescription = _Item.TransactionCodeDescription;			
             TransactionCodeGroup = _Item.TransactionCodeGroup;			
             TransactionCodeSubgroup = _Item.TransactionCodeSubgroup;			
             TransactionDate = _Item.TransactionDate;			
             TransactionGroupType = _Item.TransactionGroupType;			
             TransactionType = _Item.TransactionType;			
             TransferDate = _Item.TransferDate;			
             GrossAmount2 = _Item.GrossAmount2;			
             NetAmount2 = _Item.NetAmount2;			
             UpdateDate = _Item.UpdateDate;			
             UpdateUser = _Item.UpdateUser;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new mrsbr_financial( this );
        }
    }


    /// <summary>
    /// A class which represents the mrsbr_financial table in the RenAix Database.
    /// </summary>
    public partial class mrsbr_financial : BaseDataObject<Datamrsbr_financial>, IActiveRecord, ICallOnCreated, Imrsbr_financial
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<mrsbr_financial> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<mrsbr_financial>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<mrsbr_financial> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(mrsbr_financial item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                mrsbr_financial item=new mrsbr_financial();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<mrsbr_financial> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public mrsbr_financial()
        {
            m_Internal = new Datamrsbr_financial();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.mrsbr_financialID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public mrsbr_financial( bool _CallOnCreated )
        {
            m_Internal = new Datamrsbr_financial();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public mrsbr_financial(string connectionString, string providerName) 
        {
            m_Internal = new Datamrsbr_financial();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.mrsbr_financialID = Guid.NewGuid( );     
        }

        public mrsbr_financial( Imrsbr_financial _Item )
        {
            m_Internal = new Datamrsbr_financial();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public mrsbr_financial( Datamrsbr_financial _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( Imrsbr_financial _Item )
        {
            m_Internal.BusinessDate = _Item.BusinessDate;			
            m_Internal.AdjustmentReasonCode = _Item.AdjustmentReasonCode;			
            m_Internal.AdjustmentYN = _Item.AdjustmentYN;			
            m_Internal.AmountPosted = _Item.AmountPosted;			
            m_Internal.ARCompressedYN = _Item.ARCompressedYN;			
            m_Internal.ARCreditAmount = _Item.ARCreditAmount;			
            m_Internal.ARDebitAmount = _Item.ARDebitAmount;			
            m_Internal.ARInvoiceNumber = _Item.ARInvoiceNumber;			
            m_Internal.ARStatus = _Item.ARStatus;			
            m_Internal.ARTransferDate = _Item.ARTransferDate;			
            m_Internal.ArrangementCode = _Item.ArrangementCode;			
            m_Internal.ArrangementDescription = _Item.ArrangementDescription;			
            m_Internal.BillNo = _Item.BillNo;			
            m_Internal.CashierID = _Item.CashierID;			
            m_Internal.CheckNumber = _Item.CheckNumber;			
            m_Internal.CurrencyCode = _Item.CurrencyCode;			
            m_Internal.DepositLedgerCredit = _Item.DepositLedgerCredit;			
            m_Internal.DepositLedgerDebit = _Item.DepositLedgerDebit;			
            m_Internal.DisplayYN = _Item.DisplayYN;			
            m_Internal.ExchangeRateExcludingCommission = _Item.ExchangeRateExcludingCommission;			
            m_Internal.ExchangeRateForTransaction = _Item.ExchangeRateForTransaction;			
            m_Internal.FixedChargesYN = _Item.FixedChargesYN;			
            m_Internal.FolioName = _Item.FolioName;			
            m_Internal.FolioWindow = _Item.FolioWindow;			
            m_Internal.FoodTax = _Item.FoodTax;			
            m_Internal.ForeignExchangeCommissionAmount = _Item.ForeignExchangeCommissionAmount;			
            m_Internal.ForeignExchangeCommissionPercent = _Item.ForeignExchangeCommissionPercent;			
            m_Internal.ForeignExchangeType = _Item.ForeignExchangeType;			
            m_Internal.Generates = _Item.Generates;			
            m_Internal.GrossAmount = _Item.GrossAmount;			
            m_Internal.GuestAccountCredit = _Item.GuestAccountCredit;			
            m_Internal.GuestAccountDebit = _Item.GuestAccountDebit;			
            m_Internal.InsertDate = _Item.InsertDate;			
            m_Internal.InsertUser = _Item.InsertUser;			
            m_Internal.InternalYN = _Item.InternalYN;			
            m_Internal.InvoiceClosingDate = _Item.InvoiceClosingDate;			
            m_Internal.InvoiceType = _Item.InvoiceType;			
            m_Internal.MarketCode = _Item.MarketCode;			
            m_Internal.MinibarTax = _Item.MinibarTax;			
            m_Internal.NetAmount = _Item.NetAmount;			
            m_Internal.OtherTax = _Item.OtherTax;			
            m_Internal.PackageAccountCredit = _Item.PackageAccountCredit;			
            m_Internal.PackageAccountDebit = _Item.PackageAccountDebit;			
            m_Internal.ParrallelCurrencyCode = _Item.ParrallelCurrencyCode;			
            m_Internal.Price = _Item.Price;			
            m_Internal.Product = _Item.Product;			
            m_Internal.Property = _Item.Property;			
            m_Internal.QuantityOfProduct = _Item.QuantityOfProduct;			
            m_Internal.RateCode = _Item.RateCode;			
            m_Internal.ReceiptNumber = _Item.ReceiptNumber;			
            m_Internal.Reference = _Item.Reference;			
            m_Internal.Remark = _Item.Remark;			
            m_Internal.RevenueAmount = _Item.RevenueAmount;			
            m_Internal.RoomClass = _Item.RoomClass;			
            m_Internal.RoomNumber = _Item.RoomNumber;			
            m_Internal.RoomTax = _Item.RoomTax;			
            m_Internal.SourceCode = _Item.SourceCode;			
            m_Internal.SummaryReferenceCode = _Item.SummaryReferenceCode;			
            m_Internal.TACommissionable = _Item.TACommissionable;			
            m_Internal.TaxDeferredYN = _Item.TaxDeferredYN;			
            m_Internal.TaxGeneratedYN = _Item.TaxGeneratedYN;			
            m_Internal.TaxInclusiveYN = _Item.TaxInclusiveYN;			
            m_Internal.TransactionAmount = _Item.TransactionAmount;			
            m_Internal.TransactionCode = _Item.TransactionCode;			
            m_Internal.TransactionCodeDescription = _Item.TransactionCodeDescription;			
            m_Internal.TransactionCodeGroup = _Item.TransactionCodeGroup;			
            m_Internal.TransactionCodeSubgroup = _Item.TransactionCodeSubgroup;			
            m_Internal.TransactionDate = _Item.TransactionDate;			
            m_Internal.TransactionGroupType = _Item.TransactionGroupType;			
            m_Internal.TransactionType = _Item.TransactionType;			
            m_Internal.TransferDate = _Item.TransferDate;			
            m_Internal.GrossAmount2 = _Item.GrossAmount2;			
            m_Internal.NetAmount2 = _Item.NetAmount2;			
            m_Internal.UpdateDate = _Item.UpdateDate;			
            m_Internal.UpdateUser = _Item.UpdateUser;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new mrsbr_financial( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.mrsbr_financialID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                mrsbr_financial.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<mrsbr_financial>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public mrsbr_financial(Expression<Func<mrsbr_financial, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<mrsbr_financial> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<mrsbr_financial> _repo;
            
            if(db.TestMode)
            {
                mrsbr_financial.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<mrsbr_financial>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<mrsbr_financial> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static mrsbr_financial SingleOrDefault(Expression<Func<mrsbr_financial, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static mrsbr_financial SingleOrDefault(Expression<Func<mrsbr_financial, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<mrsbr_financial> repo = GetRepo(connectionString,providerName);
            mrsbr_financial single = repo.SingleOrDefault<mrsbr_financial>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<mrsbr_financial, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<mrsbr_financial, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptymrsbr_financialLoaded = false;
        protected static mrsbr_financial Emptymrsbr_financialMember = null;

        public static mrsbr_financial GetByID(Guid? value) 
        {
            mrsbr_financial rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static mrsbr_financial GetByID(Guid value) 
        {
            mrsbr_financial rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptymrsbr_financialLoaded )
                    {
                        rc = Emptymrsbr_financialMember;
                    }
                    else
                    {
                        IsEmptymrsbr_financialLoaded = true;
                        rc = mrsbr_financial.Find( L => L.mrsbr_financialID.Equals( value ) ).FirstOrDefault( );
                        Emptymrsbr_financialMember = rc;
                    }
                }
                else
                {
                    rc = mrsbr_financial.Find( L => L.mrsbr_financialID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<mrsbr_financial> Find(Expression<Func<mrsbr_financial, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<mrsbr_financial> Find(Expression<Func<mrsbr_financial, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<mrsbr_financial> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<mrsbr_financial> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<mrsbr_financial> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<mrsbr_financial> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<mrsbr_financial> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<mrsbr_financial> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "mrsbr_financialID";
        }

        public object KeyValue()
        {
            return this.mrsbr_financialID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.AdjustmentReasonCode )
//			{
//				rc = this.AdjustmentReasonCode.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is mrsbr_financial)
            {
                mrsbr_financial compare=(mrsbr_financial)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.mrsbr_financialID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.AdjustmentReasonCode.ToString();
        }

        public string DescriptorColumn() 
        {
            return "AdjustmentReasonCode";
        }

        public static string GetKeyColumn()
        {
            return "mrsbr_financialID";
        }        

        public static string GetDescriptorColumn()
        {
            return "AdjustmentReasonCode";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.mrsbr_financialID;
            }
            set
            {
                m_Internal.mrsbr_financialID = value;
            }
        }


//        DateTime? _BusinessDate;
        [LocalData]
        public DateTime? BusinessDate
        {
            get { return m_Internal.BusinessDate; }
            set
            {
                if(m_Internal.BusinessDate!=value){
                    m_Internal.BusinessDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BusinessDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _AdjustmentReasonCode;
        [LocalData]
        public string AdjustmentReasonCode
        {
            get { return m_Internal.AdjustmentReasonCode; }
            set
            {
                if(m_Internal.AdjustmentReasonCode!=value){
                    m_Internal.AdjustmentReasonCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdjustmentReasonCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _AdjustmentYN;
        [LocalData]
        public string AdjustmentYN
        {
            get { return m_Internal.AdjustmentYN; }
            set
            {
                if(m_Internal.AdjustmentYN!=value){
                    m_Internal.AdjustmentYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdjustmentYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _AmountPosted;
        [LocalData]
        public decimal? AmountPosted
        {
            get { return m_Internal.AmountPosted; }
            set
            {
                if(m_Internal.AmountPosted!=value){
                    m_Internal.AmountPosted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AmountPosted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ARCompressedYN;
        [LocalData]
        public string ARCompressedYN
        {
            get { return m_Internal.ARCompressedYN; }
            set
            {
                if(m_Internal.ARCompressedYN!=value){
                    m_Internal.ARCompressedYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ARCompressedYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ARCreditAmount;
        [LocalData]
        public string ARCreditAmount
        {
            get { return m_Internal.ARCreditAmount; }
            set
            {
                if(m_Internal.ARCreditAmount!=value){
                    m_Internal.ARCreditAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ARCreditAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ARDebitAmount;
        [LocalData]
        public string ARDebitAmount
        {
            get { return m_Internal.ARDebitAmount; }
            set
            {
                if(m_Internal.ARDebitAmount!=value){
                    m_Internal.ARDebitAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ARDebitAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ARInvoiceNumber;
        [LocalData]
        public string ARInvoiceNumber
        {
            get { return m_Internal.ARInvoiceNumber; }
            set
            {
                if(m_Internal.ARInvoiceNumber!=value){
                    m_Internal.ARInvoiceNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ARInvoiceNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ARStatus;
        [LocalData]
        public string ARStatus
        {
            get { return m_Internal.ARStatus; }
            set
            {
                if(m_Internal.ARStatus!=value){
                    m_Internal.ARStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ARStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ARTransferDate;
        [LocalData]
        public string ARTransferDate
        {
            get { return m_Internal.ARTransferDate; }
            set
            {
                if(m_Internal.ARTransferDate!=value){
                    m_Internal.ARTransferDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ARTransferDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ArrangementCode;
        [LocalData]
        public string ArrangementCode
        {
            get { return m_Internal.ArrangementCode; }
            set
            {
                if(m_Internal.ArrangementCode!=value){
                    m_Internal.ArrangementCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ArrangementCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ArrangementDescription;
        [LocalData]
        public string ArrangementDescription
        {
            get { return m_Internal.ArrangementDescription; }
            set
            {
                if(m_Internal.ArrangementDescription!=value){
                    m_Internal.ArrangementDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ArrangementDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _BillNo;
        [LocalData]
        public string BillNo
        {
            get { return m_Internal.BillNo; }
            set
            {
                if(m_Internal.BillNo!=value){
                    m_Internal.BillNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BillNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _CashierID;
        [LocalData]
        public int? CashierID
        {
            get { return m_Internal.CashierID; }
            set
            {
                if(m_Internal.CashierID!=value){
                    m_Internal.CashierID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CashierID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CheckNumber;
        [LocalData]
        public string CheckNumber
        {
            get { return m_Internal.CheckNumber; }
            set
            {
                if(m_Internal.CheckNumber!=value){
                    m_Internal.CheckNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CurrencyCode;
        [LocalData]
        public string CurrencyCode
        {
            get { return m_Internal.CurrencyCode; }
            set
            {
                if(m_Internal.CurrencyCode!=value){
                    m_Internal.CurrencyCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CurrencyCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DepositLedgerCredit;
        [LocalData]
        public string DepositLedgerCredit
        {
            get { return m_Internal.DepositLedgerCredit; }
            set
            {
                if(m_Internal.DepositLedgerCredit!=value){
                    m_Internal.DepositLedgerCredit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepositLedgerCredit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DepositLedgerDebit;
        [LocalData]
        public string DepositLedgerDebit
        {
            get { return m_Internal.DepositLedgerDebit; }
            set
            {
                if(m_Internal.DepositLedgerDebit!=value){
                    m_Internal.DepositLedgerDebit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepositLedgerDebit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DisplayYN;
        [LocalData]
        public string DisplayYN
        {
            get { return m_Internal.DisplayYN; }
            set
            {
                if(m_Internal.DisplayYN!=value){
                    m_Internal.DisplayYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _ExchangeRateExcludingCommission;
        [LocalData]
        public decimal? ExchangeRateExcludingCommission
        {
            get { return m_Internal.ExchangeRateExcludingCommission; }
            set
            {
                if(m_Internal.ExchangeRateExcludingCommission!=value){
                    m_Internal.ExchangeRateExcludingCommission=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExchangeRateExcludingCommission");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _ExchangeRateForTransaction;
        [LocalData]
        public decimal? ExchangeRateForTransaction
        {
            get { return m_Internal.ExchangeRateForTransaction; }
            set
            {
                if(m_Internal.ExchangeRateForTransaction!=value){
                    m_Internal.ExchangeRateForTransaction=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExchangeRateForTransaction");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _FixedChargesYN;
        [LocalData]
        public string FixedChargesYN
        {
            get { return m_Internal.FixedChargesYN; }
            set
            {
                if(m_Internal.FixedChargesYN!=value){
                    m_Internal.FixedChargesYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FixedChargesYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _FolioName;
        [LocalData]
        public string FolioName
        {
            get { return m_Internal.FolioName; }
            set
            {
                if(m_Internal.FolioName!=value){
                    m_Internal.FolioName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FolioName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _FolioWindow;
        [LocalData]
        public int? FolioWindow
        {
            get { return m_Internal.FolioWindow; }
            set
            {
                if(m_Internal.FolioWindow!=value){
                    m_Internal.FolioWindow=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FolioWindow");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _FoodTax;
        [LocalData]
        public decimal? FoodTax
        {
            get { return m_Internal.FoodTax; }
            set
            {
                if(m_Internal.FoodTax!=value){
                    m_Internal.FoodTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FoodTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ForeignExchangeCommissionAmount;
        [LocalData]
        public string ForeignExchangeCommissionAmount
        {
            get { return m_Internal.ForeignExchangeCommissionAmount; }
            set
            {
                if(m_Internal.ForeignExchangeCommissionAmount!=value){
                    m_Internal.ForeignExchangeCommissionAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ForeignExchangeCommissionAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ForeignExchangeCommissionPercent;
        [LocalData]
        public string ForeignExchangeCommissionPercent
        {
            get { return m_Internal.ForeignExchangeCommissionPercent; }
            set
            {
                if(m_Internal.ForeignExchangeCommissionPercent!=value){
                    m_Internal.ForeignExchangeCommissionPercent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ForeignExchangeCommissionPercent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ForeignExchangeType;
        [LocalData]
        public string ForeignExchangeType
        {
            get { return m_Internal.ForeignExchangeType; }
            set
            {
                if(m_Internal.ForeignExchangeType!=value){
                    m_Internal.ForeignExchangeType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ForeignExchangeType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Generates;
        [LocalData]
        public string Generates
        {
            get { return m_Internal.Generates; }
            set
            {
                if(m_Internal.Generates!=value){
                    m_Internal.Generates=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Generates");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _GrossAmount;
        [LocalData]
        public decimal? GrossAmount
        {
            get { return m_Internal.GrossAmount; }
            set
            {
                if(m_Internal.GrossAmount!=value){
                    m_Internal.GrossAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GrossAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _GuestAccountCredit;
        [LocalData]
        public string GuestAccountCredit
        {
            get { return m_Internal.GuestAccountCredit; }
            set
            {
                if(m_Internal.GuestAccountCredit!=value){
                    m_Internal.GuestAccountCredit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestAccountCredit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _GuestAccountDebit;
        [LocalData]
        public decimal? GuestAccountDebit
        {
            get { return m_Internal.GuestAccountDebit; }
            set
            {
                if(m_Internal.GuestAccountDebit!=value){
                    m_Internal.GuestAccountDebit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestAccountDebit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _InsertDate;
        [LocalData]
        public DateTime? InsertDate
        {
            get { return m_Internal.InsertDate; }
            set
            {
                if(m_Internal.InsertDate!=value){
                    m_Internal.InsertDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InsertDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _InsertUser;
        [LocalData]
        public string InsertUser
        {
            get { return m_Internal.InsertUser; }
            set
            {
                if(m_Internal.InsertUser!=value){
                    m_Internal.InsertUser=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InsertUser");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _InternalYN;
        [LocalData]
        public string InternalYN
        {
            get { return m_Internal.InternalYN; }
            set
            {
                if(m_Internal.InternalYN!=value){
                    m_Internal.InternalYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InternalYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _InvoiceClosingDate;
        [LocalData]
        public string InvoiceClosingDate
        {
            get { return m_Internal.InvoiceClosingDate; }
            set
            {
                if(m_Internal.InvoiceClosingDate!=value){
                    m_Internal.InvoiceClosingDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InvoiceClosingDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _InvoiceType;
        [LocalData]
        public string InvoiceType
        {
            get { return m_Internal.InvoiceType; }
            set
            {
                if(m_Internal.InvoiceType!=value){
                    m_Internal.InvoiceType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InvoiceType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MarketCode;
        [LocalData]
        public string MarketCode
        {
            get { return m_Internal.MarketCode; }
            set
            {
                if(m_Internal.MarketCode!=value){
                    m_Internal.MarketCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MarketCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _MinibarTax;
        [LocalData]
        public decimal? MinibarTax
        {
            get { return m_Internal.MinibarTax; }
            set
            {
                if(m_Internal.MinibarTax!=value){
                    m_Internal.MinibarTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinibarTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _NetAmount;
        [LocalData]
        public decimal? NetAmount
        {
            get { return m_Internal.NetAmount; }
            set
            {
                if(m_Internal.NetAmount!=value){
                    m_Internal.NetAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NetAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _OtherTax;
        [LocalData]
        public decimal? OtherTax
        {
            get { return m_Internal.OtherTax; }
            set
            {
                if(m_Internal.OtherTax!=value){
                    m_Internal.OtherTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OtherTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PackageAccountCredit;
        [LocalData]
        public string PackageAccountCredit
        {
            get { return m_Internal.PackageAccountCredit; }
            set
            {
                if(m_Internal.PackageAccountCredit!=value){
                    m_Internal.PackageAccountCredit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PackageAccountCredit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PackageAccountDebit;
        [LocalData]
        public string PackageAccountDebit
        {
            get { return m_Internal.PackageAccountDebit; }
            set
            {
                if(m_Internal.PackageAccountDebit!=value){
                    m_Internal.PackageAccountDebit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PackageAccountDebit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ParrallelCurrencyCode;
        [LocalData]
        public string ParrallelCurrencyCode
        {
            get { return m_Internal.ParrallelCurrencyCode; }
            set
            {
                if(m_Internal.ParrallelCurrencyCode!=value){
                    m_Internal.ParrallelCurrencyCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParrallelCurrencyCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Price;
        [LocalData]
        public decimal? Price
        {
            get { return m_Internal.Price; }
            set
            {
                if(m_Internal.Price!=value){
                    m_Internal.Price=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Product;
        [LocalData]
        public string Product
        {
            get { return m_Internal.Product; }
            set
            {
                if(m_Internal.Product!=value){
                    m_Internal.Product=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Product");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Property;
        [LocalData]
        public string Property
        {
            get { return m_Internal.Property; }
            set
            {
                if(m_Internal.Property!=value){
                    m_Internal.Property=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Property");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _QuantityOfProduct;
        [LocalData]
        public int? QuantityOfProduct
        {
            get { return m_Internal.QuantityOfProduct; }
            set
            {
                if(m_Internal.QuantityOfProduct!=value){
                    m_Internal.QuantityOfProduct=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QuantityOfProduct");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RateCode;
        [LocalData]
        public string RateCode
        {
            get { return m_Internal.RateCode; }
            set
            {
                if(m_Internal.RateCode!=value){
                    m_Internal.RateCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RateCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ReceiptNumber;
        [LocalData]
        public string ReceiptNumber
        {
            get { return m_Internal.ReceiptNumber; }
            set
            {
                if(m_Internal.ReceiptNumber!=value){
                    m_Internal.ReceiptNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReceiptNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Reference;
        [LocalData]
        public string Reference
        {
            get { return m_Internal.Reference; }
            set
            {
                if(m_Internal.Reference!=value){
                    m_Internal.Reference=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Reference");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Remark;
        [LocalData]
        public string Remark
        {
            get { return m_Internal.Remark; }
            set
            {
                if(m_Internal.Remark!=value){
                    m_Internal.Remark=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _RevenueAmount;
        [LocalData]
        public decimal? RevenueAmount
        {
            get { return m_Internal.RevenueAmount; }
            set
            {
                if(m_Internal.RevenueAmount!=value){
                    m_Internal.RevenueAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RevenueAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RoomClass;
        [LocalData]
        public string RoomClass
        {
            get { return m_Internal.RoomClass; }
            set
            {
                if(m_Internal.RoomClass!=value){
                    m_Internal.RoomClass=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoomClass");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _RoomNumber;
        [LocalData]
        public int? RoomNumber
        {
            get { return m_Internal.RoomNumber; }
            set
            {
                if(m_Internal.RoomNumber!=value){
                    m_Internal.RoomNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoomNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _RoomTax;
        [LocalData]
        public decimal? RoomTax
        {
            get { return m_Internal.RoomTax; }
            set
            {
                if(m_Internal.RoomTax!=value){
                    m_Internal.RoomTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoomTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SourceCode;
        [LocalData]
        public string SourceCode
        {
            get { return m_Internal.SourceCode; }
            set
            {
                if(m_Internal.SourceCode!=value){
                    m_Internal.SourceCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SourceCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SummaryReferenceCode;
        [LocalData]
        public string SummaryReferenceCode
        {
            get { return m_Internal.SummaryReferenceCode; }
            set
            {
                if(m_Internal.SummaryReferenceCode!=value){
                    m_Internal.SummaryReferenceCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SummaryReferenceCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TACommissionable;
        [LocalData]
        public string TACommissionable
        {
            get { return m_Internal.TACommissionable; }
            set
            {
                if(m_Internal.TACommissionable!=value){
                    m_Internal.TACommissionable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TACommissionable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TaxDeferredYN;
        [LocalData]
        public string TaxDeferredYN
        {
            get { return m_Internal.TaxDeferredYN; }
            set
            {
                if(m_Internal.TaxDeferredYN!=value){
                    m_Internal.TaxDeferredYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TaxDeferredYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TaxGeneratedYN;
        [LocalData]
        public string TaxGeneratedYN
        {
            get { return m_Internal.TaxGeneratedYN; }
            set
            {
                if(m_Internal.TaxGeneratedYN!=value){
                    m_Internal.TaxGeneratedYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TaxGeneratedYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TaxInclusiveYN;
        [LocalData]
        public string TaxInclusiveYN
        {
            get { return m_Internal.TaxInclusiveYN; }
            set
            {
                if(m_Internal.TaxInclusiveYN!=value){
                    m_Internal.TaxInclusiveYN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TaxInclusiveYN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TransactionAmount;
        [LocalData]
        public decimal? TransactionAmount
        {
            get { return m_Internal.TransactionAmount; }
            set
            {
                if(m_Internal.TransactionAmount!=value){
                    m_Internal.TransactionAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TransactionCode;
        [LocalData]
        public string TransactionCode
        {
            get { return m_Internal.TransactionCode; }
            set
            {
                if(m_Internal.TransactionCode!=value){
                    m_Internal.TransactionCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TransactionCodeDescription;
        [LocalData]
        public string TransactionCodeDescription
        {
            get { return m_Internal.TransactionCodeDescription; }
            set
            {
                if(m_Internal.TransactionCodeDescription!=value){
                    m_Internal.TransactionCodeDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionCodeDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TransactionCodeGroup;
        [LocalData]
        public string TransactionCodeGroup
        {
            get { return m_Internal.TransactionCodeGroup; }
            set
            {
                if(m_Internal.TransactionCodeGroup!=value){
                    m_Internal.TransactionCodeGroup=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionCodeGroup");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TransactionCodeSubgroup;
        [LocalData]
        public string TransactionCodeSubgroup
        {
            get { return m_Internal.TransactionCodeSubgroup; }
            set
            {
                if(m_Internal.TransactionCodeSubgroup!=value){
                    m_Internal.TransactionCodeSubgroup=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionCodeSubgroup");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _TransactionDate;
        [LocalData]
        public DateTime? TransactionDate
        {
            get { return m_Internal.TransactionDate; }
            set
            {
                if(m_Internal.TransactionDate!=value){
                    m_Internal.TransactionDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TransactionGroupType;
        [LocalData]
        public string TransactionGroupType
        {
            get { return m_Internal.TransactionGroupType; }
            set
            {
                if(m_Internal.TransactionGroupType!=value){
                    m_Internal.TransactionGroupType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionGroupType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TransactionType;
        [LocalData]
        public string TransactionType
        {
            get { return m_Internal.TransactionType; }
            set
            {
                if(m_Internal.TransactionType!=value){
                    m_Internal.TransactionType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TransferDate;
        [LocalData]
        public string TransferDate
        {
            get { return m_Internal.TransferDate; }
            set
            {
                if(m_Internal.TransferDate!=value){
                    m_Internal.TransferDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransferDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _GrossAmount2;
        [LocalData]
        public decimal? GrossAmount2
        {
            get { return m_Internal.GrossAmount2; }
            set
            {
                if(m_Internal.GrossAmount2!=value){
                    m_Internal.GrossAmount2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GrossAmount2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _NetAmount2;
        [LocalData]
        public decimal? NetAmount2
        {
            get { return m_Internal.NetAmount2; }
            set
            {
                if(m_Internal.NetAmount2!=value){
                    m_Internal.NetAmount2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NetAmount2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _UpdateDate;
        [LocalData]
        public DateTime? UpdateDate
        {
            get { return m_Internal.UpdateDate; }
            set
            {
                if(m_Internal.UpdateDate!=value){
                    m_Internal.UpdateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _UpdateUser;
        [LocalData]
        public string UpdateUser
        {
            get { return m_Internal.UpdateUser; }
            set
            {
                if(m_Internal.UpdateUser!=value){
                    m_Internal.UpdateUser=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateUser");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _mrsbr_financialID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid mrsbr_financialID
        {
            get { return m_Internal.mrsbr_financialID; }
            set
            {
                if(m_Internal.mrsbr_financialID!=value){
                    m_Internal.mrsbr_financialID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mrsbr_financialID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<mrsbr_financial, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IOperaA214 : IWCFDataElement
    {
        
        int? NO_OF_STAYS { get; set; }
        
        int? NO_OF_ROOMS { get; set; }
        
        int? NIGHTS { get; set; }
        
        int? ADULTS { get; set; }
        
        int? CHILDREN { get; set; }
        
        string RESERVATION_PREFERENCES { get; set; }
        
        string SPECIAL_REQUESTS { get; set; }
        
        string COMMENTS { get; set; }
        
        string FIXED_CHARGE { get; set; }
        
        string MEMBERSHIP_LEVEL { get; set; }
        
        string PAYMENT_METHOD { get; set; }
        
        DateTime? TRUNC_BEGIN { get; set; }
        
        DateTime? ARRIVAL_TIME { get; set; }
        
        string C_T_S_NAME { get; set; }
        
        string UDFC30 { get; set; }
        
        string MEMBERSHIP_NUMBER { get; set; }
        
        string MEMBERSHIP_TYPE { get; set; }
        
        string RATE_CODE1 { get; set; }
        
        string COMM_CODE { get; set; }
        
        int? ROOM { get; set; }
        
        string FULL_NAME { get; set; }
        
        DateTime? DEPARTURE { get; set; }
        
        string COMPANY_NAME { get; set; }
        
        string TRAVEL_AGENT_NAME { get; set; }
        
        int? PERSONS { get; set; }
        
        string ROOM_CATEGORY_LABEL { get; set; }
        
        string BLOCK_CODE { get; set; }
        
        int? EFFECTIVE_RATE_AMOUNT { get; set; }
        
        string VIP { get; set; }
        
        string COMPUTED_RESV_STATUS { get; set; }
        
        int? COMPANY_ID { get; set; }
        
        string TRAVEL_AGENT_ID { get; set; }
        
        string GROUP_NAME { get; set; }
        
        int? GROUP_ID { get; set; }
        
        string SOURCE_NAME { get; set; }
        
        string SOURCE_ID { get; set; }
        
        string MARKET_CODE { get; set; }
        
        int? CONFIRMATION_NO { get; set; }
        
        int? RESV_NAME_ID { get; set; }
        
        int? GUEST_NAME_ID { get; set; }
        
        DateTime? ARRIVAL { get; set; }
        
        string CF_PERSONS { get; set; }
        
        string CF_SPECIALS { get; set; }
        
        Guid OperaA214ID { get; set; }
        
        string DataSource { get; set; }

        void Copy( IOperaA214 _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataOperaA214 : IOperaA214
    {
        [DataMember]
        public int? NO_OF_STAYS { get; set; }
        [DataMember]
        public int? NO_OF_ROOMS { get; set; }
        [DataMember]
        public int? NIGHTS { get; set; }
        [DataMember]
        public int? ADULTS { get; set; }
        [DataMember]
        public int? CHILDREN { get; set; }
        [DataMember]
        public string RESERVATION_PREFERENCES { get; set; }
        [DataMember]
        public string SPECIAL_REQUESTS { get; set; }
        [DataMember]
        public string COMMENTS { get; set; }
        [DataMember]
        public string FIXED_CHARGE { get; set; }
        [DataMember]
        public string MEMBERSHIP_LEVEL { get; set; }
        [DataMember]
        public string PAYMENT_METHOD { get; set; }
        [DataMember]
        public DateTime? TRUNC_BEGIN { get; set; }
        [DataMember]
        public DateTime? ARRIVAL_TIME { get; set; }
        [DataMember]
        public string C_T_S_NAME { get; set; }
        [DataMember]
        public string UDFC30 { get; set; }
        [DataMember]
        public string MEMBERSHIP_NUMBER { get; set; }
        [DataMember]
        public string MEMBERSHIP_TYPE { get; set; }
        [DataMember]
        public string RATE_CODE1 { get; set; }
        [DataMember]
        public string COMM_CODE { get; set; }
        [DataMember]
        public int? ROOM { get; set; }
        [DataMember]
        public string FULL_NAME { get; set; }
        [DataMember]
        public DateTime? DEPARTURE { get; set; }
        [DataMember]
        public string COMPANY_NAME { get; set; }
        [DataMember]
        public string TRAVEL_AGENT_NAME { get; set; }
        [DataMember]
        public int? PERSONS { get; set; }
        [DataMember]
        public string ROOM_CATEGORY_LABEL { get; set; }
        [DataMember]
        public string BLOCK_CODE { get; set; }
        [DataMember]
        public int? EFFECTIVE_RATE_AMOUNT { get; set; }
        [DataMember]
        public string VIP { get; set; }
        [DataMember]
        public string COMPUTED_RESV_STATUS { get; set; }
        [DataMember]
        public int? COMPANY_ID { get; set; }
        [DataMember]
        public string TRAVEL_AGENT_ID { get; set; }
        [DataMember]
        public string GROUP_NAME { get; set; }
        [DataMember]
        public int? GROUP_ID { get; set; }
        [DataMember]
        public string SOURCE_NAME { get; set; }
        [DataMember]
        public string SOURCE_ID { get; set; }
        [DataMember]
        public string MARKET_CODE { get; set; }
        [DataMember]
        public int? CONFIRMATION_NO { get; set; }
        [DataMember]
        public int? RESV_NAME_ID { get; set; }
        [DataMember]
        public int? GUEST_NAME_ID { get; set; }
        [DataMember]
        public DateTime? ARRIVAL { get; set; }
        [DataMember]
        public string CF_PERSONS { get; set; }
        [DataMember]
        public string CF_SPECIALS { get; set; }
        [DataMember]
        public Guid OperaA214ID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( IOperaA214 _Item )
        {
             NO_OF_STAYS = _Item.NO_OF_STAYS;			
             NO_OF_ROOMS = _Item.NO_OF_ROOMS;			
             NIGHTS = _Item.NIGHTS;			
             ADULTS = _Item.ADULTS;			
             CHILDREN = _Item.CHILDREN;			
             RESERVATION_PREFERENCES = _Item.RESERVATION_PREFERENCES;			
             SPECIAL_REQUESTS = _Item.SPECIAL_REQUESTS;			
             COMMENTS = _Item.COMMENTS;			
             FIXED_CHARGE = _Item.FIXED_CHARGE;			
             MEMBERSHIP_LEVEL = _Item.MEMBERSHIP_LEVEL;			
             PAYMENT_METHOD = _Item.PAYMENT_METHOD;			
             TRUNC_BEGIN = _Item.TRUNC_BEGIN;			
             ARRIVAL_TIME = _Item.ARRIVAL_TIME;			
             C_T_S_NAME = _Item.C_T_S_NAME;			
             UDFC30 = _Item.UDFC30;			
             MEMBERSHIP_NUMBER = _Item.MEMBERSHIP_NUMBER;			
             MEMBERSHIP_TYPE = _Item.MEMBERSHIP_TYPE;			
             RATE_CODE1 = _Item.RATE_CODE1;			
             COMM_CODE = _Item.COMM_CODE;			
             ROOM = _Item.ROOM;			
             FULL_NAME = _Item.FULL_NAME;			
             DEPARTURE = _Item.DEPARTURE;			
             COMPANY_NAME = _Item.COMPANY_NAME;			
             TRAVEL_AGENT_NAME = _Item.TRAVEL_AGENT_NAME;			
             PERSONS = _Item.PERSONS;			
             ROOM_CATEGORY_LABEL = _Item.ROOM_CATEGORY_LABEL;			
             BLOCK_CODE = _Item.BLOCK_CODE;			
             EFFECTIVE_RATE_AMOUNT = _Item.EFFECTIVE_RATE_AMOUNT;			
             VIP = _Item.VIP;			
             COMPUTED_RESV_STATUS = _Item.COMPUTED_RESV_STATUS;			
             COMPANY_ID = _Item.COMPANY_ID;			
             TRAVEL_AGENT_ID = _Item.TRAVEL_AGENT_ID;			
             GROUP_NAME = _Item.GROUP_NAME;			
             GROUP_ID = _Item.GROUP_ID;			
             SOURCE_NAME = _Item.SOURCE_NAME;			
             SOURCE_ID = _Item.SOURCE_ID;			
             MARKET_CODE = _Item.MARKET_CODE;			
             CONFIRMATION_NO = _Item.CONFIRMATION_NO;			
             RESV_NAME_ID = _Item.RESV_NAME_ID;			
             GUEST_NAME_ID = _Item.GUEST_NAME_ID;			
             ARRIVAL = _Item.ARRIVAL;			
             CF_PERSONS = _Item.CF_PERSONS;			
             CF_SPECIALS = _Item.CF_SPECIALS;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new OperaA214( this );
        }
    }


    /// <summary>
    /// A class which represents the OperaA214 table in the RenAix Database.
    /// </summary>
    public partial class OperaA214 : BaseDataObject<DataOperaA214>, IActiveRecord, ICallOnCreated, IOperaA214
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<OperaA214> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<OperaA214>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<OperaA214> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(OperaA214 item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                OperaA214 item=new OperaA214();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<OperaA214> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public OperaA214()
        {
            m_Internal = new DataOperaA214();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.OperaA214ID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public OperaA214( bool _CallOnCreated )
        {
            m_Internal = new DataOperaA214();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public OperaA214(string connectionString, string providerName) 
        {
            m_Internal = new DataOperaA214();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.OperaA214ID = Guid.NewGuid( );     
        }

        public OperaA214( IOperaA214 _Item )
        {
            m_Internal = new DataOperaA214();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public OperaA214( DataOperaA214 _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IOperaA214 _Item )
        {
            m_Internal.NO_OF_STAYS = _Item.NO_OF_STAYS;			
            m_Internal.NO_OF_ROOMS = _Item.NO_OF_ROOMS;			
            m_Internal.NIGHTS = _Item.NIGHTS;			
            m_Internal.ADULTS = _Item.ADULTS;			
            m_Internal.CHILDREN = _Item.CHILDREN;			
            m_Internal.RESERVATION_PREFERENCES = _Item.RESERVATION_PREFERENCES;			
            m_Internal.SPECIAL_REQUESTS = _Item.SPECIAL_REQUESTS;			
            m_Internal.COMMENTS = _Item.COMMENTS;			
            m_Internal.FIXED_CHARGE = _Item.FIXED_CHARGE;			
            m_Internal.MEMBERSHIP_LEVEL = _Item.MEMBERSHIP_LEVEL;			
            m_Internal.PAYMENT_METHOD = _Item.PAYMENT_METHOD;			
            m_Internal.TRUNC_BEGIN = _Item.TRUNC_BEGIN;			
            m_Internal.ARRIVAL_TIME = _Item.ARRIVAL_TIME;			
            m_Internal.C_T_S_NAME = _Item.C_T_S_NAME;			
            m_Internal.UDFC30 = _Item.UDFC30;			
            m_Internal.MEMBERSHIP_NUMBER = _Item.MEMBERSHIP_NUMBER;			
            m_Internal.MEMBERSHIP_TYPE = _Item.MEMBERSHIP_TYPE;			
            m_Internal.RATE_CODE1 = _Item.RATE_CODE1;			
            m_Internal.COMM_CODE = _Item.COMM_CODE;			
            m_Internal.ROOM = _Item.ROOM;			
            m_Internal.FULL_NAME = _Item.FULL_NAME;			
            m_Internal.DEPARTURE = _Item.DEPARTURE;			
            m_Internal.COMPANY_NAME = _Item.COMPANY_NAME;			
            m_Internal.TRAVEL_AGENT_NAME = _Item.TRAVEL_AGENT_NAME;			
            m_Internal.PERSONS = _Item.PERSONS;			
            m_Internal.ROOM_CATEGORY_LABEL = _Item.ROOM_CATEGORY_LABEL;			
            m_Internal.BLOCK_CODE = _Item.BLOCK_CODE;			
            m_Internal.EFFECTIVE_RATE_AMOUNT = _Item.EFFECTIVE_RATE_AMOUNT;			
            m_Internal.VIP = _Item.VIP;			
            m_Internal.COMPUTED_RESV_STATUS = _Item.COMPUTED_RESV_STATUS;			
            m_Internal.COMPANY_ID = _Item.COMPANY_ID;			
            m_Internal.TRAVEL_AGENT_ID = _Item.TRAVEL_AGENT_ID;			
            m_Internal.GROUP_NAME = _Item.GROUP_NAME;			
            m_Internal.GROUP_ID = _Item.GROUP_ID;			
            m_Internal.SOURCE_NAME = _Item.SOURCE_NAME;			
            m_Internal.SOURCE_ID = _Item.SOURCE_ID;			
            m_Internal.MARKET_CODE = _Item.MARKET_CODE;			
            m_Internal.CONFIRMATION_NO = _Item.CONFIRMATION_NO;			
            m_Internal.RESV_NAME_ID = _Item.RESV_NAME_ID;			
            m_Internal.GUEST_NAME_ID = _Item.GUEST_NAME_ID;			
            m_Internal.ARRIVAL = _Item.ARRIVAL;			
            m_Internal.CF_PERSONS = _Item.CF_PERSONS;			
            m_Internal.CF_SPECIALS = _Item.CF_SPECIALS;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new OperaA214( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.OperaA214ID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                OperaA214.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<OperaA214>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public OperaA214(Expression<Func<OperaA214, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<OperaA214> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<OperaA214> _repo;
            
            if(db.TestMode)
            {
                OperaA214.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<OperaA214>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<OperaA214> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static OperaA214 SingleOrDefault(Expression<Func<OperaA214, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static OperaA214 SingleOrDefault(Expression<Func<OperaA214, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<OperaA214> repo = GetRepo(connectionString,providerName);
            OperaA214 single = repo.SingleOrDefault<OperaA214>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<OperaA214, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<OperaA214, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyOperaA214Loaded = false;
        protected static OperaA214 EmptyOperaA214Member = null;

        public static OperaA214 GetByID(Guid? value) 
        {
            OperaA214 rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static OperaA214 GetByID(Guid value) 
        {
            OperaA214 rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyOperaA214Loaded )
                    {
                        rc = EmptyOperaA214Member;
                    }
                    else
                    {
                        IsEmptyOperaA214Loaded = true;
                        rc = OperaA214.Find( L => L.OperaA214ID.Equals( value ) ).FirstOrDefault( );
                        EmptyOperaA214Member = rc;
                    }
                }
                else
                {
                    rc = OperaA214.Find( L => L.OperaA214ID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<OperaA214> Find(Expression<Func<OperaA214, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<OperaA214> Find(Expression<Func<OperaA214, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<OperaA214> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<OperaA214> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<OperaA214> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<OperaA214> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<OperaA214> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<OperaA214> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "OperaA214ID";
        }

        public object KeyValue()
        {
            return this.OperaA214ID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.RESERVATION_PREFERENCES )
//			{
//				rc = this.RESERVATION_PREFERENCES.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is OperaA214)
            {
                OperaA214 compare=(OperaA214)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.OperaA214ID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.RESERVATION_PREFERENCES.ToString();
        }

        public string DescriptorColumn() 
        {
            return "RESERVATION_PREFERENCES";
        }

        public static string GetKeyColumn()
        {
            return "OperaA214ID";
        }        

        public static string GetDescriptorColumn()
        {
            return "RESERVATION_PREFERENCES";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.OperaA214ID;
            }
            set
            {
                m_Internal.OperaA214ID = value;
            }
        }


//        int? _NO_OF_STAYS;
        [LocalData]
        public int? NO_OF_STAYS
        {
            get { return m_Internal.NO_OF_STAYS; }
            set
            {
                if(m_Internal.NO_OF_STAYS!=value){
                    m_Internal.NO_OF_STAYS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NO_OF_STAYS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _NO_OF_ROOMS;
        [LocalData]
        public int? NO_OF_ROOMS
        {
            get { return m_Internal.NO_OF_ROOMS; }
            set
            {
                if(m_Internal.NO_OF_ROOMS!=value){
                    m_Internal.NO_OF_ROOMS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NO_OF_ROOMS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _NIGHTS;
        [LocalData]
        public int? NIGHTS
        {
            get { return m_Internal.NIGHTS; }
            set
            {
                if(m_Internal.NIGHTS!=value){
                    m_Internal.NIGHTS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NIGHTS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ADULTS;
        [LocalData]
        public int? ADULTS
        {
            get { return m_Internal.ADULTS; }
            set
            {
                if(m_Internal.ADULTS!=value){
                    m_Internal.ADULTS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ADULTS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _CHILDREN;
        [LocalData]
        public int? CHILDREN
        {
            get { return m_Internal.CHILDREN; }
            set
            {
                if(m_Internal.CHILDREN!=value){
                    m_Internal.CHILDREN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CHILDREN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RESERVATION_PREFERENCES;
        [LocalData]
        public string RESERVATION_PREFERENCES
        {
            get { return m_Internal.RESERVATION_PREFERENCES; }
            set
            {
                if(m_Internal.RESERVATION_PREFERENCES!=value){
                    m_Internal.RESERVATION_PREFERENCES=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RESERVATION_PREFERENCES");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SPECIAL_REQUESTS;
        [LocalData]
        public string SPECIAL_REQUESTS
        {
            get { return m_Internal.SPECIAL_REQUESTS; }
            set
            {
                if(m_Internal.SPECIAL_REQUESTS!=value){
                    m_Internal.SPECIAL_REQUESTS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SPECIAL_REQUESTS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _COMMENTS;
        [LocalData]
        public string COMMENTS
        {
            get { return m_Internal.COMMENTS; }
            set
            {
                if(m_Internal.COMMENTS!=value){
                    m_Internal.COMMENTS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="COMMENTS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _FIXED_CHARGE;
        [LocalData]
        public string FIXED_CHARGE
        {
            get { return m_Internal.FIXED_CHARGE; }
            set
            {
                if(m_Internal.FIXED_CHARGE!=value){
                    m_Internal.FIXED_CHARGE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FIXED_CHARGE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MEMBERSHIP_LEVEL;
        [LocalData]
        public string MEMBERSHIP_LEVEL
        {
            get { return m_Internal.MEMBERSHIP_LEVEL; }
            set
            {
                if(m_Internal.MEMBERSHIP_LEVEL!=value){
                    m_Internal.MEMBERSHIP_LEVEL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MEMBERSHIP_LEVEL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PAYMENT_METHOD;
        [LocalData]
        public string PAYMENT_METHOD
        {
            get { return m_Internal.PAYMENT_METHOD; }
            set
            {
                if(m_Internal.PAYMENT_METHOD!=value){
                    m_Internal.PAYMENT_METHOD=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PAYMENT_METHOD");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _TRUNC_BEGIN;
        [LocalData]
        public DateTime? TRUNC_BEGIN
        {
            get { return m_Internal.TRUNC_BEGIN; }
            set
            {
                if(m_Internal.TRUNC_BEGIN!=value){
                    m_Internal.TRUNC_BEGIN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TRUNC_BEGIN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _ARRIVAL_TIME;
        [LocalData]
        public DateTime? ARRIVAL_TIME
        {
            get { return m_Internal.ARRIVAL_TIME; }
            set
            {
                if(m_Internal.ARRIVAL_TIME!=value){
                    m_Internal.ARRIVAL_TIME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ARRIVAL_TIME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _C_T_S_NAME;
        [LocalData]
        public string C_T_S_NAME
        {
            get { return m_Internal.C_T_S_NAME; }
            set
            {
                if(m_Internal.C_T_S_NAME!=value){
                    m_Internal.C_T_S_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="C_T_S_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _UDFC30;
        [LocalData]
        public string UDFC30
        {
            get { return m_Internal.UDFC30; }
            set
            {
                if(m_Internal.UDFC30!=value){
                    m_Internal.UDFC30=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UDFC30");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MEMBERSHIP_NUMBER;
        [LocalData]
        public string MEMBERSHIP_NUMBER
        {
            get { return m_Internal.MEMBERSHIP_NUMBER; }
            set
            {
                if(m_Internal.MEMBERSHIP_NUMBER!=value){
                    m_Internal.MEMBERSHIP_NUMBER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MEMBERSHIP_NUMBER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MEMBERSHIP_TYPE;
        [LocalData]
        public string MEMBERSHIP_TYPE
        {
            get { return m_Internal.MEMBERSHIP_TYPE; }
            set
            {
                if(m_Internal.MEMBERSHIP_TYPE!=value){
                    m_Internal.MEMBERSHIP_TYPE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MEMBERSHIP_TYPE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RATE_CODE1;
        [LocalData]
        public string RATE_CODE1
        {
            get { return m_Internal.RATE_CODE1; }
            set
            {
                if(m_Internal.RATE_CODE1!=value){
                    m_Internal.RATE_CODE1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RATE_CODE1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _COMM_CODE;
        [LocalData]
        public string COMM_CODE
        {
            get { return m_Internal.COMM_CODE; }
            set
            {
                if(m_Internal.COMM_CODE!=value){
                    m_Internal.COMM_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="COMM_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ROOM;
        [LocalData]
        public int? ROOM
        {
            get { return m_Internal.ROOM; }
            set
            {
                if(m_Internal.ROOM!=value){
                    m_Internal.ROOM=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ROOM");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _FULL_NAME;
        [LocalData]
        public string FULL_NAME
        {
            get { return m_Internal.FULL_NAME; }
            set
            {
                if(m_Internal.FULL_NAME!=value){
                    m_Internal.FULL_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FULL_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _DEPARTURE;
        [LocalData]
        public DateTime? DEPARTURE
        {
            get { return m_Internal.DEPARTURE; }
            set
            {
                if(m_Internal.DEPARTURE!=value){
                    m_Internal.DEPARTURE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DEPARTURE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _COMPANY_NAME;
        [LocalData]
        public string COMPANY_NAME
        {
            get { return m_Internal.COMPANY_NAME; }
            set
            {
                if(m_Internal.COMPANY_NAME!=value){
                    m_Internal.COMPANY_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="COMPANY_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TRAVEL_AGENT_NAME;
        [LocalData]
        public string TRAVEL_AGENT_NAME
        {
            get { return m_Internal.TRAVEL_AGENT_NAME; }
            set
            {
                if(m_Internal.TRAVEL_AGENT_NAME!=value){
                    m_Internal.TRAVEL_AGENT_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TRAVEL_AGENT_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _PERSONS;
        [LocalData]
        public int? PERSONS
        {
            get { return m_Internal.PERSONS; }
            set
            {
                if(m_Internal.PERSONS!=value){
                    m_Internal.PERSONS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PERSONS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ROOM_CATEGORY_LABEL;
        [LocalData]
        public string ROOM_CATEGORY_LABEL
        {
            get { return m_Internal.ROOM_CATEGORY_LABEL; }
            set
            {
                if(m_Internal.ROOM_CATEGORY_LABEL!=value){
                    m_Internal.ROOM_CATEGORY_LABEL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ROOM_CATEGORY_LABEL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _BLOCK_CODE;
        [LocalData]
        public string BLOCK_CODE
        {
            get { return m_Internal.BLOCK_CODE; }
            set
            {
                if(m_Internal.BLOCK_CODE!=value){
                    m_Internal.BLOCK_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BLOCK_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EFFECTIVE_RATE_AMOUNT;
        [LocalData]
        public int? EFFECTIVE_RATE_AMOUNT
        {
            get { return m_Internal.EFFECTIVE_RATE_AMOUNT; }
            set
            {
                if(m_Internal.EFFECTIVE_RATE_AMOUNT!=value){
                    m_Internal.EFFECTIVE_RATE_AMOUNT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EFFECTIVE_RATE_AMOUNT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _VIP;
        [LocalData]
        public string VIP
        {
            get { return m_Internal.VIP; }
            set
            {
                if(m_Internal.VIP!=value){
                    m_Internal.VIP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VIP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _COMPUTED_RESV_STATUS;
        [LocalData]
        public string COMPUTED_RESV_STATUS
        {
            get { return m_Internal.COMPUTED_RESV_STATUS; }
            set
            {
                if(m_Internal.COMPUTED_RESV_STATUS!=value){
                    m_Internal.COMPUTED_RESV_STATUS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="COMPUTED_RESV_STATUS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _COMPANY_ID;
        [LocalData]
        public int? COMPANY_ID
        {
            get { return m_Internal.COMPANY_ID; }
            set
            {
                if(m_Internal.COMPANY_ID!=value){
                    m_Internal.COMPANY_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="COMPANY_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TRAVEL_AGENT_ID;
        [LocalData]
        public string TRAVEL_AGENT_ID
        {
            get { return m_Internal.TRAVEL_AGENT_ID; }
            set
            {
                if(m_Internal.TRAVEL_AGENT_ID!=value){
                    m_Internal.TRAVEL_AGENT_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TRAVEL_AGENT_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _GROUP_NAME;
        [LocalData]
        public string GROUP_NAME
        {
            get { return m_Internal.GROUP_NAME; }
            set
            {
                if(m_Internal.GROUP_NAME!=value){
                    m_Internal.GROUP_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GROUP_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _GROUP_ID;
        [LocalData]
        public int? GROUP_ID
        {
            get { return m_Internal.GROUP_ID; }
            set
            {
                if(m_Internal.GROUP_ID!=value){
                    m_Internal.GROUP_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GROUP_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SOURCE_NAME;
        [LocalData]
        public string SOURCE_NAME
        {
            get { return m_Internal.SOURCE_NAME; }
            set
            {
                if(m_Internal.SOURCE_NAME!=value){
                    m_Internal.SOURCE_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SOURCE_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SOURCE_ID;
        [LocalData]
        public string SOURCE_ID
        {
            get { return m_Internal.SOURCE_ID; }
            set
            {
                if(m_Internal.SOURCE_ID!=value){
                    m_Internal.SOURCE_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SOURCE_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MARKET_CODE;
        [LocalData]
        public string MARKET_CODE
        {
            get { return m_Internal.MARKET_CODE; }
            set
            {
                if(m_Internal.MARKET_CODE!=value){
                    m_Internal.MARKET_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MARKET_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _CONFIRMATION_NO;
        [LocalData]
        public int? CONFIRMATION_NO
        {
            get { return m_Internal.CONFIRMATION_NO; }
            set
            {
                if(m_Internal.CONFIRMATION_NO!=value){
                    m_Internal.CONFIRMATION_NO=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CONFIRMATION_NO");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _RESV_NAME_ID;
        [LocalData]
        public int? RESV_NAME_ID
        {
            get { return m_Internal.RESV_NAME_ID; }
            set
            {
                if(m_Internal.RESV_NAME_ID!=value){
                    m_Internal.RESV_NAME_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RESV_NAME_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _GUEST_NAME_ID;
        [LocalData]
        public int? GUEST_NAME_ID
        {
            get { return m_Internal.GUEST_NAME_ID; }
            set
            {
                if(m_Internal.GUEST_NAME_ID!=value){
                    m_Internal.GUEST_NAME_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GUEST_NAME_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _ARRIVAL;
        [LocalData]
        public DateTime? ARRIVAL
        {
            get { return m_Internal.ARRIVAL; }
            set
            {
                if(m_Internal.ARRIVAL!=value){
                    m_Internal.ARRIVAL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ARRIVAL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_PERSONS;
        [LocalData]
        public string CF_PERSONS
        {
            get { return m_Internal.CF_PERSONS; }
            set
            {
                if(m_Internal.CF_PERSONS!=value){
                    m_Internal.CF_PERSONS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_PERSONS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_SPECIALS;
        [LocalData]
        public string CF_SPECIALS
        {
            get { return m_Internal.CF_SPECIALS; }
            set
            {
                if(m_Internal.CF_SPECIALS!=value){
                    m_Internal.CF_SPECIALS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_SPECIALS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _OperaA214ID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid OperaA214ID
        {
            get { return m_Internal.OperaA214ID; }
            set
            {
                if(m_Internal.OperaA214ID!=value){
                    m_Internal.OperaA214ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OperaA214ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<OperaA214, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IOperaAD120BusinessBlock : IWCFDataElement
    {
        
        string BLOCK_CODE { get; set; }
        
        string RESORT { get; set; }
        
        int? ALLOTMENT_HEADER_ID { get; set; }
        
        string DESCRIPTION { get; set; }
        
        DateTime? START_DATE { get; set; }
        
        DateTime? END_DATE { get; set; }
        
        string BOOKING_STATUS { get; set; }
        
        string CAT_STATUS { get; set; }
        
        DateTime? RMS_DECISION_DATE { get; set; }
        
        DateTime? CAT_DECISION { get; set; }
        
        DateTime? CUTOFF_DATE { get; set; }
        
        DateTime? RMS_FOLLOWUP { get; set; }
        
        string RMS_OWNER_CODE { get; set; }
        
        DateTime? CAT_FOLLOWUP_DATE { get; set; }
        
        string CAT_OWNER_CODE { get; set; }
        
        string RANKING_CODE { get; set; }
        
        string CONVERSION_CODE { get; set; }
        
        int? RMS_BLOCKED { get; set; }
        
        decimal? REV_BLOCKED { get; set; }
        
        decimal? AVG_RATE { get; set; }
        
        decimal? TOTAL_REVENUE { get; set; }
        
        int? REV_TYPE1 { get; set; }
        
        int? REV_TYPE2 { get; set; }
        
        int? REV_TYPE3 { get; set; }
        
        int? REV_TYPE4 { get; set; }
        
        decimal? CF_TOTAL_REVENUE { get; set; }
        
        string CF_CONTACTNAME { get; set; }
        
        string CF_ACCOUNTNAME { get; set; }
        
        decimal? CAT_TOTAL { get; set; }
        
        Guid AD120BusinessBlockID { get; set; }
        
        string DataSource { get; set; }

        void Copy( IOperaAD120BusinessBlock _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataOperaAD120BusinessBlock : IOperaAD120BusinessBlock
    {
        [DataMember]
        public string BLOCK_CODE { get; set; }
        [DataMember]
        public string RESORT { get; set; }
        [DataMember]
        public int? ALLOTMENT_HEADER_ID { get; set; }
        [DataMember]
        public string DESCRIPTION { get; set; }
        [DataMember]
        public DateTime? START_DATE { get; set; }
        [DataMember]
        public DateTime? END_DATE { get; set; }
        [DataMember]
        public string BOOKING_STATUS { get; set; }
        [DataMember]
        public string CAT_STATUS { get; set; }
        [DataMember]
        public DateTime? RMS_DECISION_DATE { get; set; }
        [DataMember]
        public DateTime? CAT_DECISION { get; set; }
        [DataMember]
        public DateTime? CUTOFF_DATE { get; set; }
        [DataMember]
        public DateTime? RMS_FOLLOWUP { get; set; }
        [DataMember]
        public string RMS_OWNER_CODE { get; set; }
        [DataMember]
        public DateTime? CAT_FOLLOWUP_DATE { get; set; }
        [DataMember]
        public string CAT_OWNER_CODE { get; set; }
        [DataMember]
        public string RANKING_CODE { get; set; }
        [DataMember]
        public string CONVERSION_CODE { get; set; }
        [DataMember]
        public int? RMS_BLOCKED { get; set; }
        [DataMember]
        public decimal? REV_BLOCKED { get; set; }
        [DataMember]
        public decimal? AVG_RATE { get; set; }
        [DataMember]
        public decimal? TOTAL_REVENUE { get; set; }
        [DataMember]
        public int? REV_TYPE1 { get; set; }
        [DataMember]
        public int? REV_TYPE2 { get; set; }
        [DataMember]
        public int? REV_TYPE3 { get; set; }
        [DataMember]
        public int? REV_TYPE4 { get; set; }
        [DataMember]
        public decimal? CF_TOTAL_REVENUE { get; set; }
        [DataMember]
        public string CF_CONTACTNAME { get; set; }
        [DataMember]
        public string CF_ACCOUNTNAME { get; set; }
        [DataMember]
        public decimal? CAT_TOTAL { get; set; }
        [DataMember]
        public Guid AD120BusinessBlockID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( IOperaAD120BusinessBlock _Item )
        {
             BLOCK_CODE = _Item.BLOCK_CODE;			
             RESORT = _Item.RESORT;			
             ALLOTMENT_HEADER_ID = _Item.ALLOTMENT_HEADER_ID;			
             DESCRIPTION = _Item.DESCRIPTION;			
             START_DATE = _Item.START_DATE;			
             END_DATE = _Item.END_DATE;			
             BOOKING_STATUS = _Item.BOOKING_STATUS;			
             CAT_STATUS = _Item.CAT_STATUS;			
             RMS_DECISION_DATE = _Item.RMS_DECISION_DATE;			
             CAT_DECISION = _Item.CAT_DECISION;			
             CUTOFF_DATE = _Item.CUTOFF_DATE;			
             RMS_FOLLOWUP = _Item.RMS_FOLLOWUP;			
             RMS_OWNER_CODE = _Item.RMS_OWNER_CODE;			
             CAT_FOLLOWUP_DATE = _Item.CAT_FOLLOWUP_DATE;			
             CAT_OWNER_CODE = _Item.CAT_OWNER_CODE;			
             RANKING_CODE = _Item.RANKING_CODE;			
             CONVERSION_CODE = _Item.CONVERSION_CODE;			
             RMS_BLOCKED = _Item.RMS_BLOCKED;			
             REV_BLOCKED = _Item.REV_BLOCKED;			
             AVG_RATE = _Item.AVG_RATE;			
             TOTAL_REVENUE = _Item.TOTAL_REVENUE;			
             REV_TYPE1 = _Item.REV_TYPE1;			
             REV_TYPE2 = _Item.REV_TYPE2;			
             REV_TYPE3 = _Item.REV_TYPE3;			
             REV_TYPE4 = _Item.REV_TYPE4;			
             CF_TOTAL_REVENUE = _Item.CF_TOTAL_REVENUE;			
             CF_CONTACTNAME = _Item.CF_CONTACTNAME;			
             CF_ACCOUNTNAME = _Item.CF_ACCOUNTNAME;			
             CAT_TOTAL = _Item.CAT_TOTAL;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new OperaAD120BusinessBlock( this );
        }
    }


    /// <summary>
    /// A class which represents the OperaAD120BusinessBlock table in the RenAix Database.
    /// </summary>
    public partial class OperaAD120BusinessBlock : BaseDataObject<DataOperaAD120BusinessBlock>, IActiveRecord, ICallOnCreated, IOperaAD120BusinessBlock
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<OperaAD120BusinessBlock> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<OperaAD120BusinessBlock>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<OperaAD120BusinessBlock> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(OperaAD120BusinessBlock item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                OperaAD120BusinessBlock item=new OperaAD120BusinessBlock();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<OperaAD120BusinessBlock> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public OperaAD120BusinessBlock()
        {
            m_Internal = new DataOperaAD120BusinessBlock();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.AD120BusinessBlockID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public OperaAD120BusinessBlock( bool _CallOnCreated )
        {
            m_Internal = new DataOperaAD120BusinessBlock();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public OperaAD120BusinessBlock(string connectionString, string providerName) 
        {
            m_Internal = new DataOperaAD120BusinessBlock();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.AD120BusinessBlockID = Guid.NewGuid( );     
        }

        public OperaAD120BusinessBlock( IOperaAD120BusinessBlock _Item )
        {
            m_Internal = new DataOperaAD120BusinessBlock();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public OperaAD120BusinessBlock( DataOperaAD120BusinessBlock _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IOperaAD120BusinessBlock _Item )
        {
            m_Internal.BLOCK_CODE = _Item.BLOCK_CODE;			
            m_Internal.RESORT = _Item.RESORT;			
            m_Internal.ALLOTMENT_HEADER_ID = _Item.ALLOTMENT_HEADER_ID;			
            m_Internal.DESCRIPTION = _Item.DESCRIPTION;			
            m_Internal.START_DATE = _Item.START_DATE;			
            m_Internal.END_DATE = _Item.END_DATE;			
            m_Internal.BOOKING_STATUS = _Item.BOOKING_STATUS;			
            m_Internal.CAT_STATUS = _Item.CAT_STATUS;			
            m_Internal.RMS_DECISION_DATE = _Item.RMS_DECISION_DATE;			
            m_Internal.CAT_DECISION = _Item.CAT_DECISION;			
            m_Internal.CUTOFF_DATE = _Item.CUTOFF_DATE;			
            m_Internal.RMS_FOLLOWUP = _Item.RMS_FOLLOWUP;			
            m_Internal.RMS_OWNER_CODE = _Item.RMS_OWNER_CODE;			
            m_Internal.CAT_FOLLOWUP_DATE = _Item.CAT_FOLLOWUP_DATE;			
            m_Internal.CAT_OWNER_CODE = _Item.CAT_OWNER_CODE;			
            m_Internal.RANKING_CODE = _Item.RANKING_CODE;			
            m_Internal.CONVERSION_CODE = _Item.CONVERSION_CODE;			
            m_Internal.RMS_BLOCKED = _Item.RMS_BLOCKED;			
            m_Internal.REV_BLOCKED = _Item.REV_BLOCKED;			
            m_Internal.AVG_RATE = _Item.AVG_RATE;			
            m_Internal.TOTAL_REVENUE = _Item.TOTAL_REVENUE;			
            m_Internal.REV_TYPE1 = _Item.REV_TYPE1;			
            m_Internal.REV_TYPE2 = _Item.REV_TYPE2;			
            m_Internal.REV_TYPE3 = _Item.REV_TYPE3;			
            m_Internal.REV_TYPE4 = _Item.REV_TYPE4;			
            m_Internal.CF_TOTAL_REVENUE = _Item.CF_TOTAL_REVENUE;			
            m_Internal.CF_CONTACTNAME = _Item.CF_CONTACTNAME;			
            m_Internal.CF_ACCOUNTNAME = _Item.CF_ACCOUNTNAME;			
            m_Internal.CAT_TOTAL = _Item.CAT_TOTAL;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new OperaAD120BusinessBlock( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.AD120BusinessBlockID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                OperaAD120BusinessBlock.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<OperaAD120BusinessBlock>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public OperaAD120BusinessBlock(Expression<Func<OperaAD120BusinessBlock, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<OperaAD120BusinessBlock> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<OperaAD120BusinessBlock> _repo;
            
            if(db.TestMode)
            {
                OperaAD120BusinessBlock.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<OperaAD120BusinessBlock>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<OperaAD120BusinessBlock> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static OperaAD120BusinessBlock SingleOrDefault(Expression<Func<OperaAD120BusinessBlock, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static OperaAD120BusinessBlock SingleOrDefault(Expression<Func<OperaAD120BusinessBlock, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<OperaAD120BusinessBlock> repo = GetRepo(connectionString,providerName);
            OperaAD120BusinessBlock single = repo.SingleOrDefault<OperaAD120BusinessBlock>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<OperaAD120BusinessBlock, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<OperaAD120BusinessBlock, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyOperaAD120BusinessBlockLoaded = false;
        protected static OperaAD120BusinessBlock EmptyOperaAD120BusinessBlockMember = null;

        public static OperaAD120BusinessBlock GetByID(Guid? value) 
        {
            OperaAD120BusinessBlock rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static OperaAD120BusinessBlock GetByID(Guid value) 
        {
            OperaAD120BusinessBlock rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyOperaAD120BusinessBlockLoaded )
                    {
                        rc = EmptyOperaAD120BusinessBlockMember;
                    }
                    else
                    {
                        IsEmptyOperaAD120BusinessBlockLoaded = true;
                        rc = OperaAD120BusinessBlock.Find( L => L.AD120BusinessBlockID.Equals( value ) ).FirstOrDefault( );
                        EmptyOperaAD120BusinessBlockMember = rc;
                    }
                }
                else
                {
                    rc = OperaAD120BusinessBlock.Find( L => L.AD120BusinessBlockID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<OperaAD120BusinessBlock> Find(Expression<Func<OperaAD120BusinessBlock, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<OperaAD120BusinessBlock> Find(Expression<Func<OperaAD120BusinessBlock, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<OperaAD120BusinessBlock> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<OperaAD120BusinessBlock> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<OperaAD120BusinessBlock> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<OperaAD120BusinessBlock> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<OperaAD120BusinessBlock> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<OperaAD120BusinessBlock> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "AD120BusinessBlockID";
        }

        public object KeyValue()
        {
            return this.AD120BusinessBlockID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.BLOCK_CODE )
//			{
//				rc = this.BLOCK_CODE.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is OperaAD120BusinessBlock)
            {
                OperaAD120BusinessBlock compare=(OperaAD120BusinessBlock)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.AD120BusinessBlockID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.BLOCK_CODE.ToString();
        }

        public string DescriptorColumn() 
        {
            return "BLOCK_CODE";
        }

        public static string GetKeyColumn()
        {
            return "AD120BusinessBlockID";
        }        

        public static string GetDescriptorColumn()
        {
            return "BLOCK_CODE";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.AD120BusinessBlockID;
            }
            set
            {
                m_Internal.AD120BusinessBlockID = value;
            }
        }


//        string _BLOCK_CODE;
        [LocalData]
        public string BLOCK_CODE
        {
            get { return m_Internal.BLOCK_CODE; }
            set
            {
                if(m_Internal.BLOCK_CODE!=value){
                    m_Internal.BLOCK_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BLOCK_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RESORT;
        [LocalData]
        public string RESORT
        {
            get { return m_Internal.RESORT; }
            set
            {
                if(m_Internal.RESORT!=value){
                    m_Internal.RESORT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RESORT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ALLOTMENT_HEADER_ID;
        [LocalData]
        public int? ALLOTMENT_HEADER_ID
        {
            get { return m_Internal.ALLOTMENT_HEADER_ID; }
            set
            {
                if(m_Internal.ALLOTMENT_HEADER_ID!=value){
                    m_Internal.ALLOTMENT_HEADER_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ALLOTMENT_HEADER_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DESCRIPTION;
        [LocalData]
        public string DESCRIPTION
        {
            get { return m_Internal.DESCRIPTION; }
            set
            {
                if(m_Internal.DESCRIPTION!=value){
                    m_Internal.DESCRIPTION=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DESCRIPTION");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _START_DATE;
        [LocalData]
        public DateTime? START_DATE
        {
            get { return m_Internal.START_DATE; }
            set
            {
                if(m_Internal.START_DATE!=value){
                    m_Internal.START_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="START_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _END_DATE;
        [LocalData]
        public DateTime? END_DATE
        {
            get { return m_Internal.END_DATE; }
            set
            {
                if(m_Internal.END_DATE!=value){
                    m_Internal.END_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="END_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _BOOKING_STATUS;
        [LocalData]
        public string BOOKING_STATUS
        {
            get { return m_Internal.BOOKING_STATUS; }
            set
            {
                if(m_Internal.BOOKING_STATUS!=value){
                    m_Internal.BOOKING_STATUS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BOOKING_STATUS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CAT_STATUS;
        [LocalData]
        public string CAT_STATUS
        {
            get { return m_Internal.CAT_STATUS; }
            set
            {
                if(m_Internal.CAT_STATUS!=value){
                    m_Internal.CAT_STATUS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CAT_STATUS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _RMS_DECISION_DATE;
        [LocalData]
        public DateTime? RMS_DECISION_DATE
        {
            get { return m_Internal.RMS_DECISION_DATE; }
            set
            {
                if(m_Internal.RMS_DECISION_DATE!=value){
                    m_Internal.RMS_DECISION_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RMS_DECISION_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _CAT_DECISION;
        [LocalData]
        public DateTime? CAT_DECISION
        {
            get { return m_Internal.CAT_DECISION; }
            set
            {
                if(m_Internal.CAT_DECISION!=value){
                    m_Internal.CAT_DECISION=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CAT_DECISION");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _CUTOFF_DATE;
        [LocalData]
        public DateTime? CUTOFF_DATE
        {
            get { return m_Internal.CUTOFF_DATE; }
            set
            {
                if(m_Internal.CUTOFF_DATE!=value){
                    m_Internal.CUTOFF_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CUTOFF_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _RMS_FOLLOWUP;
        [LocalData]
        public DateTime? RMS_FOLLOWUP
        {
            get { return m_Internal.RMS_FOLLOWUP; }
            set
            {
                if(m_Internal.RMS_FOLLOWUP!=value){
                    m_Internal.RMS_FOLLOWUP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RMS_FOLLOWUP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RMS_OWNER_CODE;
        [LocalData]
        public string RMS_OWNER_CODE
        {
            get { return m_Internal.RMS_OWNER_CODE; }
            set
            {
                if(m_Internal.RMS_OWNER_CODE!=value){
                    m_Internal.RMS_OWNER_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RMS_OWNER_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _CAT_FOLLOWUP_DATE;
        [LocalData]
        public DateTime? CAT_FOLLOWUP_DATE
        {
            get { return m_Internal.CAT_FOLLOWUP_DATE; }
            set
            {
                if(m_Internal.CAT_FOLLOWUP_DATE!=value){
                    m_Internal.CAT_FOLLOWUP_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CAT_FOLLOWUP_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CAT_OWNER_CODE;
        [LocalData]
        public string CAT_OWNER_CODE
        {
            get { return m_Internal.CAT_OWNER_CODE; }
            set
            {
                if(m_Internal.CAT_OWNER_CODE!=value){
                    m_Internal.CAT_OWNER_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CAT_OWNER_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RANKING_CODE;
        [LocalData]
        public string RANKING_CODE
        {
            get { return m_Internal.RANKING_CODE; }
            set
            {
                if(m_Internal.RANKING_CODE!=value){
                    m_Internal.RANKING_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RANKING_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CONVERSION_CODE;
        [LocalData]
        public string CONVERSION_CODE
        {
            get { return m_Internal.CONVERSION_CODE; }
            set
            {
                if(m_Internal.CONVERSION_CODE!=value){
                    m_Internal.CONVERSION_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CONVERSION_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _RMS_BLOCKED;
        [LocalData]
        public int? RMS_BLOCKED
        {
            get { return m_Internal.RMS_BLOCKED; }
            set
            {
                if(m_Internal.RMS_BLOCKED!=value){
                    m_Internal.RMS_BLOCKED=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RMS_BLOCKED");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _REV_BLOCKED;
        [LocalData]
        public decimal? REV_BLOCKED
        {
            get { return m_Internal.REV_BLOCKED; }
            set
            {
                if(m_Internal.REV_BLOCKED!=value){
                    m_Internal.REV_BLOCKED=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REV_BLOCKED");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _AVG_RATE;
        [LocalData]
        public decimal? AVG_RATE
        {
            get { return m_Internal.AVG_RATE; }
            set
            {
                if(m_Internal.AVG_RATE!=value){
                    m_Internal.AVG_RATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AVG_RATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TOTAL_REVENUE;
        [LocalData]
        public decimal? TOTAL_REVENUE
        {
            get { return m_Internal.TOTAL_REVENUE; }
            set
            {
                if(m_Internal.TOTAL_REVENUE!=value){
                    m_Internal.TOTAL_REVENUE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TOTAL_REVENUE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _REV_TYPE1;
        [LocalData]
        public int? REV_TYPE1
        {
            get { return m_Internal.REV_TYPE1; }
            set
            {
                if(m_Internal.REV_TYPE1!=value){
                    m_Internal.REV_TYPE1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REV_TYPE1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _REV_TYPE2;
        [LocalData]
        public int? REV_TYPE2
        {
            get { return m_Internal.REV_TYPE2; }
            set
            {
                if(m_Internal.REV_TYPE2!=value){
                    m_Internal.REV_TYPE2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REV_TYPE2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _REV_TYPE3;
        [LocalData]
        public int? REV_TYPE3
        {
            get { return m_Internal.REV_TYPE3; }
            set
            {
                if(m_Internal.REV_TYPE3!=value){
                    m_Internal.REV_TYPE3=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REV_TYPE3");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _REV_TYPE4;
        [LocalData]
        public int? REV_TYPE4
        {
            get { return m_Internal.REV_TYPE4; }
            set
            {
                if(m_Internal.REV_TYPE4!=value){
                    m_Internal.REV_TYPE4=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REV_TYPE4");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _CF_TOTAL_REVENUE;
        [LocalData]
        public decimal? CF_TOTAL_REVENUE
        {
            get { return m_Internal.CF_TOTAL_REVENUE; }
            set
            {
                if(m_Internal.CF_TOTAL_REVENUE!=value){
                    m_Internal.CF_TOTAL_REVENUE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_TOTAL_REVENUE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_CONTACTNAME;
        [LocalData]
        public string CF_CONTACTNAME
        {
            get { return m_Internal.CF_CONTACTNAME; }
            set
            {
                if(m_Internal.CF_CONTACTNAME!=value){
                    m_Internal.CF_CONTACTNAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_CONTACTNAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_ACCOUNTNAME;
        [LocalData]
        public string CF_ACCOUNTNAME
        {
            get { return m_Internal.CF_ACCOUNTNAME; }
            set
            {
                if(m_Internal.CF_ACCOUNTNAME!=value){
                    m_Internal.CF_ACCOUNTNAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_ACCOUNTNAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _CAT_TOTAL;
        [LocalData]
        public decimal? CAT_TOTAL
        {
            get { return m_Internal.CAT_TOTAL; }
            set
            {
                if(m_Internal.CAT_TOTAL!=value){
                    m_Internal.CAT_TOTAL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CAT_TOTAL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _AD120BusinessBlockID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid AD120BusinessBlockID
        {
            get { return m_Internal.AD120BusinessBlockID; }
            set
            {
                if(m_Internal.AD120BusinessBlockID!=value){
                    m_Internal.AD120BusinessBlockID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AD120BusinessBlockID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<OperaAD120BusinessBlock, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IOperaAD160 : IWCFDataElement
    {
        
        DateTime? SHORT_DATE1 { get; set; }
        
        DateTime? CF_STARTDATE { get; set; }
        
        string BOOKINGNAME { get; set; }
        
        DateTime? STARTDATE { get; set; }
        
        DateTime? ENDDATE { get; set; }
        
        int? ALLOTMENTHEADERID { get; set; }
        
        string BOOKSTATUS { get; set; }
        
        string CATSTATUS { get; set; }
        
        string ACCOUNTNAME { get; set; }
        
        string REPRESENTATIVE { get; set; }
        
        int? ACCOUNTNAMEID { get; set; }
        
        string CONTACTNAMEID { get; set; }
        
        string RESORT { get; set; }
        
        int? CF_ROOM { get; set; }
        
        string CF_PM { get; set; }
        
        string CF_BOOKCATSTATUS { get; set; }
        
        string CF_CATSALMANAGER { get; set; }
        
        string CF_DISTRIBUTED { get; set; }
        
        string CF_TEMP_SALMANAGER { get; set; }
        
        string CF_TEMP_CATMANAGER { get; set; }
        
        string EVENT_LINK_TYPE { get; set; }
        
        string EVENT_LINK_ID { get; set; }
        
        string EVENT_RESORT { get; set; }
        
        string EVENTTYPE { get; set; }
        
        int? SETUPTIME { get; set; }
        
        int? SETDOWNTIME { get; set; }
        
        string EVENTNAME { get; set; }
        
        int? EVENTID { get; set; }
        
        string EVENTSTATUS { get; set; }
        
        string EVENTROOM { get; set; }
        
        int? ATTENDEES { get; set; }
        
        int? EXPECTED_ATTENDEES { get; set; }
        
        string ACTUAL_ATTENDEES { get; set; }
        
        string GUARANTEED_ATTENDEES { get; set; }
        
        string ROOMSETUP { get; set; }
        
        DateTime? CF_SETUPDOWN_TIME { get; set; }
        
        DateTime? CF_TIME { get; set; }
        
        DateTime? CF_TIME_SETUP_SETDOWN { get; set; }
        
        string CF_DOORCARD { get; set; }
        
        string CF_EVENTROOMNAME { get; set; }
        
        string CF_EVENTROOMSETUP { get; set; }
        
        string EVENT_ID { get; set; }
        
        string NOTES { get; set; }
        
        Guid OperaAD160ID { get; set; }
        
        string DataSource { get; set; }

        void Copy( IOperaAD160 _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataOperaAD160 : IOperaAD160
    {
        [DataMember]
        public DateTime? SHORT_DATE1 { get; set; }
        [DataMember]
        public DateTime? CF_STARTDATE { get; set; }
        [DataMember]
        public string BOOKINGNAME { get; set; }
        [DataMember]
        public DateTime? STARTDATE { get; set; }
        [DataMember]
        public DateTime? ENDDATE { get; set; }
        [DataMember]
        public int? ALLOTMENTHEADERID { get; set; }
        [DataMember]
        public string BOOKSTATUS { get; set; }
        [DataMember]
        public string CATSTATUS { get; set; }
        [DataMember]
        public string ACCOUNTNAME { get; set; }
        [DataMember]
        public string REPRESENTATIVE { get; set; }
        [DataMember]
        public int? ACCOUNTNAMEID { get; set; }
        [DataMember]
        public string CONTACTNAMEID { get; set; }
        [DataMember]
        public string RESORT { get; set; }
        [DataMember]
        public int? CF_ROOM { get; set; }
        [DataMember]
        public string CF_PM { get; set; }
        [DataMember]
        public string CF_BOOKCATSTATUS { get; set; }
        [DataMember]
        public string CF_CATSALMANAGER { get; set; }
        [DataMember]
        public string CF_DISTRIBUTED { get; set; }
        [DataMember]
        public string CF_TEMP_SALMANAGER { get; set; }
        [DataMember]
        public string CF_TEMP_CATMANAGER { get; set; }
        [DataMember]
        public string EVENT_LINK_TYPE { get; set; }
        [DataMember]
        public string EVENT_LINK_ID { get; set; }
        [DataMember]
        public string EVENT_RESORT { get; set; }
        [DataMember]
        public string EVENTTYPE { get; set; }
        [DataMember]
        public int? SETUPTIME { get; set; }
        [DataMember]
        public int? SETDOWNTIME { get; set; }
        [DataMember]
        public string EVENTNAME { get; set; }
        [DataMember]
        public int? EVENTID { get; set; }
        [DataMember]
        public string EVENTSTATUS { get; set; }
        [DataMember]
        public string EVENTROOM { get; set; }
        [DataMember]
        public int? ATTENDEES { get; set; }
        [DataMember]
        public int? EXPECTED_ATTENDEES { get; set; }
        [DataMember]
        public string ACTUAL_ATTENDEES { get; set; }
        [DataMember]
        public string GUARANTEED_ATTENDEES { get; set; }
        [DataMember]
        public string ROOMSETUP { get; set; }
        [DataMember]
        public DateTime? CF_SETUPDOWN_TIME { get; set; }
        [DataMember]
        public DateTime? CF_TIME { get; set; }
        [DataMember]
        public DateTime? CF_TIME_SETUP_SETDOWN { get; set; }
        [DataMember]
        public string CF_DOORCARD { get; set; }
        [DataMember]
        public string CF_EVENTROOMNAME { get; set; }
        [DataMember]
        public string CF_EVENTROOMSETUP { get; set; }
        [DataMember]
        public string EVENT_ID { get; set; }
        [DataMember]
        public string NOTES { get; set; }
        [DataMember]
        public Guid OperaAD160ID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( IOperaAD160 _Item )
        {
             SHORT_DATE1 = _Item.SHORT_DATE1;			
             CF_STARTDATE = _Item.CF_STARTDATE;			
             BOOKINGNAME = _Item.BOOKINGNAME;			
             STARTDATE = _Item.STARTDATE;			
             ENDDATE = _Item.ENDDATE;			
             ALLOTMENTHEADERID = _Item.ALLOTMENTHEADERID;			
             BOOKSTATUS = _Item.BOOKSTATUS;			
             CATSTATUS = _Item.CATSTATUS;			
             ACCOUNTNAME = _Item.ACCOUNTNAME;			
             REPRESENTATIVE = _Item.REPRESENTATIVE;			
             ACCOUNTNAMEID = _Item.ACCOUNTNAMEID;			
             CONTACTNAMEID = _Item.CONTACTNAMEID;			
             RESORT = _Item.RESORT;			
             CF_ROOM = _Item.CF_ROOM;			
             CF_PM = _Item.CF_PM;			
             CF_BOOKCATSTATUS = _Item.CF_BOOKCATSTATUS;			
             CF_CATSALMANAGER = _Item.CF_CATSALMANAGER;			
             CF_DISTRIBUTED = _Item.CF_DISTRIBUTED;			
             CF_TEMP_SALMANAGER = _Item.CF_TEMP_SALMANAGER;			
             CF_TEMP_CATMANAGER = _Item.CF_TEMP_CATMANAGER;			
             EVENT_LINK_TYPE = _Item.EVENT_LINK_TYPE;			
             EVENT_LINK_ID = _Item.EVENT_LINK_ID;			
             EVENT_RESORT = _Item.EVENT_RESORT;			
             EVENTTYPE = _Item.EVENTTYPE;			
             SETUPTIME = _Item.SETUPTIME;			
             SETDOWNTIME = _Item.SETDOWNTIME;			
             EVENTNAME = _Item.EVENTNAME;			
             EVENTID = _Item.EVENTID;			
             EVENTSTATUS = _Item.EVENTSTATUS;			
             EVENTROOM = _Item.EVENTROOM;			
             ATTENDEES = _Item.ATTENDEES;			
             EXPECTED_ATTENDEES = _Item.EXPECTED_ATTENDEES;			
             ACTUAL_ATTENDEES = _Item.ACTUAL_ATTENDEES;			
             GUARANTEED_ATTENDEES = _Item.GUARANTEED_ATTENDEES;			
             ROOMSETUP = _Item.ROOMSETUP;			
             CF_SETUPDOWN_TIME = _Item.CF_SETUPDOWN_TIME;			
             CF_TIME = _Item.CF_TIME;			
             CF_TIME_SETUP_SETDOWN = _Item.CF_TIME_SETUP_SETDOWN;			
             CF_DOORCARD = _Item.CF_DOORCARD;			
             CF_EVENTROOMNAME = _Item.CF_EVENTROOMNAME;			
             CF_EVENTROOMSETUP = _Item.CF_EVENTROOMSETUP;			
             EVENT_ID = _Item.EVENT_ID;			
             NOTES = _Item.NOTES;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new OperaAD160( this );
        }
    }


    /// <summary>
    /// A class which represents the OperaAD160 table in the RenAix Database.
    /// </summary>
    public partial class OperaAD160 : BaseDataObject<DataOperaAD160>, IActiveRecord, ICallOnCreated, IOperaAD160
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<OperaAD160> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<OperaAD160>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<OperaAD160> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(OperaAD160 item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                OperaAD160 item=new OperaAD160();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<OperaAD160> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public OperaAD160()
        {
            m_Internal = new DataOperaAD160();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.OperaAD160ID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public OperaAD160( bool _CallOnCreated )
        {
            m_Internal = new DataOperaAD160();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public OperaAD160(string connectionString, string providerName) 
        {
            m_Internal = new DataOperaAD160();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.OperaAD160ID = Guid.NewGuid( );     
        }

        public OperaAD160( IOperaAD160 _Item )
        {
            m_Internal = new DataOperaAD160();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public OperaAD160( DataOperaAD160 _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IOperaAD160 _Item )
        {
            m_Internal.SHORT_DATE1 = _Item.SHORT_DATE1;			
            m_Internal.CF_STARTDATE = _Item.CF_STARTDATE;			
            m_Internal.BOOKINGNAME = _Item.BOOKINGNAME;			
            m_Internal.STARTDATE = _Item.STARTDATE;			
            m_Internal.ENDDATE = _Item.ENDDATE;			
            m_Internal.ALLOTMENTHEADERID = _Item.ALLOTMENTHEADERID;			
            m_Internal.BOOKSTATUS = _Item.BOOKSTATUS;			
            m_Internal.CATSTATUS = _Item.CATSTATUS;			
            m_Internal.ACCOUNTNAME = _Item.ACCOUNTNAME;			
            m_Internal.REPRESENTATIVE = _Item.REPRESENTATIVE;			
            m_Internal.ACCOUNTNAMEID = _Item.ACCOUNTNAMEID;			
            m_Internal.CONTACTNAMEID = _Item.CONTACTNAMEID;			
            m_Internal.RESORT = _Item.RESORT;			
            m_Internal.CF_ROOM = _Item.CF_ROOM;			
            m_Internal.CF_PM = _Item.CF_PM;			
            m_Internal.CF_BOOKCATSTATUS = _Item.CF_BOOKCATSTATUS;			
            m_Internal.CF_CATSALMANAGER = _Item.CF_CATSALMANAGER;			
            m_Internal.CF_DISTRIBUTED = _Item.CF_DISTRIBUTED;			
            m_Internal.CF_TEMP_SALMANAGER = _Item.CF_TEMP_SALMANAGER;			
            m_Internal.CF_TEMP_CATMANAGER = _Item.CF_TEMP_CATMANAGER;			
            m_Internal.EVENT_LINK_TYPE = _Item.EVENT_LINK_TYPE;			
            m_Internal.EVENT_LINK_ID = _Item.EVENT_LINK_ID;			
            m_Internal.EVENT_RESORT = _Item.EVENT_RESORT;			
            m_Internal.EVENTTYPE = _Item.EVENTTYPE;			
            m_Internal.SETUPTIME = _Item.SETUPTIME;			
            m_Internal.SETDOWNTIME = _Item.SETDOWNTIME;			
            m_Internal.EVENTNAME = _Item.EVENTNAME;			
            m_Internal.EVENTID = _Item.EVENTID;			
            m_Internal.EVENTSTATUS = _Item.EVENTSTATUS;			
            m_Internal.EVENTROOM = _Item.EVENTROOM;			
            m_Internal.ATTENDEES = _Item.ATTENDEES;			
            m_Internal.EXPECTED_ATTENDEES = _Item.EXPECTED_ATTENDEES;			
            m_Internal.ACTUAL_ATTENDEES = _Item.ACTUAL_ATTENDEES;			
            m_Internal.GUARANTEED_ATTENDEES = _Item.GUARANTEED_ATTENDEES;			
            m_Internal.ROOMSETUP = _Item.ROOMSETUP;			
            m_Internal.CF_SETUPDOWN_TIME = _Item.CF_SETUPDOWN_TIME;			
            m_Internal.CF_TIME = _Item.CF_TIME;			
            m_Internal.CF_TIME_SETUP_SETDOWN = _Item.CF_TIME_SETUP_SETDOWN;			
            m_Internal.CF_DOORCARD = _Item.CF_DOORCARD;			
            m_Internal.CF_EVENTROOMNAME = _Item.CF_EVENTROOMNAME;			
            m_Internal.CF_EVENTROOMSETUP = _Item.CF_EVENTROOMSETUP;			
            m_Internal.EVENT_ID = _Item.EVENT_ID;			
            m_Internal.NOTES = _Item.NOTES;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new OperaAD160( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.OperaAD160ID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                OperaAD160.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<OperaAD160>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public OperaAD160(Expression<Func<OperaAD160, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<OperaAD160> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<OperaAD160> _repo;
            
            if(db.TestMode)
            {
                OperaAD160.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<OperaAD160>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<OperaAD160> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static OperaAD160 SingleOrDefault(Expression<Func<OperaAD160, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static OperaAD160 SingleOrDefault(Expression<Func<OperaAD160, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<OperaAD160> repo = GetRepo(connectionString,providerName);
            OperaAD160 single = repo.SingleOrDefault<OperaAD160>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<OperaAD160, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<OperaAD160, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyOperaAD160Loaded = false;
        protected static OperaAD160 EmptyOperaAD160Member = null;

        public static OperaAD160 GetByID(Guid? value) 
        {
            OperaAD160 rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static OperaAD160 GetByID(Guid value) 
        {
            OperaAD160 rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyOperaAD160Loaded )
                    {
                        rc = EmptyOperaAD160Member;
                    }
                    else
                    {
                        IsEmptyOperaAD160Loaded = true;
                        rc = OperaAD160.Find( L => L.OperaAD160ID.Equals( value ) ).FirstOrDefault( );
                        EmptyOperaAD160Member = rc;
                    }
                }
                else
                {
                    rc = OperaAD160.Find( L => L.OperaAD160ID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<OperaAD160> Find(Expression<Func<OperaAD160, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<OperaAD160> Find(Expression<Func<OperaAD160, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<OperaAD160> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<OperaAD160> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<OperaAD160> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<OperaAD160> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<OperaAD160> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<OperaAD160> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "OperaAD160ID";
        }

        public object KeyValue()
        {
            return this.OperaAD160ID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.BOOKINGNAME )
//			{
//				rc = this.BOOKINGNAME.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is OperaAD160)
            {
                OperaAD160 compare=(OperaAD160)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.OperaAD160ID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.BOOKINGNAME.ToString();
        }

        public string DescriptorColumn() 
        {
            return "BOOKINGNAME";
        }

        public static string GetKeyColumn()
        {
            return "OperaAD160ID";
        }        

        public static string GetDescriptorColumn()
        {
            return "BOOKINGNAME";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.OperaAD160ID;
            }
            set
            {
                m_Internal.OperaAD160ID = value;
            }
        }


//        DateTime? _SHORT_DATE1;
        [LocalData]
        public DateTime? SHORT_DATE1
        {
            get { return m_Internal.SHORT_DATE1; }
            set
            {
                if(m_Internal.SHORT_DATE1!=value){
                    m_Internal.SHORT_DATE1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SHORT_DATE1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _CF_STARTDATE;
        [LocalData]
        public DateTime? CF_STARTDATE
        {
            get { return m_Internal.CF_STARTDATE; }
            set
            {
                if(m_Internal.CF_STARTDATE!=value){
                    m_Internal.CF_STARTDATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_STARTDATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _BOOKINGNAME;
        [LocalData]
        public string BOOKINGNAME
        {
            get { return m_Internal.BOOKINGNAME; }
            set
            {
                if(m_Internal.BOOKINGNAME!=value){
                    m_Internal.BOOKINGNAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BOOKINGNAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _STARTDATE;
        [LocalData]
        public DateTime? STARTDATE
        {
            get { return m_Internal.STARTDATE; }
            set
            {
                if(m_Internal.STARTDATE!=value){
                    m_Internal.STARTDATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="STARTDATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _ENDDATE;
        [LocalData]
        public DateTime? ENDDATE
        {
            get { return m_Internal.ENDDATE; }
            set
            {
                if(m_Internal.ENDDATE!=value){
                    m_Internal.ENDDATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ENDDATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ALLOTMENTHEADERID;
        [LocalData]
        public int? ALLOTMENTHEADERID
        {
            get { return m_Internal.ALLOTMENTHEADERID; }
            set
            {
                if(m_Internal.ALLOTMENTHEADERID!=value){
                    m_Internal.ALLOTMENTHEADERID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ALLOTMENTHEADERID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _BOOKSTATUS;
        [LocalData]
        public string BOOKSTATUS
        {
            get { return m_Internal.BOOKSTATUS; }
            set
            {
                if(m_Internal.BOOKSTATUS!=value){
                    m_Internal.BOOKSTATUS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BOOKSTATUS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CATSTATUS;
        [LocalData]
        public string CATSTATUS
        {
            get { return m_Internal.CATSTATUS; }
            set
            {
                if(m_Internal.CATSTATUS!=value){
                    m_Internal.CATSTATUS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CATSTATUS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ACCOUNTNAME;
        [LocalData]
        public string ACCOUNTNAME
        {
            get { return m_Internal.ACCOUNTNAME; }
            set
            {
                if(m_Internal.ACCOUNTNAME!=value){
                    m_Internal.ACCOUNTNAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ACCOUNTNAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _REPRESENTATIVE;
        [LocalData]
        public string REPRESENTATIVE
        {
            get { return m_Internal.REPRESENTATIVE; }
            set
            {
                if(m_Internal.REPRESENTATIVE!=value){
                    m_Internal.REPRESENTATIVE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REPRESENTATIVE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ACCOUNTNAMEID;
        [LocalData]
        public int? ACCOUNTNAMEID
        {
            get { return m_Internal.ACCOUNTNAMEID; }
            set
            {
                if(m_Internal.ACCOUNTNAMEID!=value){
                    m_Internal.ACCOUNTNAMEID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ACCOUNTNAMEID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CONTACTNAMEID;
        [LocalData]
        public string CONTACTNAMEID
        {
            get { return m_Internal.CONTACTNAMEID; }
            set
            {
                if(m_Internal.CONTACTNAMEID!=value){
                    m_Internal.CONTACTNAMEID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CONTACTNAMEID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RESORT;
        [LocalData]
        public string RESORT
        {
            get { return m_Internal.RESORT; }
            set
            {
                if(m_Internal.RESORT!=value){
                    m_Internal.RESORT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RESORT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _CF_ROOM;
        [LocalData]
        public int? CF_ROOM
        {
            get { return m_Internal.CF_ROOM; }
            set
            {
                if(m_Internal.CF_ROOM!=value){
                    m_Internal.CF_ROOM=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_ROOM");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_PM;
        [LocalData]
        public string CF_PM
        {
            get { return m_Internal.CF_PM; }
            set
            {
                if(m_Internal.CF_PM!=value){
                    m_Internal.CF_PM=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_PM");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_BOOKCATSTATUS;
        [LocalData]
        public string CF_BOOKCATSTATUS
        {
            get { return m_Internal.CF_BOOKCATSTATUS; }
            set
            {
                if(m_Internal.CF_BOOKCATSTATUS!=value){
                    m_Internal.CF_BOOKCATSTATUS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_BOOKCATSTATUS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_CATSALMANAGER;
        [LocalData]
        public string CF_CATSALMANAGER
        {
            get { return m_Internal.CF_CATSALMANAGER; }
            set
            {
                if(m_Internal.CF_CATSALMANAGER!=value){
                    m_Internal.CF_CATSALMANAGER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_CATSALMANAGER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_DISTRIBUTED;
        [LocalData]
        public string CF_DISTRIBUTED
        {
            get { return m_Internal.CF_DISTRIBUTED; }
            set
            {
                if(m_Internal.CF_DISTRIBUTED!=value){
                    m_Internal.CF_DISTRIBUTED=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_DISTRIBUTED");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_TEMP_SALMANAGER;
        [LocalData]
        public string CF_TEMP_SALMANAGER
        {
            get { return m_Internal.CF_TEMP_SALMANAGER; }
            set
            {
                if(m_Internal.CF_TEMP_SALMANAGER!=value){
                    m_Internal.CF_TEMP_SALMANAGER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_TEMP_SALMANAGER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_TEMP_CATMANAGER;
        [LocalData]
        public string CF_TEMP_CATMANAGER
        {
            get { return m_Internal.CF_TEMP_CATMANAGER; }
            set
            {
                if(m_Internal.CF_TEMP_CATMANAGER!=value){
                    m_Internal.CF_TEMP_CATMANAGER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_TEMP_CATMANAGER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EVENT_LINK_TYPE;
        [LocalData]
        public string EVENT_LINK_TYPE
        {
            get { return m_Internal.EVENT_LINK_TYPE; }
            set
            {
                if(m_Internal.EVENT_LINK_TYPE!=value){
                    m_Internal.EVENT_LINK_TYPE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EVENT_LINK_TYPE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EVENT_LINK_ID;
        [LocalData]
        public string EVENT_LINK_ID
        {
            get { return m_Internal.EVENT_LINK_ID; }
            set
            {
                if(m_Internal.EVENT_LINK_ID!=value){
                    m_Internal.EVENT_LINK_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EVENT_LINK_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EVENT_RESORT;
        [LocalData]
        public string EVENT_RESORT
        {
            get { return m_Internal.EVENT_RESORT; }
            set
            {
                if(m_Internal.EVENT_RESORT!=value){
                    m_Internal.EVENT_RESORT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EVENT_RESORT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EVENTTYPE;
        [LocalData]
        public string EVENTTYPE
        {
            get { return m_Internal.EVENTTYPE; }
            set
            {
                if(m_Internal.EVENTTYPE!=value){
                    m_Internal.EVENTTYPE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EVENTTYPE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _SETUPTIME;
        [LocalData]
        public int? SETUPTIME
        {
            get { return m_Internal.SETUPTIME; }
            set
            {
                if(m_Internal.SETUPTIME!=value){
                    m_Internal.SETUPTIME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SETUPTIME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _SETDOWNTIME;
        [LocalData]
        public int? SETDOWNTIME
        {
            get { return m_Internal.SETDOWNTIME; }
            set
            {
                if(m_Internal.SETDOWNTIME!=value){
                    m_Internal.SETDOWNTIME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SETDOWNTIME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EVENTNAME;
        [LocalData]
        public string EVENTNAME
        {
            get { return m_Internal.EVENTNAME; }
            set
            {
                if(m_Internal.EVENTNAME!=value){
                    m_Internal.EVENTNAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EVENTNAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EVENTID;
        [LocalData]
        public int? EVENTID
        {
            get { return m_Internal.EVENTID; }
            set
            {
                if(m_Internal.EVENTID!=value){
                    m_Internal.EVENTID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EVENTID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EVENTSTATUS;
        [LocalData]
        public string EVENTSTATUS
        {
            get { return m_Internal.EVENTSTATUS; }
            set
            {
                if(m_Internal.EVENTSTATUS!=value){
                    m_Internal.EVENTSTATUS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EVENTSTATUS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EVENTROOM;
        [LocalData]
        public string EVENTROOM
        {
            get { return m_Internal.EVENTROOM; }
            set
            {
                if(m_Internal.EVENTROOM!=value){
                    m_Internal.EVENTROOM=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EVENTROOM");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ATTENDEES;
        [LocalData]
        public int? ATTENDEES
        {
            get { return m_Internal.ATTENDEES; }
            set
            {
                if(m_Internal.ATTENDEES!=value){
                    m_Internal.ATTENDEES=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ATTENDEES");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EXPECTED_ATTENDEES;
        [LocalData]
        public int? EXPECTED_ATTENDEES
        {
            get { return m_Internal.EXPECTED_ATTENDEES; }
            set
            {
                if(m_Internal.EXPECTED_ATTENDEES!=value){
                    m_Internal.EXPECTED_ATTENDEES=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EXPECTED_ATTENDEES");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ACTUAL_ATTENDEES;
        [LocalData]
        public string ACTUAL_ATTENDEES
        {
            get { return m_Internal.ACTUAL_ATTENDEES; }
            set
            {
                if(m_Internal.ACTUAL_ATTENDEES!=value){
                    m_Internal.ACTUAL_ATTENDEES=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ACTUAL_ATTENDEES");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _GUARANTEED_ATTENDEES;
        [LocalData]
        public string GUARANTEED_ATTENDEES
        {
            get { return m_Internal.GUARANTEED_ATTENDEES; }
            set
            {
                if(m_Internal.GUARANTEED_ATTENDEES!=value){
                    m_Internal.GUARANTEED_ATTENDEES=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GUARANTEED_ATTENDEES");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ROOMSETUP;
        [LocalData]
        public string ROOMSETUP
        {
            get { return m_Internal.ROOMSETUP; }
            set
            {
                if(m_Internal.ROOMSETUP!=value){
                    m_Internal.ROOMSETUP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ROOMSETUP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _CF_SETUPDOWN_TIME;
        [LocalData]
        public DateTime? CF_SETUPDOWN_TIME
        {
            get { return m_Internal.CF_SETUPDOWN_TIME; }
            set
            {
                if(m_Internal.CF_SETUPDOWN_TIME!=value){
                    m_Internal.CF_SETUPDOWN_TIME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_SETUPDOWN_TIME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _CF_TIME;
        [LocalData]
        public DateTime? CF_TIME
        {
            get { return m_Internal.CF_TIME; }
            set
            {
                if(m_Internal.CF_TIME!=value){
                    m_Internal.CF_TIME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_TIME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _CF_TIME_SETUP_SETDOWN;
        [LocalData]
        public DateTime? CF_TIME_SETUP_SETDOWN
        {
            get { return m_Internal.CF_TIME_SETUP_SETDOWN; }
            set
            {
                if(m_Internal.CF_TIME_SETUP_SETDOWN!=value){
                    m_Internal.CF_TIME_SETUP_SETDOWN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_TIME_SETUP_SETDOWN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_DOORCARD;
        [LocalData]
        public string CF_DOORCARD
        {
            get { return m_Internal.CF_DOORCARD; }
            set
            {
                if(m_Internal.CF_DOORCARD!=value){
                    m_Internal.CF_DOORCARD=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_DOORCARD");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_EVENTROOMNAME;
        [LocalData]
        public string CF_EVENTROOMNAME
        {
            get { return m_Internal.CF_EVENTROOMNAME; }
            set
            {
                if(m_Internal.CF_EVENTROOMNAME!=value){
                    m_Internal.CF_EVENTROOMNAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_EVENTROOMNAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_EVENTROOMSETUP;
        [LocalData]
        public string CF_EVENTROOMSETUP
        {
            get { return m_Internal.CF_EVENTROOMSETUP; }
            set
            {
                if(m_Internal.CF_EVENTROOMSETUP!=value){
                    m_Internal.CF_EVENTROOMSETUP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_EVENTROOMSETUP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EVENT_ID;
        [LocalData]
        public string EVENT_ID
        {
            get { return m_Internal.EVENT_ID; }
            set
            {
                if(m_Internal.EVENT_ID!=value){
                    m_Internal.EVENT_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EVENT_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _NOTES;
        [LocalData]
        public string NOTES
        {
            get { return m_Internal.NOTES; }
            set
            {
                if(m_Internal.NOTES!=value){
                    m_Internal.NOTES=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NOTES");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _OperaAD160ID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid OperaAD160ID
        {
            get { return m_Internal.OperaAD160ID; }
            set
            {
                if(m_Internal.OperaAD160ID!=value){
                    m_Internal.OperaAD160ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OperaAD160ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<OperaAD160, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IOperaD114 : IWCFDataElement
    {
        
        string LAST_YEAR { get; set; }
        
        int? GRP1_SORT_COL1 { get; set; }
        
        string GRP1_SORT_COL2 { get; set; }
        
        string TC_GROUP { get; set; }
        
        string GRP2_SORT_COL1 { get; set; }
        
        string GRP2_SORT_COL2 { get; set; }
        
        string TC_SUBGROUP { get; set; }
        
        string SORT_TRX_CODE { get; set; }
        
        string TRX_CODE { get; set; }
        
        string DESCRIPTION { get; set; }
        
        int? HEADING_ORDER { get; set; }
        
        string HEADING1 { get; set; }
        
        string HEADER_YEAR { get; set; }
        
        string HEADING2 { get; set; }
        
        string SUM_AMT_TOTAL { get; set; }
        
        string SUM_AMT_GROUP { get; set; }
        
        string SUM_AMT_SUBGROUP { get; set; }
        
        string SUM_CUR_AMT_TOTAL { get; set; }
        
        string SUM_CUR_AMT_GROUP { get; set; }
        
        string SUM_CUR_AMT_SUBGROUP { get; set; }
        
        string TRX_TYPE { get; set; }
        
        int? AMOUNT { get; set; }
        
        int? CUR_AMOUNT { get; set; }
        
        Guid OperaD114ID { get; set; }
        
        string DataSource { get; set; }

        void Copy( IOperaD114 _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataOperaD114 : IOperaD114
    {
        [DataMember]
        public string LAST_YEAR { get; set; }
        [DataMember]
        public int? GRP1_SORT_COL1 { get; set; }
        [DataMember]
        public string GRP1_SORT_COL2 { get; set; }
        [DataMember]
        public string TC_GROUP { get; set; }
        [DataMember]
        public string GRP2_SORT_COL1 { get; set; }
        [DataMember]
        public string GRP2_SORT_COL2 { get; set; }
        [DataMember]
        public string TC_SUBGROUP { get; set; }
        [DataMember]
        public string SORT_TRX_CODE { get; set; }
        [DataMember]
        public string TRX_CODE { get; set; }
        [DataMember]
        public string DESCRIPTION { get; set; }
        [DataMember]
        public int? HEADING_ORDER { get; set; }
        [DataMember]
        public string HEADING1 { get; set; }
        [DataMember]
        public string HEADER_YEAR { get; set; }
        [DataMember]
        public string HEADING2 { get; set; }
        [DataMember]
        public string SUM_AMT_TOTAL { get; set; }
        [DataMember]
        public string SUM_AMT_GROUP { get; set; }
        [DataMember]
        public string SUM_AMT_SUBGROUP { get; set; }
        [DataMember]
        public string SUM_CUR_AMT_TOTAL { get; set; }
        [DataMember]
        public string SUM_CUR_AMT_GROUP { get; set; }
        [DataMember]
        public string SUM_CUR_AMT_SUBGROUP { get; set; }
        [DataMember]
        public string TRX_TYPE { get; set; }
        [DataMember]
        public int? AMOUNT { get; set; }
        [DataMember]
        public int? CUR_AMOUNT { get; set; }
        [DataMember]
        public Guid OperaD114ID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( IOperaD114 _Item )
        {
             LAST_YEAR = _Item.LAST_YEAR;			
             GRP1_SORT_COL1 = _Item.GRP1_SORT_COL1;			
             GRP1_SORT_COL2 = _Item.GRP1_SORT_COL2;			
             TC_GROUP = _Item.TC_GROUP;			
             GRP2_SORT_COL1 = _Item.GRP2_SORT_COL1;			
             GRP2_SORT_COL2 = _Item.GRP2_SORT_COL2;			
             TC_SUBGROUP = _Item.TC_SUBGROUP;			
             SORT_TRX_CODE = _Item.SORT_TRX_CODE;			
             TRX_CODE = _Item.TRX_CODE;			
             DESCRIPTION = _Item.DESCRIPTION;			
             HEADING_ORDER = _Item.HEADING_ORDER;			
             HEADING1 = _Item.HEADING1;			
             HEADER_YEAR = _Item.HEADER_YEAR;			
             HEADING2 = _Item.HEADING2;			
             SUM_AMT_TOTAL = _Item.SUM_AMT_TOTAL;			
             SUM_AMT_GROUP = _Item.SUM_AMT_GROUP;			
             SUM_AMT_SUBGROUP = _Item.SUM_AMT_SUBGROUP;			
             SUM_CUR_AMT_TOTAL = _Item.SUM_CUR_AMT_TOTAL;			
             SUM_CUR_AMT_GROUP = _Item.SUM_CUR_AMT_GROUP;			
             SUM_CUR_AMT_SUBGROUP = _Item.SUM_CUR_AMT_SUBGROUP;			
             TRX_TYPE = _Item.TRX_TYPE;			
             AMOUNT = _Item.AMOUNT;			
             CUR_AMOUNT = _Item.CUR_AMOUNT;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new OperaD114( this );
        }
    }


    /// <summary>
    /// A class which represents the OperaD114 table in the RenAix Database.
    /// </summary>
    public partial class OperaD114 : BaseDataObject<DataOperaD114>, IActiveRecord, ICallOnCreated, IOperaD114
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<OperaD114> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<OperaD114>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<OperaD114> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(OperaD114 item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                OperaD114 item=new OperaD114();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<OperaD114> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public OperaD114()
        {
            m_Internal = new DataOperaD114();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.OperaD114ID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public OperaD114( bool _CallOnCreated )
        {
            m_Internal = new DataOperaD114();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public OperaD114(string connectionString, string providerName) 
        {
            m_Internal = new DataOperaD114();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.OperaD114ID = Guid.NewGuid( );     
        }

        public OperaD114( IOperaD114 _Item )
        {
            m_Internal = new DataOperaD114();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public OperaD114( DataOperaD114 _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IOperaD114 _Item )
        {
            m_Internal.LAST_YEAR = _Item.LAST_YEAR;			
            m_Internal.GRP1_SORT_COL1 = _Item.GRP1_SORT_COL1;			
            m_Internal.GRP1_SORT_COL2 = _Item.GRP1_SORT_COL2;			
            m_Internal.TC_GROUP = _Item.TC_GROUP;			
            m_Internal.GRP2_SORT_COL1 = _Item.GRP2_SORT_COL1;			
            m_Internal.GRP2_SORT_COL2 = _Item.GRP2_SORT_COL2;			
            m_Internal.TC_SUBGROUP = _Item.TC_SUBGROUP;			
            m_Internal.SORT_TRX_CODE = _Item.SORT_TRX_CODE;			
            m_Internal.TRX_CODE = _Item.TRX_CODE;			
            m_Internal.DESCRIPTION = _Item.DESCRIPTION;			
            m_Internal.HEADING_ORDER = _Item.HEADING_ORDER;			
            m_Internal.HEADING1 = _Item.HEADING1;			
            m_Internal.HEADER_YEAR = _Item.HEADER_YEAR;			
            m_Internal.HEADING2 = _Item.HEADING2;			
            m_Internal.SUM_AMT_TOTAL = _Item.SUM_AMT_TOTAL;			
            m_Internal.SUM_AMT_GROUP = _Item.SUM_AMT_GROUP;			
            m_Internal.SUM_AMT_SUBGROUP = _Item.SUM_AMT_SUBGROUP;			
            m_Internal.SUM_CUR_AMT_TOTAL = _Item.SUM_CUR_AMT_TOTAL;			
            m_Internal.SUM_CUR_AMT_GROUP = _Item.SUM_CUR_AMT_GROUP;			
            m_Internal.SUM_CUR_AMT_SUBGROUP = _Item.SUM_CUR_AMT_SUBGROUP;			
            m_Internal.TRX_TYPE = _Item.TRX_TYPE;			
            m_Internal.AMOUNT = _Item.AMOUNT;			
            m_Internal.CUR_AMOUNT = _Item.CUR_AMOUNT;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new OperaD114( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.OperaD114ID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                OperaD114.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<OperaD114>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public OperaD114(Expression<Func<OperaD114, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<OperaD114> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<OperaD114> _repo;
            
            if(db.TestMode)
            {
                OperaD114.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<OperaD114>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<OperaD114> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static OperaD114 SingleOrDefault(Expression<Func<OperaD114, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static OperaD114 SingleOrDefault(Expression<Func<OperaD114, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<OperaD114> repo = GetRepo(connectionString,providerName);
            OperaD114 single = repo.SingleOrDefault<OperaD114>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<OperaD114, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<OperaD114, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyOperaD114Loaded = false;
        protected static OperaD114 EmptyOperaD114Member = null;

        public static OperaD114 GetByID(Guid? value) 
        {
            OperaD114 rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static OperaD114 GetByID(Guid value) 
        {
            OperaD114 rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyOperaD114Loaded )
                    {
                        rc = EmptyOperaD114Member;
                    }
                    else
                    {
                        IsEmptyOperaD114Loaded = true;
                        rc = OperaD114.Find( L => L.OperaD114ID.Equals( value ) ).FirstOrDefault( );
                        EmptyOperaD114Member = rc;
                    }
                }
                else
                {
                    rc = OperaD114.Find( L => L.OperaD114ID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<OperaD114> Find(Expression<Func<OperaD114, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<OperaD114> Find(Expression<Func<OperaD114, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<OperaD114> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<OperaD114> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<OperaD114> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<OperaD114> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<OperaD114> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<OperaD114> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "OperaD114ID";
        }

        public object KeyValue()
        {
            return this.OperaD114ID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.LAST_YEAR )
//			{
//				rc = this.LAST_YEAR.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is OperaD114)
            {
                OperaD114 compare=(OperaD114)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.OperaD114ID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.LAST_YEAR.ToString();
        }

        public string DescriptorColumn() 
        {
            return "LAST_YEAR";
        }

        public static string GetKeyColumn()
        {
            return "OperaD114ID";
        }        

        public static string GetDescriptorColumn()
        {
            return "LAST_YEAR";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.OperaD114ID;
            }
            set
            {
                m_Internal.OperaD114ID = value;
            }
        }


//        string _LAST_YEAR;
        [LocalData]
        public string LAST_YEAR
        {
            get { return m_Internal.LAST_YEAR; }
            set
            {
                if(m_Internal.LAST_YEAR!=value){
                    m_Internal.LAST_YEAR=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LAST_YEAR");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _GRP1_SORT_COL1;
        [LocalData]
        public int? GRP1_SORT_COL1
        {
            get { return m_Internal.GRP1_SORT_COL1; }
            set
            {
                if(m_Internal.GRP1_SORT_COL1!=value){
                    m_Internal.GRP1_SORT_COL1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GRP1_SORT_COL1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _GRP1_SORT_COL2;
        [LocalData]
        public string GRP1_SORT_COL2
        {
            get { return m_Internal.GRP1_SORT_COL2; }
            set
            {
                if(m_Internal.GRP1_SORT_COL2!=value){
                    m_Internal.GRP1_SORT_COL2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GRP1_SORT_COL2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TC_GROUP;
        [LocalData]
        public string TC_GROUP
        {
            get { return m_Internal.TC_GROUP; }
            set
            {
                if(m_Internal.TC_GROUP!=value){
                    m_Internal.TC_GROUP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TC_GROUP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _GRP2_SORT_COL1;
        [LocalData]
        public string GRP2_SORT_COL1
        {
            get { return m_Internal.GRP2_SORT_COL1; }
            set
            {
                if(m_Internal.GRP2_SORT_COL1!=value){
                    m_Internal.GRP2_SORT_COL1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GRP2_SORT_COL1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _GRP2_SORT_COL2;
        [LocalData]
        public string GRP2_SORT_COL2
        {
            get { return m_Internal.GRP2_SORT_COL2; }
            set
            {
                if(m_Internal.GRP2_SORT_COL2!=value){
                    m_Internal.GRP2_SORT_COL2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GRP2_SORT_COL2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TC_SUBGROUP;
        [LocalData]
        public string TC_SUBGROUP
        {
            get { return m_Internal.TC_SUBGROUP; }
            set
            {
                if(m_Internal.TC_SUBGROUP!=value){
                    m_Internal.TC_SUBGROUP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TC_SUBGROUP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SORT_TRX_CODE;
        [LocalData]
        public string SORT_TRX_CODE
        {
            get { return m_Internal.SORT_TRX_CODE; }
            set
            {
                if(m_Internal.SORT_TRX_CODE!=value){
                    m_Internal.SORT_TRX_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SORT_TRX_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TRX_CODE;
        [LocalData]
        public string TRX_CODE
        {
            get { return m_Internal.TRX_CODE; }
            set
            {
                if(m_Internal.TRX_CODE!=value){
                    m_Internal.TRX_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TRX_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DESCRIPTION;
        [LocalData]
        public string DESCRIPTION
        {
            get { return m_Internal.DESCRIPTION; }
            set
            {
                if(m_Internal.DESCRIPTION!=value){
                    m_Internal.DESCRIPTION=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DESCRIPTION");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _HEADING_ORDER;
        [LocalData]
        public int? HEADING_ORDER
        {
            get { return m_Internal.HEADING_ORDER; }
            set
            {
                if(m_Internal.HEADING_ORDER!=value){
                    m_Internal.HEADING_ORDER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HEADING_ORDER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _HEADING1;
        [LocalData]
        public string HEADING1
        {
            get { return m_Internal.HEADING1; }
            set
            {
                if(m_Internal.HEADING1!=value){
                    m_Internal.HEADING1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HEADING1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _HEADER_YEAR;
        [LocalData]
        public string HEADER_YEAR
        {
            get { return m_Internal.HEADER_YEAR; }
            set
            {
                if(m_Internal.HEADER_YEAR!=value){
                    m_Internal.HEADER_YEAR=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HEADER_YEAR");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _HEADING2;
        [LocalData]
        public string HEADING2
        {
            get { return m_Internal.HEADING2; }
            set
            {
                if(m_Internal.HEADING2!=value){
                    m_Internal.HEADING2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HEADING2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SUM_AMT_TOTAL;
        [LocalData]
        public string SUM_AMT_TOTAL
        {
            get { return m_Internal.SUM_AMT_TOTAL; }
            set
            {
                if(m_Internal.SUM_AMT_TOTAL!=value){
                    m_Internal.SUM_AMT_TOTAL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SUM_AMT_TOTAL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SUM_AMT_GROUP;
        [LocalData]
        public string SUM_AMT_GROUP
        {
            get { return m_Internal.SUM_AMT_GROUP; }
            set
            {
                if(m_Internal.SUM_AMT_GROUP!=value){
                    m_Internal.SUM_AMT_GROUP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SUM_AMT_GROUP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SUM_AMT_SUBGROUP;
        [LocalData]
        public string SUM_AMT_SUBGROUP
        {
            get { return m_Internal.SUM_AMT_SUBGROUP; }
            set
            {
                if(m_Internal.SUM_AMT_SUBGROUP!=value){
                    m_Internal.SUM_AMT_SUBGROUP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SUM_AMT_SUBGROUP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SUM_CUR_AMT_TOTAL;
        [LocalData]
        public string SUM_CUR_AMT_TOTAL
        {
            get { return m_Internal.SUM_CUR_AMT_TOTAL; }
            set
            {
                if(m_Internal.SUM_CUR_AMT_TOTAL!=value){
                    m_Internal.SUM_CUR_AMT_TOTAL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SUM_CUR_AMT_TOTAL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SUM_CUR_AMT_GROUP;
        [LocalData]
        public string SUM_CUR_AMT_GROUP
        {
            get { return m_Internal.SUM_CUR_AMT_GROUP; }
            set
            {
                if(m_Internal.SUM_CUR_AMT_GROUP!=value){
                    m_Internal.SUM_CUR_AMT_GROUP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SUM_CUR_AMT_GROUP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SUM_CUR_AMT_SUBGROUP;
        [LocalData]
        public string SUM_CUR_AMT_SUBGROUP
        {
            get { return m_Internal.SUM_CUR_AMT_SUBGROUP; }
            set
            {
                if(m_Internal.SUM_CUR_AMT_SUBGROUP!=value){
                    m_Internal.SUM_CUR_AMT_SUBGROUP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SUM_CUR_AMT_SUBGROUP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TRX_TYPE;
        [LocalData]
        public string TRX_TYPE
        {
            get { return m_Internal.TRX_TYPE; }
            set
            {
                if(m_Internal.TRX_TYPE!=value){
                    m_Internal.TRX_TYPE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TRX_TYPE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _AMOUNT;
        [LocalData]
        public int? AMOUNT
        {
            get { return m_Internal.AMOUNT; }
            set
            {
                if(m_Internal.AMOUNT!=value){
                    m_Internal.AMOUNT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AMOUNT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _CUR_AMOUNT;
        [LocalData]
        public int? CUR_AMOUNT
        {
            get { return m_Internal.CUR_AMOUNT; }
            set
            {
                if(m_Internal.CUR_AMOUNT!=value){
                    m_Internal.CUR_AMOUNT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CUR_AMOUNT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _OperaD114ID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid OperaD114ID
        {
            get { return m_Internal.OperaD114ID; }
            set
            {
                if(m_Internal.OperaD114ID!=value){
                    m_Internal.OperaD114ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OperaD114ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<OperaD114, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IOperaD140 : IWCFDataElement
    {
        
        string IS_INTERNAL_YN { get; set; }
        
        string INTERNAL_DEBIT { get; set; }
        
        string INTERNAL_CREDIT { get; set; }
        
        string FIRST { get; set; }
        
        decimal? FIRST_DEBIT { get; set; }
        
        decimal? FIRST_CREDIT { get; set; }
        
        string SECOND { get; set; }
        
        decimal? SECOND_DEBIT { get; set; }
        
        decimal? SECOND_CREDIT { get; set; }
        
        string THIRD { get; set; }
        
        decimal? THIRD_DEBIT { get; set; }
        
        decimal? THIRD_CREDIT { get; set; }
        
        string EXP_DATE { get; set; }
        
        string RECEIPT_NO { get; set; }
        
        string GUEST_FULL_NAME { get; set; }
        
        string TARGET_RESORT { get; set; }
        
        string TRX_DESC { get; set; }
        
        string MARKET_CODE { get; set; }
        
        DateTime? BUSINESS_FORMAT_DATE { get; set; }
        
        string BUSINESS_TIME { get; set; }
        
        DateTime? BUSINESS_DATE { get; set; }
        
        string REFERENCE { get; set; }
        
        int? TRX_NO { get; set; }
        
        decimal? CASHIER_DEBIT { get; set; }
        
        decimal? CASHIER_CREDIT { get; set; }
        
        int? ROOM { get; set; }
        
        string CREDIT_CARD_SUPPLEMENT { get; set; }
        
        string CURRENCY1 { get; set; }
        
        int? TRX_CODE { get; set; }
        
        int? CASHIER_ID { get; set; }
        
        string REMARK { get; set; }
        
        int? INSERT_USER { get; set; }
        
        DateTime? INSERT_DATE { get; set; }
        
        string CHEQUE_NUMBER { get; set; }
        
        string ROOM_CLASS { get; set; }
        
        string CC_CODE { get; set; }
        
        string CASHIER_NAME { get; set; }
        
        string USER_NAME { get; set; }
        
        int? DEP_NET_TAX_AMT { get; set; }
        
        int? DEPOSIT_DEBIT { get; set; }
        
        string CASH_ID_USER_NAME { get; set; }
        
        decimal? PRINT_CASHIER_DEBIT { get; set; }
        
        decimal? PRINT_CASHIER_CREDIT { get; set; }
        
        Guid OperaD140ID { get; set; }
        
        string DataSource { get; set; }

        void Copy( IOperaD140 _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataOperaD140 : IOperaD140
    {
        [DataMember]
        public string IS_INTERNAL_YN { get; set; }
        [DataMember]
        public string INTERNAL_DEBIT { get; set; }
        [DataMember]
        public string INTERNAL_CREDIT { get; set; }
        [DataMember]
        public string FIRST { get; set; }
        [DataMember]
        public decimal? FIRST_DEBIT { get; set; }
        [DataMember]
        public decimal? FIRST_CREDIT { get; set; }
        [DataMember]
        public string SECOND { get; set; }
        [DataMember]
        public decimal? SECOND_DEBIT { get; set; }
        [DataMember]
        public decimal? SECOND_CREDIT { get; set; }
        [DataMember]
        public string THIRD { get; set; }
        [DataMember]
        public decimal? THIRD_DEBIT { get; set; }
        [DataMember]
        public decimal? THIRD_CREDIT { get; set; }
        [DataMember]
        public string EXP_DATE { get; set; }
        [DataMember]
        public string RECEIPT_NO { get; set; }
        [DataMember]
        public string GUEST_FULL_NAME { get; set; }
        [DataMember]
        public string TARGET_RESORT { get; set; }
        [DataMember]
        public string TRX_DESC { get; set; }
        [DataMember]
        public string MARKET_CODE { get; set; }
        [DataMember]
        public DateTime? BUSINESS_FORMAT_DATE { get; set; }
        [DataMember]
        public string BUSINESS_TIME { get; set; }
        [DataMember]
        public DateTime? BUSINESS_DATE { get; set; }
        [DataMember]
        public string REFERENCE { get; set; }
        [DataMember]
        public int? TRX_NO { get; set; }
        [DataMember]
        public decimal? CASHIER_DEBIT { get; set; }
        [DataMember]
        public decimal? CASHIER_CREDIT { get; set; }
        [DataMember]
        public int? ROOM { get; set; }
        [DataMember]
        public string CREDIT_CARD_SUPPLEMENT { get; set; }
        [DataMember]
        public string CURRENCY1 { get; set; }
        [DataMember]
        public int? TRX_CODE { get; set; }
        [DataMember]
        public int? CASHIER_ID { get; set; }
        [DataMember]
        public string REMARK { get; set; }
        [DataMember]
        public int? INSERT_USER { get; set; }
        [DataMember]
        public DateTime? INSERT_DATE { get; set; }
        [DataMember]
        public string CHEQUE_NUMBER { get; set; }
        [DataMember]
        public string ROOM_CLASS { get; set; }
        [DataMember]
        public string CC_CODE { get; set; }
        [DataMember]
        public string CASHIER_NAME { get; set; }
        [DataMember]
        public string USER_NAME { get; set; }
        [DataMember]
        public int? DEP_NET_TAX_AMT { get; set; }
        [DataMember]
        public int? DEPOSIT_DEBIT { get; set; }
        [DataMember]
        public string CASH_ID_USER_NAME { get; set; }
        [DataMember]
        public decimal? PRINT_CASHIER_DEBIT { get; set; }
        [DataMember]
        public decimal? PRINT_CASHIER_CREDIT { get; set; }
        [DataMember]
        public Guid OperaD140ID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( IOperaD140 _Item )
        {
             IS_INTERNAL_YN = _Item.IS_INTERNAL_YN;			
             INTERNAL_DEBIT = _Item.INTERNAL_DEBIT;			
             INTERNAL_CREDIT = _Item.INTERNAL_CREDIT;			
             FIRST = _Item.FIRST;			
             FIRST_DEBIT = _Item.FIRST_DEBIT;			
             FIRST_CREDIT = _Item.FIRST_CREDIT;			
             SECOND = _Item.SECOND;			
             SECOND_DEBIT = _Item.SECOND_DEBIT;			
             SECOND_CREDIT = _Item.SECOND_CREDIT;			
             THIRD = _Item.THIRD;			
             THIRD_DEBIT = _Item.THIRD_DEBIT;			
             THIRD_CREDIT = _Item.THIRD_CREDIT;			
             EXP_DATE = _Item.EXP_DATE;			
             RECEIPT_NO = _Item.RECEIPT_NO;			
             GUEST_FULL_NAME = _Item.GUEST_FULL_NAME;			
             TARGET_RESORT = _Item.TARGET_RESORT;			
             TRX_DESC = _Item.TRX_DESC;			
             MARKET_CODE = _Item.MARKET_CODE;			
             BUSINESS_FORMAT_DATE = _Item.BUSINESS_FORMAT_DATE;			
             BUSINESS_TIME = _Item.BUSINESS_TIME;			
             BUSINESS_DATE = _Item.BUSINESS_DATE;			
             REFERENCE = _Item.REFERENCE;			
             TRX_NO = _Item.TRX_NO;			
             CASHIER_DEBIT = _Item.CASHIER_DEBIT;			
             CASHIER_CREDIT = _Item.CASHIER_CREDIT;			
             ROOM = _Item.ROOM;			
             CREDIT_CARD_SUPPLEMENT = _Item.CREDIT_CARD_SUPPLEMENT;			
             CURRENCY1 = _Item.CURRENCY1;			
             TRX_CODE = _Item.TRX_CODE;			
             CASHIER_ID = _Item.CASHIER_ID;			
             REMARK = _Item.REMARK;			
             INSERT_USER = _Item.INSERT_USER;			
             INSERT_DATE = _Item.INSERT_DATE;			
             CHEQUE_NUMBER = _Item.CHEQUE_NUMBER;			
             ROOM_CLASS = _Item.ROOM_CLASS;			
             CC_CODE = _Item.CC_CODE;			
             CASHIER_NAME = _Item.CASHIER_NAME;			
             USER_NAME = _Item.USER_NAME;			
             DEP_NET_TAX_AMT = _Item.DEP_NET_TAX_AMT;			
             DEPOSIT_DEBIT = _Item.DEPOSIT_DEBIT;			
             CASH_ID_USER_NAME = _Item.CASH_ID_USER_NAME;			
             PRINT_CASHIER_DEBIT = _Item.PRINT_CASHIER_DEBIT;			
             PRINT_CASHIER_CREDIT = _Item.PRINT_CASHIER_CREDIT;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new OperaD140( this );
        }
    }


    /// <summary>
    /// A class which represents the OperaD140 table in the RenAix Database.
    /// </summary>
    public partial class OperaD140 : BaseDataObject<DataOperaD140>, IActiveRecord, ICallOnCreated, IOperaD140
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<OperaD140> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<OperaD140>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<OperaD140> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(OperaD140 item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                OperaD140 item=new OperaD140();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<OperaD140> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public OperaD140()
        {
            m_Internal = new DataOperaD140();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.OperaD140ID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public OperaD140( bool _CallOnCreated )
        {
            m_Internal = new DataOperaD140();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public OperaD140(string connectionString, string providerName) 
        {
            m_Internal = new DataOperaD140();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.OperaD140ID = Guid.NewGuid( );     
        }

        public OperaD140( IOperaD140 _Item )
        {
            m_Internal = new DataOperaD140();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public OperaD140( DataOperaD140 _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IOperaD140 _Item )
        {
            m_Internal.IS_INTERNAL_YN = _Item.IS_INTERNAL_YN;			
            m_Internal.INTERNAL_DEBIT = _Item.INTERNAL_DEBIT;			
            m_Internal.INTERNAL_CREDIT = _Item.INTERNAL_CREDIT;			
            m_Internal.FIRST = _Item.FIRST;			
            m_Internal.FIRST_DEBIT = _Item.FIRST_DEBIT;			
            m_Internal.FIRST_CREDIT = _Item.FIRST_CREDIT;			
            m_Internal.SECOND = _Item.SECOND;			
            m_Internal.SECOND_DEBIT = _Item.SECOND_DEBIT;			
            m_Internal.SECOND_CREDIT = _Item.SECOND_CREDIT;			
            m_Internal.THIRD = _Item.THIRD;			
            m_Internal.THIRD_DEBIT = _Item.THIRD_DEBIT;			
            m_Internal.THIRD_CREDIT = _Item.THIRD_CREDIT;			
            m_Internal.EXP_DATE = _Item.EXP_DATE;			
            m_Internal.RECEIPT_NO = _Item.RECEIPT_NO;			
            m_Internal.GUEST_FULL_NAME = _Item.GUEST_FULL_NAME;			
            m_Internal.TARGET_RESORT = _Item.TARGET_RESORT;			
            m_Internal.TRX_DESC = _Item.TRX_DESC;			
            m_Internal.MARKET_CODE = _Item.MARKET_CODE;			
            m_Internal.BUSINESS_FORMAT_DATE = _Item.BUSINESS_FORMAT_DATE;			
            m_Internal.BUSINESS_TIME = _Item.BUSINESS_TIME;			
            m_Internal.BUSINESS_DATE = _Item.BUSINESS_DATE;			
            m_Internal.REFERENCE = _Item.REFERENCE;			
            m_Internal.TRX_NO = _Item.TRX_NO;			
            m_Internal.CASHIER_DEBIT = _Item.CASHIER_DEBIT;			
            m_Internal.CASHIER_CREDIT = _Item.CASHIER_CREDIT;			
            m_Internal.ROOM = _Item.ROOM;			
            m_Internal.CREDIT_CARD_SUPPLEMENT = _Item.CREDIT_CARD_SUPPLEMENT;			
            m_Internal.CURRENCY1 = _Item.CURRENCY1;			
            m_Internal.TRX_CODE = _Item.TRX_CODE;			
            m_Internal.CASHIER_ID = _Item.CASHIER_ID;			
            m_Internal.REMARK = _Item.REMARK;			
            m_Internal.INSERT_USER = _Item.INSERT_USER;			
            m_Internal.INSERT_DATE = _Item.INSERT_DATE;			
            m_Internal.CHEQUE_NUMBER = _Item.CHEQUE_NUMBER;			
            m_Internal.ROOM_CLASS = _Item.ROOM_CLASS;			
            m_Internal.CC_CODE = _Item.CC_CODE;			
            m_Internal.CASHIER_NAME = _Item.CASHIER_NAME;			
            m_Internal.USER_NAME = _Item.USER_NAME;			
            m_Internal.DEP_NET_TAX_AMT = _Item.DEP_NET_TAX_AMT;			
            m_Internal.DEPOSIT_DEBIT = _Item.DEPOSIT_DEBIT;			
            m_Internal.CASH_ID_USER_NAME = _Item.CASH_ID_USER_NAME;			
            m_Internal.PRINT_CASHIER_DEBIT = _Item.PRINT_CASHIER_DEBIT;			
            m_Internal.PRINT_CASHIER_CREDIT = _Item.PRINT_CASHIER_CREDIT;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new OperaD140( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.OperaD140ID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                OperaD140.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<OperaD140>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public OperaD140(Expression<Func<OperaD140, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<OperaD140> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<OperaD140> _repo;
            
            if(db.TestMode)
            {
                OperaD140.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<OperaD140>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<OperaD140> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static OperaD140 SingleOrDefault(Expression<Func<OperaD140, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static OperaD140 SingleOrDefault(Expression<Func<OperaD140, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<OperaD140> repo = GetRepo(connectionString,providerName);
            OperaD140 single = repo.SingleOrDefault<OperaD140>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<OperaD140, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<OperaD140, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyOperaD140Loaded = false;
        protected static OperaD140 EmptyOperaD140Member = null;

        public static OperaD140 GetByID(Guid? value) 
        {
            OperaD140 rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static OperaD140 GetByID(Guid value) 
        {
            OperaD140 rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyOperaD140Loaded )
                    {
                        rc = EmptyOperaD140Member;
                    }
                    else
                    {
                        IsEmptyOperaD140Loaded = true;
                        rc = OperaD140.Find( L => L.OperaD140ID.Equals( value ) ).FirstOrDefault( );
                        EmptyOperaD140Member = rc;
                    }
                }
                else
                {
                    rc = OperaD140.Find( L => L.OperaD140ID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<OperaD140> Find(Expression<Func<OperaD140, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<OperaD140> Find(Expression<Func<OperaD140, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<OperaD140> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<OperaD140> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<OperaD140> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<OperaD140> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<OperaD140> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<OperaD140> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "OperaD140ID";
        }

        public object KeyValue()
        {
            return this.OperaD140ID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.IS_INTERNAL_YN )
//			{
//				rc = this.IS_INTERNAL_YN.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is OperaD140)
            {
                OperaD140 compare=(OperaD140)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.OperaD140ID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.IS_INTERNAL_YN.ToString();
        }

        public string DescriptorColumn() 
        {
            return "IS_INTERNAL_YN";
        }

        public static string GetKeyColumn()
        {
            return "OperaD140ID";
        }        

        public static string GetDescriptorColumn()
        {
            return "IS_INTERNAL_YN";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.OperaD140ID;
            }
            set
            {
                m_Internal.OperaD140ID = value;
            }
        }


//        string _IS_INTERNAL_YN;
        [LocalData]
        public string IS_INTERNAL_YN
        {
            get { return m_Internal.IS_INTERNAL_YN; }
            set
            {
                if(m_Internal.IS_INTERNAL_YN!=value){
                    m_Internal.IS_INTERNAL_YN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IS_INTERNAL_YN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _INTERNAL_DEBIT;
        [LocalData]
        public string INTERNAL_DEBIT
        {
            get { return m_Internal.INTERNAL_DEBIT; }
            set
            {
                if(m_Internal.INTERNAL_DEBIT!=value){
                    m_Internal.INTERNAL_DEBIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="INTERNAL_DEBIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _INTERNAL_CREDIT;
        [LocalData]
        public string INTERNAL_CREDIT
        {
            get { return m_Internal.INTERNAL_CREDIT; }
            set
            {
                if(m_Internal.INTERNAL_CREDIT!=value){
                    m_Internal.INTERNAL_CREDIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="INTERNAL_CREDIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _FIRST;
        [LocalData]
        public string FIRST
        {
            get { return m_Internal.FIRST; }
            set
            {
                if(m_Internal.FIRST!=value){
                    m_Internal.FIRST=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FIRST");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _FIRST_DEBIT;
        [LocalData]
        public decimal? FIRST_DEBIT
        {
            get { return m_Internal.FIRST_DEBIT; }
            set
            {
                if(m_Internal.FIRST_DEBIT!=value){
                    m_Internal.FIRST_DEBIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FIRST_DEBIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _FIRST_CREDIT;
        [LocalData]
        public decimal? FIRST_CREDIT
        {
            get { return m_Internal.FIRST_CREDIT; }
            set
            {
                if(m_Internal.FIRST_CREDIT!=value){
                    m_Internal.FIRST_CREDIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FIRST_CREDIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SECOND;
        [LocalData]
        public string SECOND
        {
            get { return m_Internal.SECOND; }
            set
            {
                if(m_Internal.SECOND!=value){
                    m_Internal.SECOND=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SECOND");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _SECOND_DEBIT;
        [LocalData]
        public decimal? SECOND_DEBIT
        {
            get { return m_Internal.SECOND_DEBIT; }
            set
            {
                if(m_Internal.SECOND_DEBIT!=value){
                    m_Internal.SECOND_DEBIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SECOND_DEBIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _SECOND_CREDIT;
        [LocalData]
        public decimal? SECOND_CREDIT
        {
            get { return m_Internal.SECOND_CREDIT; }
            set
            {
                if(m_Internal.SECOND_CREDIT!=value){
                    m_Internal.SECOND_CREDIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SECOND_CREDIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _THIRD;
        [LocalData]
        public string THIRD
        {
            get { return m_Internal.THIRD; }
            set
            {
                if(m_Internal.THIRD!=value){
                    m_Internal.THIRD=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="THIRD");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _THIRD_DEBIT;
        [LocalData]
        public decimal? THIRD_DEBIT
        {
            get { return m_Internal.THIRD_DEBIT; }
            set
            {
                if(m_Internal.THIRD_DEBIT!=value){
                    m_Internal.THIRD_DEBIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="THIRD_DEBIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _THIRD_CREDIT;
        [LocalData]
        public decimal? THIRD_CREDIT
        {
            get { return m_Internal.THIRD_CREDIT; }
            set
            {
                if(m_Internal.THIRD_CREDIT!=value){
                    m_Internal.THIRD_CREDIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="THIRD_CREDIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _EXP_DATE;
        [LocalData]
        public string EXP_DATE
        {
            get { return m_Internal.EXP_DATE; }
            set
            {
                if(m_Internal.EXP_DATE!=value){
                    m_Internal.EXP_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EXP_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RECEIPT_NO;
        [LocalData]
        public string RECEIPT_NO
        {
            get { return m_Internal.RECEIPT_NO; }
            set
            {
                if(m_Internal.RECEIPT_NO!=value){
                    m_Internal.RECEIPT_NO=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RECEIPT_NO");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _GUEST_FULL_NAME;
        [LocalData]
        public string GUEST_FULL_NAME
        {
            get { return m_Internal.GUEST_FULL_NAME; }
            set
            {
                if(m_Internal.GUEST_FULL_NAME!=value){
                    m_Internal.GUEST_FULL_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GUEST_FULL_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TARGET_RESORT;
        [LocalData]
        public string TARGET_RESORT
        {
            get { return m_Internal.TARGET_RESORT; }
            set
            {
                if(m_Internal.TARGET_RESORT!=value){
                    m_Internal.TARGET_RESORT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TARGET_RESORT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TRX_DESC;
        [LocalData]
        public string TRX_DESC
        {
            get { return m_Internal.TRX_DESC; }
            set
            {
                if(m_Internal.TRX_DESC!=value){
                    m_Internal.TRX_DESC=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TRX_DESC");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MARKET_CODE;
        [LocalData]
        public string MARKET_CODE
        {
            get { return m_Internal.MARKET_CODE; }
            set
            {
                if(m_Internal.MARKET_CODE!=value){
                    m_Internal.MARKET_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MARKET_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _BUSINESS_FORMAT_DATE;
        [LocalData]
        public DateTime? BUSINESS_FORMAT_DATE
        {
            get { return m_Internal.BUSINESS_FORMAT_DATE; }
            set
            {
                if(m_Internal.BUSINESS_FORMAT_DATE!=value){
                    m_Internal.BUSINESS_FORMAT_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BUSINESS_FORMAT_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _BUSINESS_TIME;
        [LocalData]
        public string BUSINESS_TIME
        {
            get { return m_Internal.BUSINESS_TIME; }
            set
            {
                if(m_Internal.BUSINESS_TIME!=value){
                    m_Internal.BUSINESS_TIME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BUSINESS_TIME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _BUSINESS_DATE;
        [LocalData]
        public DateTime? BUSINESS_DATE
        {
            get { return m_Internal.BUSINESS_DATE; }
            set
            {
                if(m_Internal.BUSINESS_DATE!=value){
                    m_Internal.BUSINESS_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BUSINESS_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _REFERENCE;
        [LocalData]
        public string REFERENCE
        {
            get { return m_Internal.REFERENCE; }
            set
            {
                if(m_Internal.REFERENCE!=value){
                    m_Internal.REFERENCE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REFERENCE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TRX_NO;
        [LocalData]
        public int? TRX_NO
        {
            get { return m_Internal.TRX_NO; }
            set
            {
                if(m_Internal.TRX_NO!=value){
                    m_Internal.TRX_NO=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TRX_NO");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _CASHIER_DEBIT;
        [LocalData]
        public decimal? CASHIER_DEBIT
        {
            get { return m_Internal.CASHIER_DEBIT; }
            set
            {
                if(m_Internal.CASHIER_DEBIT!=value){
                    m_Internal.CASHIER_DEBIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CASHIER_DEBIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _CASHIER_CREDIT;
        [LocalData]
        public decimal? CASHIER_CREDIT
        {
            get { return m_Internal.CASHIER_CREDIT; }
            set
            {
                if(m_Internal.CASHIER_CREDIT!=value){
                    m_Internal.CASHIER_CREDIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CASHIER_CREDIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ROOM;
        [LocalData]
        public int? ROOM
        {
            get { return m_Internal.ROOM; }
            set
            {
                if(m_Internal.ROOM!=value){
                    m_Internal.ROOM=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ROOM");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CREDIT_CARD_SUPPLEMENT;
        [LocalData]
        public string CREDIT_CARD_SUPPLEMENT
        {
            get { return m_Internal.CREDIT_CARD_SUPPLEMENT; }
            set
            {
                if(m_Internal.CREDIT_CARD_SUPPLEMENT!=value){
                    m_Internal.CREDIT_CARD_SUPPLEMENT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CREDIT_CARD_SUPPLEMENT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CURRENCY1;
        [LocalData]
        public string CURRENCY1
        {
            get { return m_Internal.CURRENCY1; }
            set
            {
                if(m_Internal.CURRENCY1!=value){
                    m_Internal.CURRENCY1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CURRENCY1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TRX_CODE;
        [LocalData]
        public int? TRX_CODE
        {
            get { return m_Internal.TRX_CODE; }
            set
            {
                if(m_Internal.TRX_CODE!=value){
                    m_Internal.TRX_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TRX_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _CASHIER_ID;
        [LocalData]
        public int? CASHIER_ID
        {
            get { return m_Internal.CASHIER_ID; }
            set
            {
                if(m_Internal.CASHIER_ID!=value){
                    m_Internal.CASHIER_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CASHIER_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _REMARK;
        [LocalData]
        public string REMARK
        {
            get { return m_Internal.REMARK; }
            set
            {
                if(m_Internal.REMARK!=value){
                    m_Internal.REMARK=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REMARK");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _INSERT_USER;
        [LocalData]
        public int? INSERT_USER
        {
            get { return m_Internal.INSERT_USER; }
            set
            {
                if(m_Internal.INSERT_USER!=value){
                    m_Internal.INSERT_USER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="INSERT_USER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _INSERT_DATE;
        [LocalData]
        public DateTime? INSERT_DATE
        {
            get { return m_Internal.INSERT_DATE; }
            set
            {
                if(m_Internal.INSERT_DATE!=value){
                    m_Internal.INSERT_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="INSERT_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CHEQUE_NUMBER;
        [LocalData]
        public string CHEQUE_NUMBER
        {
            get { return m_Internal.CHEQUE_NUMBER; }
            set
            {
                if(m_Internal.CHEQUE_NUMBER!=value){
                    m_Internal.CHEQUE_NUMBER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CHEQUE_NUMBER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ROOM_CLASS;
        [LocalData]
        public string ROOM_CLASS
        {
            get { return m_Internal.ROOM_CLASS; }
            set
            {
                if(m_Internal.ROOM_CLASS!=value){
                    m_Internal.ROOM_CLASS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ROOM_CLASS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CC_CODE;
        [LocalData]
        public string CC_CODE
        {
            get { return m_Internal.CC_CODE; }
            set
            {
                if(m_Internal.CC_CODE!=value){
                    m_Internal.CC_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CC_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CASHIER_NAME;
        [LocalData]
        public string CASHIER_NAME
        {
            get { return m_Internal.CASHIER_NAME; }
            set
            {
                if(m_Internal.CASHIER_NAME!=value){
                    m_Internal.CASHIER_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CASHIER_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _USER_NAME;
        [LocalData]
        public string USER_NAME
        {
            get { return m_Internal.USER_NAME; }
            set
            {
                if(m_Internal.USER_NAME!=value){
                    m_Internal.USER_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="USER_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _DEP_NET_TAX_AMT;
        [LocalData]
        public int? DEP_NET_TAX_AMT
        {
            get { return m_Internal.DEP_NET_TAX_AMT; }
            set
            {
                if(m_Internal.DEP_NET_TAX_AMT!=value){
                    m_Internal.DEP_NET_TAX_AMT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DEP_NET_TAX_AMT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _DEPOSIT_DEBIT;
        [LocalData]
        public int? DEPOSIT_DEBIT
        {
            get { return m_Internal.DEPOSIT_DEBIT; }
            set
            {
                if(m_Internal.DEPOSIT_DEBIT!=value){
                    m_Internal.DEPOSIT_DEBIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DEPOSIT_DEBIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CASH_ID_USER_NAME;
        [LocalData]
        public string CASH_ID_USER_NAME
        {
            get { return m_Internal.CASH_ID_USER_NAME; }
            set
            {
                if(m_Internal.CASH_ID_USER_NAME!=value){
                    m_Internal.CASH_ID_USER_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CASH_ID_USER_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _PRINT_CASHIER_DEBIT;
        [LocalData]
        public decimal? PRINT_CASHIER_DEBIT
        {
            get { return m_Internal.PRINT_CASHIER_DEBIT; }
            set
            {
                if(m_Internal.PRINT_CASHIER_DEBIT!=value){
                    m_Internal.PRINT_CASHIER_DEBIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PRINT_CASHIER_DEBIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _PRINT_CASHIER_CREDIT;
        [LocalData]
        public decimal? PRINT_CASHIER_CREDIT
        {
            get { return m_Internal.PRINT_CASHIER_CREDIT; }
            set
            {
                if(m_Internal.PRINT_CASHIER_CREDIT!=value){
                    m_Internal.PRINT_CASHIER_CREDIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PRINT_CASHIER_CREDIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _OperaD140ID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid OperaD140ID
        {
            get { return m_Internal.OperaD140ID; }
            set
            {
                if(m_Internal.OperaD140ID!=value){
                    m_Internal.OperaD140ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OperaD140ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<OperaD140, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IOperaF116 : IWCFDataElement
    {
        
        int? MASTER_VALUE_ORDER { get; set; }
        
        int? MASTER_VALUE { get; set; }
        
        string RESORT { get; set; }
        
        int? CS_HEADING_COUNT_MASTER { get; set; }
        
        string CS_FS_ARR_ROOMS_MASTER { get; set; }
        
        string CS_FS_DEP_ROOMS_MASTER { get; set; }
        
        string CS_FS_NO_ROOMS_MASTER { get; set; }
        
        string CS_FS_GUESTS_MASTER { get; set; }
        
        string CS_FS_TOTAL_REVENUE_MASTER { get; set; }
        
        string CS_FS_ROOM_REVENUE_MASTER { get; set; }
        
        string CS_FS_INVENTORY_ROOMS_MASTER { get; set; }
        
        string CF_FS_PERC_OCC_ROOMS_MASTER { get; set; }
        
        string CF_FS_AVG_ROOM_RATE_MASTER { get; set; }
        
        int? LAST_YEAR_01 { get; set; }
        
        int? SUB_GRP_1_ORDER { get; set; }
        
        string SUB_GRP_1 { get; set; }
        
        string DESCRIPTION { get; set; }
        
        string AMOUNT_FORMAT_TYPE { get; set; }
        
        string PRINT_LINE_AFTER_YN { get; set; }
        
        int? HEADING_1_ORDER { get; set; }
        
        string HEADING_1 { get; set; }
        
        int? HEADING_2 { get; set; }
        
        int? SUM_AMOUNT { get; set; }
        
        int? FORMATTED_AMOUNT { get; set; }
        
        Guid OperaF116ID { get; set; }
        
        string DataSource { get; set; }

        void Copy( IOperaF116 _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataOperaF116 : IOperaF116
    {
        [DataMember]
        public int? MASTER_VALUE_ORDER { get; set; }
        [DataMember]
        public int? MASTER_VALUE { get; set; }
        [DataMember]
        public string RESORT { get; set; }
        [DataMember]
        public int? CS_HEADING_COUNT_MASTER { get; set; }
        [DataMember]
        public string CS_FS_ARR_ROOMS_MASTER { get; set; }
        [DataMember]
        public string CS_FS_DEP_ROOMS_MASTER { get; set; }
        [DataMember]
        public string CS_FS_NO_ROOMS_MASTER { get; set; }
        [DataMember]
        public string CS_FS_GUESTS_MASTER { get; set; }
        [DataMember]
        public string CS_FS_TOTAL_REVENUE_MASTER { get; set; }
        [DataMember]
        public string CS_FS_ROOM_REVENUE_MASTER { get; set; }
        [DataMember]
        public string CS_FS_INVENTORY_ROOMS_MASTER { get; set; }
        [DataMember]
        public string CF_FS_PERC_OCC_ROOMS_MASTER { get; set; }
        [DataMember]
        public string CF_FS_AVG_ROOM_RATE_MASTER { get; set; }
        [DataMember]
        public int? LAST_YEAR_01 { get; set; }
        [DataMember]
        public int? SUB_GRP_1_ORDER { get; set; }
        [DataMember]
        public string SUB_GRP_1 { get; set; }
        [DataMember]
        public string DESCRIPTION { get; set; }
        [DataMember]
        public string AMOUNT_FORMAT_TYPE { get; set; }
        [DataMember]
        public string PRINT_LINE_AFTER_YN { get; set; }
        [DataMember]
        public int? HEADING_1_ORDER { get; set; }
        [DataMember]
        public string HEADING_1 { get; set; }
        [DataMember]
        public int? HEADING_2 { get; set; }
        [DataMember]
        public int? SUM_AMOUNT { get; set; }
        [DataMember]
        public int? FORMATTED_AMOUNT { get; set; }
        [DataMember]
        public Guid OperaF116ID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( IOperaF116 _Item )
        {
             MASTER_VALUE_ORDER = _Item.MASTER_VALUE_ORDER;			
             MASTER_VALUE = _Item.MASTER_VALUE;			
             RESORT = _Item.RESORT;			
             CS_HEADING_COUNT_MASTER = _Item.CS_HEADING_COUNT_MASTER;			
             CS_FS_ARR_ROOMS_MASTER = _Item.CS_FS_ARR_ROOMS_MASTER;			
             CS_FS_DEP_ROOMS_MASTER = _Item.CS_FS_DEP_ROOMS_MASTER;			
             CS_FS_NO_ROOMS_MASTER = _Item.CS_FS_NO_ROOMS_MASTER;			
             CS_FS_GUESTS_MASTER = _Item.CS_FS_GUESTS_MASTER;			
             CS_FS_TOTAL_REVENUE_MASTER = _Item.CS_FS_TOTAL_REVENUE_MASTER;			
             CS_FS_ROOM_REVENUE_MASTER = _Item.CS_FS_ROOM_REVENUE_MASTER;			
             CS_FS_INVENTORY_ROOMS_MASTER = _Item.CS_FS_INVENTORY_ROOMS_MASTER;			
             CF_FS_PERC_OCC_ROOMS_MASTER = _Item.CF_FS_PERC_OCC_ROOMS_MASTER;			
             CF_FS_AVG_ROOM_RATE_MASTER = _Item.CF_FS_AVG_ROOM_RATE_MASTER;			
             LAST_YEAR_01 = _Item.LAST_YEAR_01;			
             SUB_GRP_1_ORDER = _Item.SUB_GRP_1_ORDER;			
             SUB_GRP_1 = _Item.SUB_GRP_1;			
             DESCRIPTION = _Item.DESCRIPTION;			
             AMOUNT_FORMAT_TYPE = _Item.AMOUNT_FORMAT_TYPE;			
             PRINT_LINE_AFTER_YN = _Item.PRINT_LINE_AFTER_YN;			
             HEADING_1_ORDER = _Item.HEADING_1_ORDER;			
             HEADING_1 = _Item.HEADING_1;			
             HEADING_2 = _Item.HEADING_2;			
             SUM_AMOUNT = _Item.SUM_AMOUNT;			
             FORMATTED_AMOUNT = _Item.FORMATTED_AMOUNT;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new OperaF116( this );
        }
    }


    /// <summary>
    /// A class which represents the OperaF116 table in the RenAix Database.
    /// </summary>
    public partial class OperaF116 : BaseDataObject<DataOperaF116>, IActiveRecord, ICallOnCreated, IOperaF116
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<OperaF116> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<OperaF116>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<OperaF116> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(OperaF116 item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                OperaF116 item=new OperaF116();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<OperaF116> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public OperaF116()
        {
            m_Internal = new DataOperaF116();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.OperaF116ID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public OperaF116( bool _CallOnCreated )
        {
            m_Internal = new DataOperaF116();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public OperaF116(string connectionString, string providerName) 
        {
            m_Internal = new DataOperaF116();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.OperaF116ID = Guid.NewGuid( );     
        }

        public OperaF116( IOperaF116 _Item )
        {
            m_Internal = new DataOperaF116();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public OperaF116( DataOperaF116 _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IOperaF116 _Item )
        {
            m_Internal.MASTER_VALUE_ORDER = _Item.MASTER_VALUE_ORDER;			
            m_Internal.MASTER_VALUE = _Item.MASTER_VALUE;			
            m_Internal.RESORT = _Item.RESORT;			
            m_Internal.CS_HEADING_COUNT_MASTER = _Item.CS_HEADING_COUNT_MASTER;			
            m_Internal.CS_FS_ARR_ROOMS_MASTER = _Item.CS_FS_ARR_ROOMS_MASTER;			
            m_Internal.CS_FS_DEP_ROOMS_MASTER = _Item.CS_FS_DEP_ROOMS_MASTER;			
            m_Internal.CS_FS_NO_ROOMS_MASTER = _Item.CS_FS_NO_ROOMS_MASTER;			
            m_Internal.CS_FS_GUESTS_MASTER = _Item.CS_FS_GUESTS_MASTER;			
            m_Internal.CS_FS_TOTAL_REVENUE_MASTER = _Item.CS_FS_TOTAL_REVENUE_MASTER;			
            m_Internal.CS_FS_ROOM_REVENUE_MASTER = _Item.CS_FS_ROOM_REVENUE_MASTER;			
            m_Internal.CS_FS_INVENTORY_ROOMS_MASTER = _Item.CS_FS_INVENTORY_ROOMS_MASTER;			
            m_Internal.CF_FS_PERC_OCC_ROOMS_MASTER = _Item.CF_FS_PERC_OCC_ROOMS_MASTER;			
            m_Internal.CF_FS_AVG_ROOM_RATE_MASTER = _Item.CF_FS_AVG_ROOM_RATE_MASTER;			
            m_Internal.LAST_YEAR_01 = _Item.LAST_YEAR_01;			
            m_Internal.SUB_GRP_1_ORDER = _Item.SUB_GRP_1_ORDER;			
            m_Internal.SUB_GRP_1 = _Item.SUB_GRP_1;			
            m_Internal.DESCRIPTION = _Item.DESCRIPTION;			
            m_Internal.AMOUNT_FORMAT_TYPE = _Item.AMOUNT_FORMAT_TYPE;			
            m_Internal.PRINT_LINE_AFTER_YN = _Item.PRINT_LINE_AFTER_YN;			
            m_Internal.HEADING_1_ORDER = _Item.HEADING_1_ORDER;			
            m_Internal.HEADING_1 = _Item.HEADING_1;			
            m_Internal.HEADING_2 = _Item.HEADING_2;			
            m_Internal.SUM_AMOUNT = _Item.SUM_AMOUNT;			
            m_Internal.FORMATTED_AMOUNT = _Item.FORMATTED_AMOUNT;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new OperaF116( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.OperaF116ID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                OperaF116.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<OperaF116>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public OperaF116(Expression<Func<OperaF116, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<OperaF116> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<OperaF116> _repo;
            
            if(db.TestMode)
            {
                OperaF116.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<OperaF116>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<OperaF116> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static OperaF116 SingleOrDefault(Expression<Func<OperaF116, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static OperaF116 SingleOrDefault(Expression<Func<OperaF116, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<OperaF116> repo = GetRepo(connectionString,providerName);
            OperaF116 single = repo.SingleOrDefault<OperaF116>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<OperaF116, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<OperaF116, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyOperaF116Loaded = false;
        protected static OperaF116 EmptyOperaF116Member = null;

        public static OperaF116 GetByID(Guid? value) 
        {
            OperaF116 rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static OperaF116 GetByID(Guid value) 
        {
            OperaF116 rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyOperaF116Loaded )
                    {
                        rc = EmptyOperaF116Member;
                    }
                    else
                    {
                        IsEmptyOperaF116Loaded = true;
                        rc = OperaF116.Find( L => L.OperaF116ID.Equals( value ) ).FirstOrDefault( );
                        EmptyOperaF116Member = rc;
                    }
                }
                else
                {
                    rc = OperaF116.Find( L => L.OperaF116ID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<OperaF116> Find(Expression<Func<OperaF116, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<OperaF116> Find(Expression<Func<OperaF116, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<OperaF116> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<OperaF116> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<OperaF116> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<OperaF116> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<OperaF116> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<OperaF116> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "OperaF116ID";
        }

        public object KeyValue()
        {
            return this.OperaF116ID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.RESORT )
//			{
//				rc = this.RESORT.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is OperaF116)
            {
                OperaF116 compare=(OperaF116)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.OperaF116ID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.RESORT.ToString();
        }

        public string DescriptorColumn() 
        {
            return "RESORT";
        }

        public static string GetKeyColumn()
        {
            return "OperaF116ID";
        }        

        public static string GetDescriptorColumn()
        {
            return "RESORT";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.OperaF116ID;
            }
            set
            {
                m_Internal.OperaF116ID = value;
            }
        }


//        int? _MASTER_VALUE_ORDER;
        [LocalData]
        public int? MASTER_VALUE_ORDER
        {
            get { return m_Internal.MASTER_VALUE_ORDER; }
            set
            {
                if(m_Internal.MASTER_VALUE_ORDER!=value){
                    m_Internal.MASTER_VALUE_ORDER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MASTER_VALUE_ORDER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _MASTER_VALUE;
        [LocalData]
        public int? MASTER_VALUE
        {
            get { return m_Internal.MASTER_VALUE; }
            set
            {
                if(m_Internal.MASTER_VALUE!=value){
                    m_Internal.MASTER_VALUE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MASTER_VALUE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RESORT;
        [LocalData]
        public string RESORT
        {
            get { return m_Internal.RESORT; }
            set
            {
                if(m_Internal.RESORT!=value){
                    m_Internal.RESORT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RESORT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _CS_HEADING_COUNT_MASTER;
        [LocalData]
        public int? CS_HEADING_COUNT_MASTER
        {
            get { return m_Internal.CS_HEADING_COUNT_MASTER; }
            set
            {
                if(m_Internal.CS_HEADING_COUNT_MASTER!=value){
                    m_Internal.CS_HEADING_COUNT_MASTER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CS_HEADING_COUNT_MASTER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CS_FS_ARR_ROOMS_MASTER;
        [LocalData]
        public string CS_FS_ARR_ROOMS_MASTER
        {
            get { return m_Internal.CS_FS_ARR_ROOMS_MASTER; }
            set
            {
                if(m_Internal.CS_FS_ARR_ROOMS_MASTER!=value){
                    m_Internal.CS_FS_ARR_ROOMS_MASTER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CS_FS_ARR_ROOMS_MASTER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CS_FS_DEP_ROOMS_MASTER;
        [LocalData]
        public string CS_FS_DEP_ROOMS_MASTER
        {
            get { return m_Internal.CS_FS_DEP_ROOMS_MASTER; }
            set
            {
                if(m_Internal.CS_FS_DEP_ROOMS_MASTER!=value){
                    m_Internal.CS_FS_DEP_ROOMS_MASTER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CS_FS_DEP_ROOMS_MASTER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CS_FS_NO_ROOMS_MASTER;
        [LocalData]
        public string CS_FS_NO_ROOMS_MASTER
        {
            get { return m_Internal.CS_FS_NO_ROOMS_MASTER; }
            set
            {
                if(m_Internal.CS_FS_NO_ROOMS_MASTER!=value){
                    m_Internal.CS_FS_NO_ROOMS_MASTER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CS_FS_NO_ROOMS_MASTER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CS_FS_GUESTS_MASTER;
        [LocalData]
        public string CS_FS_GUESTS_MASTER
        {
            get { return m_Internal.CS_FS_GUESTS_MASTER; }
            set
            {
                if(m_Internal.CS_FS_GUESTS_MASTER!=value){
                    m_Internal.CS_FS_GUESTS_MASTER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CS_FS_GUESTS_MASTER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CS_FS_TOTAL_REVENUE_MASTER;
        [LocalData]
        public string CS_FS_TOTAL_REVENUE_MASTER
        {
            get { return m_Internal.CS_FS_TOTAL_REVENUE_MASTER; }
            set
            {
                if(m_Internal.CS_FS_TOTAL_REVENUE_MASTER!=value){
                    m_Internal.CS_FS_TOTAL_REVENUE_MASTER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CS_FS_TOTAL_REVENUE_MASTER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CS_FS_ROOM_REVENUE_MASTER;
        [LocalData]
        public string CS_FS_ROOM_REVENUE_MASTER
        {
            get { return m_Internal.CS_FS_ROOM_REVENUE_MASTER; }
            set
            {
                if(m_Internal.CS_FS_ROOM_REVENUE_MASTER!=value){
                    m_Internal.CS_FS_ROOM_REVENUE_MASTER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CS_FS_ROOM_REVENUE_MASTER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CS_FS_INVENTORY_ROOMS_MASTER;
        [LocalData]
        public string CS_FS_INVENTORY_ROOMS_MASTER
        {
            get { return m_Internal.CS_FS_INVENTORY_ROOMS_MASTER; }
            set
            {
                if(m_Internal.CS_FS_INVENTORY_ROOMS_MASTER!=value){
                    m_Internal.CS_FS_INVENTORY_ROOMS_MASTER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CS_FS_INVENTORY_ROOMS_MASTER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_FS_PERC_OCC_ROOMS_MASTER;
        [LocalData]
        public string CF_FS_PERC_OCC_ROOMS_MASTER
        {
            get { return m_Internal.CF_FS_PERC_OCC_ROOMS_MASTER; }
            set
            {
                if(m_Internal.CF_FS_PERC_OCC_ROOMS_MASTER!=value){
                    m_Internal.CF_FS_PERC_OCC_ROOMS_MASTER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_FS_PERC_OCC_ROOMS_MASTER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_FS_AVG_ROOM_RATE_MASTER;
        [LocalData]
        public string CF_FS_AVG_ROOM_RATE_MASTER
        {
            get { return m_Internal.CF_FS_AVG_ROOM_RATE_MASTER; }
            set
            {
                if(m_Internal.CF_FS_AVG_ROOM_RATE_MASTER!=value){
                    m_Internal.CF_FS_AVG_ROOM_RATE_MASTER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_FS_AVG_ROOM_RATE_MASTER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _LAST_YEAR_01;
        [LocalData]
        public int? LAST_YEAR_01
        {
            get { return m_Internal.LAST_YEAR_01; }
            set
            {
                if(m_Internal.LAST_YEAR_01!=value){
                    m_Internal.LAST_YEAR_01=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LAST_YEAR_01");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _SUB_GRP_1_ORDER;
        [LocalData]
        public int? SUB_GRP_1_ORDER
        {
            get { return m_Internal.SUB_GRP_1_ORDER; }
            set
            {
                if(m_Internal.SUB_GRP_1_ORDER!=value){
                    m_Internal.SUB_GRP_1_ORDER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SUB_GRP_1_ORDER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SUB_GRP_1;
        [LocalData]
        public string SUB_GRP_1
        {
            get { return m_Internal.SUB_GRP_1; }
            set
            {
                if(m_Internal.SUB_GRP_1!=value){
                    m_Internal.SUB_GRP_1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SUB_GRP_1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DESCRIPTION;
        [LocalData]
        public string DESCRIPTION
        {
            get { return m_Internal.DESCRIPTION; }
            set
            {
                if(m_Internal.DESCRIPTION!=value){
                    m_Internal.DESCRIPTION=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DESCRIPTION");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _AMOUNT_FORMAT_TYPE;
        [LocalData]
        public string AMOUNT_FORMAT_TYPE
        {
            get { return m_Internal.AMOUNT_FORMAT_TYPE; }
            set
            {
                if(m_Internal.AMOUNT_FORMAT_TYPE!=value){
                    m_Internal.AMOUNT_FORMAT_TYPE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AMOUNT_FORMAT_TYPE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PRINT_LINE_AFTER_YN;
        [LocalData]
        public string PRINT_LINE_AFTER_YN
        {
            get { return m_Internal.PRINT_LINE_AFTER_YN; }
            set
            {
                if(m_Internal.PRINT_LINE_AFTER_YN!=value){
                    m_Internal.PRINT_LINE_AFTER_YN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PRINT_LINE_AFTER_YN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _HEADING_1_ORDER;
        [LocalData]
        public int? HEADING_1_ORDER
        {
            get { return m_Internal.HEADING_1_ORDER; }
            set
            {
                if(m_Internal.HEADING_1_ORDER!=value){
                    m_Internal.HEADING_1_ORDER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HEADING_1_ORDER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _HEADING_1;
        [LocalData]
        public string HEADING_1
        {
            get { return m_Internal.HEADING_1; }
            set
            {
                if(m_Internal.HEADING_1!=value){
                    m_Internal.HEADING_1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HEADING_1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _HEADING_2;
        [LocalData]
        public int? HEADING_2
        {
            get { return m_Internal.HEADING_2; }
            set
            {
                if(m_Internal.HEADING_2!=value){
                    m_Internal.HEADING_2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HEADING_2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _SUM_AMOUNT;
        [LocalData]
        public int? SUM_AMOUNT
        {
            get { return m_Internal.SUM_AMOUNT; }
            set
            {
                if(m_Internal.SUM_AMOUNT!=value){
                    m_Internal.SUM_AMOUNT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SUM_AMOUNT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _FORMATTED_AMOUNT;
        [LocalData]
        public int? FORMATTED_AMOUNT
        {
            get { return m_Internal.FORMATTED_AMOUNT; }
            set
            {
                if(m_Internal.FORMATTED_AMOUNT!=value){
                    m_Internal.FORMATTED_AMOUNT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FORMATTED_AMOUNT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _OperaF116ID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid OperaF116ID
        {
            get { return m_Internal.OperaF116ID; }
            set
            {
                if(m_Internal.OperaF116ID!=value){
                    m_Internal.OperaF116ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OperaF116ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<OperaF116, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IOperaH260 : IWCFDataElement
    {
        
        string REPORT_ACTION_TYPE { get; set; }
        
        string REPORT_ACTION_DESCRIPTION { get; set; }
        
        string CONFIRMATION_NO { get; set; }
        
        int? ACTION_INSTANCE_ID { get; set; }
        
        DateTime? CHAR_INSERT_DATE { get; set; }
        
        DateTime? CHAR_INSERT_TIME { get; set; }
        
        int? ROOM { get; set; }
        
        DateTime? INSERT_DATE { get; set; }
        
        string LOG_USER { get; set; }
        
        string ACTION_DESCRIPTION { get; set; }
        
        string ACTION_TYPE { get; set; }
        
        Guid OperaH260ID { get; set; }
        
        string DataSource { get; set; }

        void Copy( IOperaH260 _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataOperaH260 : IOperaH260
    {
        [DataMember]
        public string REPORT_ACTION_TYPE { get; set; }
        [DataMember]
        public string REPORT_ACTION_DESCRIPTION { get; set; }
        [DataMember]
        public string CONFIRMATION_NO { get; set; }
        [DataMember]
        public int? ACTION_INSTANCE_ID { get; set; }
        [DataMember]
        public DateTime? CHAR_INSERT_DATE { get; set; }
        [DataMember]
        public DateTime? CHAR_INSERT_TIME { get; set; }
        [DataMember]
        public int? ROOM { get; set; }
        [DataMember]
        public DateTime? INSERT_DATE { get; set; }
        [DataMember]
        public string LOG_USER { get; set; }
        [DataMember]
        public string ACTION_DESCRIPTION { get; set; }
        [DataMember]
        public string ACTION_TYPE { get; set; }
        [DataMember]
        public Guid OperaH260ID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( IOperaH260 _Item )
        {
             REPORT_ACTION_TYPE = _Item.REPORT_ACTION_TYPE;			
             REPORT_ACTION_DESCRIPTION = _Item.REPORT_ACTION_DESCRIPTION;			
             CONFIRMATION_NO = _Item.CONFIRMATION_NO;			
             ACTION_INSTANCE_ID = _Item.ACTION_INSTANCE_ID;			
             CHAR_INSERT_DATE = _Item.CHAR_INSERT_DATE;			
             CHAR_INSERT_TIME = _Item.CHAR_INSERT_TIME;			
             ROOM = _Item.ROOM;			
             INSERT_DATE = _Item.INSERT_DATE;			
             LOG_USER = _Item.LOG_USER;			
             ACTION_DESCRIPTION = _Item.ACTION_DESCRIPTION;			
             ACTION_TYPE = _Item.ACTION_TYPE;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new OperaH260( this );
        }
    }


    /// <summary>
    /// A class which represents the OperaH260 table in the RenAix Database.
    /// </summary>
    public partial class OperaH260 : BaseDataObject<DataOperaH260>, IActiveRecord, ICallOnCreated, IOperaH260
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<OperaH260> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<OperaH260>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<OperaH260> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(OperaH260 item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                OperaH260 item=new OperaH260();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<OperaH260> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public OperaH260()
        {
            m_Internal = new DataOperaH260();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.OperaH260ID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public OperaH260( bool _CallOnCreated )
        {
            m_Internal = new DataOperaH260();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public OperaH260(string connectionString, string providerName) 
        {
            m_Internal = new DataOperaH260();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.OperaH260ID = Guid.NewGuid( );     
        }

        public OperaH260( IOperaH260 _Item )
        {
            m_Internal = new DataOperaH260();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public OperaH260( DataOperaH260 _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IOperaH260 _Item )
        {
            m_Internal.REPORT_ACTION_TYPE = _Item.REPORT_ACTION_TYPE;			
            m_Internal.REPORT_ACTION_DESCRIPTION = _Item.REPORT_ACTION_DESCRIPTION;			
            m_Internal.CONFIRMATION_NO = _Item.CONFIRMATION_NO;			
            m_Internal.ACTION_INSTANCE_ID = _Item.ACTION_INSTANCE_ID;			
            m_Internal.CHAR_INSERT_DATE = _Item.CHAR_INSERT_DATE;			
            m_Internal.CHAR_INSERT_TIME = _Item.CHAR_INSERT_TIME;			
            m_Internal.ROOM = _Item.ROOM;			
            m_Internal.INSERT_DATE = _Item.INSERT_DATE;			
            m_Internal.LOG_USER = _Item.LOG_USER;			
            m_Internal.ACTION_DESCRIPTION = _Item.ACTION_DESCRIPTION;			
            m_Internal.ACTION_TYPE = _Item.ACTION_TYPE;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new OperaH260( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.OperaH260ID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                OperaH260.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<OperaH260>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public OperaH260(Expression<Func<OperaH260, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<OperaH260> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<OperaH260> _repo;
            
            if(db.TestMode)
            {
                OperaH260.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<OperaH260>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<OperaH260> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static OperaH260 SingleOrDefault(Expression<Func<OperaH260, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static OperaH260 SingleOrDefault(Expression<Func<OperaH260, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<OperaH260> repo = GetRepo(connectionString,providerName);
            OperaH260 single = repo.SingleOrDefault<OperaH260>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<OperaH260, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<OperaH260, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyOperaH260Loaded = false;
        protected static OperaH260 EmptyOperaH260Member = null;

        public static OperaH260 GetByID(Guid? value) 
        {
            OperaH260 rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static OperaH260 GetByID(Guid value) 
        {
            OperaH260 rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyOperaH260Loaded )
                    {
                        rc = EmptyOperaH260Member;
                    }
                    else
                    {
                        IsEmptyOperaH260Loaded = true;
                        rc = OperaH260.Find( L => L.OperaH260ID.Equals( value ) ).FirstOrDefault( );
                        EmptyOperaH260Member = rc;
                    }
                }
                else
                {
                    rc = OperaH260.Find( L => L.OperaH260ID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<OperaH260> Find(Expression<Func<OperaH260, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<OperaH260> Find(Expression<Func<OperaH260, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<OperaH260> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<OperaH260> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<OperaH260> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<OperaH260> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<OperaH260> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<OperaH260> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "OperaH260ID";
        }

        public object KeyValue()
        {
            return this.OperaH260ID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.REPORT_ACTION_TYPE )
//			{
//				rc = this.REPORT_ACTION_TYPE.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is OperaH260)
            {
                OperaH260 compare=(OperaH260)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.OperaH260ID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.REPORT_ACTION_TYPE.ToString();
        }

        public string DescriptorColumn() 
        {
            return "REPORT_ACTION_TYPE";
        }

        public static string GetKeyColumn()
        {
            return "OperaH260ID";
        }        

        public static string GetDescriptorColumn()
        {
            return "REPORT_ACTION_TYPE";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.OperaH260ID;
            }
            set
            {
                m_Internal.OperaH260ID = value;
            }
        }


//        string _REPORT_ACTION_TYPE;
        [LocalData]
        public string REPORT_ACTION_TYPE
        {
            get { return m_Internal.REPORT_ACTION_TYPE; }
            set
            {
                if(m_Internal.REPORT_ACTION_TYPE!=value){
                    m_Internal.REPORT_ACTION_TYPE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REPORT_ACTION_TYPE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _REPORT_ACTION_DESCRIPTION;
        [LocalData]
        public string REPORT_ACTION_DESCRIPTION
        {
            get { return m_Internal.REPORT_ACTION_DESCRIPTION; }
            set
            {
                if(m_Internal.REPORT_ACTION_DESCRIPTION!=value){
                    m_Internal.REPORT_ACTION_DESCRIPTION=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REPORT_ACTION_DESCRIPTION");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CONFIRMATION_NO;
        [LocalData]
        public string CONFIRMATION_NO
        {
            get { return m_Internal.CONFIRMATION_NO; }
            set
            {
                if(m_Internal.CONFIRMATION_NO!=value){
                    m_Internal.CONFIRMATION_NO=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CONFIRMATION_NO");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ACTION_INSTANCE_ID;
        [LocalData]
        public int? ACTION_INSTANCE_ID
        {
            get { return m_Internal.ACTION_INSTANCE_ID; }
            set
            {
                if(m_Internal.ACTION_INSTANCE_ID!=value){
                    m_Internal.ACTION_INSTANCE_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ACTION_INSTANCE_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _CHAR_INSERT_DATE;
        [LocalData]
        public DateTime? CHAR_INSERT_DATE
        {
            get { return m_Internal.CHAR_INSERT_DATE; }
            set
            {
                if(m_Internal.CHAR_INSERT_DATE!=value){
                    m_Internal.CHAR_INSERT_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CHAR_INSERT_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _CHAR_INSERT_TIME;
        [LocalData]
        public DateTime? CHAR_INSERT_TIME
        {
            get { return m_Internal.CHAR_INSERT_TIME; }
            set
            {
                if(m_Internal.CHAR_INSERT_TIME!=value){
                    m_Internal.CHAR_INSERT_TIME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CHAR_INSERT_TIME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ROOM;
        [LocalData]
        public int? ROOM
        {
            get { return m_Internal.ROOM; }
            set
            {
                if(m_Internal.ROOM!=value){
                    m_Internal.ROOM=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ROOM");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _INSERT_DATE;
        [LocalData]
        public DateTime? INSERT_DATE
        {
            get { return m_Internal.INSERT_DATE; }
            set
            {
                if(m_Internal.INSERT_DATE!=value){
                    m_Internal.INSERT_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="INSERT_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _LOG_USER;
        [LocalData]
        public string LOG_USER
        {
            get { return m_Internal.LOG_USER; }
            set
            {
                if(m_Internal.LOG_USER!=value){
                    m_Internal.LOG_USER=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LOG_USER");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ACTION_DESCRIPTION;
        [LocalData]
        public string ACTION_DESCRIPTION
        {
            get { return m_Internal.ACTION_DESCRIPTION; }
            set
            {
                if(m_Internal.ACTION_DESCRIPTION!=value){
                    m_Internal.ACTION_DESCRIPTION=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ACTION_DESCRIPTION");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ACTION_TYPE;
        [LocalData]
        public string ACTION_TYPE
        {
            get { return m_Internal.ACTION_TYPE; }
            set
            {
                if(m_Internal.ACTION_TYPE!=value){
                    m_Internal.ACTION_TYPE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ACTION_TYPE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _OperaH260ID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid OperaH260ID
        {
            get { return m_Internal.OperaH260ID; }
            set
            {
                if(m_Internal.OperaH260ID!=value){
                    m_Internal.OperaH260ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OperaH260ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<OperaH260, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IOperaP112Departure : IWCFDataElement
    {
        
        DateTime? DEPARTURE { get; set; }
        
        string GRP_BY_COL { get; set; }
        
        string GRP_BY_DESC { get; set; }
        
        int? SEC_RMNO { get; set; }
        
        DateTime? CHAR_DEPDATE { get; set; }
        
        int? SUM_CHD { get; set; }
        
        int? SUM_ADTS { get; set; }
        
        int? SUM_NTS { get; set; }
        
        int? SUM_RMS { get; set; }
        
        decimal? SUM_BALANCE { get; set; }
        
        string RESORT1 { get; set; }
        
        string IS_SHARED_YN { get; set; }
        
        int? ROOM { get; set; }
        
        int? NIGHTS { get; set; }
        
        DateTime? ARRIVAL { get; set; }
        
        int? NO_OF_ROOMS { get; set; }
        
        decimal? BALANCE { get; set; }
        
        string RESV_STATUS { get; set; }
        
        DateTime? DEPARTURE_TIME { get; set; }
        
        string COMPUTED_RESV_STATUS { get; set; }
        
        string GUEST_NAME { get; set; }
        
        int? ADULTS { get; set; }
        
        int? CHILDREN { get; set; }
        
        string BLOCK_CODE { get; set; }
        
        string ALLOTMENT_HEADER_ID { get; set; }
        
        string ROOM_CATEGORY_LABEL { get; set; }
        
        string COMPANY_NAME { get; set; }
        
        string TRAVEL_AGENT_NAME { get; set; }
        
        string SOURCE_NAME { get; set; }
        
        string GROUP_NAME { get; set; }
        
        int? ROOM_CATEGORY { get; set; }
        
        string PAYMENT_DESC { get; set; }
        
        int? RESV_NAME_ID { get; set; }
        
        int? GUEST_NAME_ID { get; set; }
        
        string COMPUTED_RESV_STATUS_DISPLAY { get; set; }
        
        string RATE_CODE { get; set; }
        
        string SPECIAL_REQUESTS { get; set; }
        
        string VIP { get; set; }
        
        string SHARE_NAMES { get; set; }
        
        int? EXTERNAL_REFERENCE { get; set; }
        
        DateTime? CHAR_DEPART { get; set; }
        
        DateTime? CHAR_ARRIVAL { get; set; }
        
        string PROF_ATTACHED { get; set; }
        
        int? PROF_COUNT { get; set; }
        
        int? RES_COUNT { get; set; }
        
        string RESV_NAME_ID1 { get; set; }
        
        string RESORT { get; set; }
        
        string MEMBERSHIP_TYPE { get; set; }
        
        string MEMBERSHIP_CARD_NO { get; set; }
        
        string MEMBERSHIP_LEVEL { get; set; }
        
        Guid P112DeparturesID { get; set; }
        
        string DataSource { get; set; }

        void Copy( IOperaP112Departure _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataOperaP112Departure : IOperaP112Departure
    {
        [DataMember]
        public DateTime? DEPARTURE { get; set; }
        [DataMember]
        public string GRP_BY_COL { get; set; }
        [DataMember]
        public string GRP_BY_DESC { get; set; }
        [DataMember]
        public int? SEC_RMNO { get; set; }
        [DataMember]
        public DateTime? CHAR_DEPDATE { get; set; }
        [DataMember]
        public int? SUM_CHD { get; set; }
        [DataMember]
        public int? SUM_ADTS { get; set; }
        [DataMember]
        public int? SUM_NTS { get; set; }
        [DataMember]
        public int? SUM_RMS { get; set; }
        [DataMember]
        public decimal? SUM_BALANCE { get; set; }
        [DataMember]
        public string RESORT1 { get; set; }
        [DataMember]
        public string IS_SHARED_YN { get; set; }
        [DataMember]
        public int? ROOM { get; set; }
        [DataMember]
        public int? NIGHTS { get; set; }
        [DataMember]
        public DateTime? ARRIVAL { get; set; }
        [DataMember]
        public int? NO_OF_ROOMS { get; set; }
        [DataMember]
        public decimal? BALANCE { get; set; }
        [DataMember]
        public string RESV_STATUS { get; set; }
        [DataMember]
        public DateTime? DEPARTURE_TIME { get; set; }
        [DataMember]
        public string COMPUTED_RESV_STATUS { get; set; }
        [DataMember]
        public string GUEST_NAME { get; set; }
        [DataMember]
        public int? ADULTS { get; set; }
        [DataMember]
        public int? CHILDREN { get; set; }
        [DataMember]
        public string BLOCK_CODE { get; set; }
        [DataMember]
        public string ALLOTMENT_HEADER_ID { get; set; }
        [DataMember]
        public string ROOM_CATEGORY_LABEL { get; set; }
        [DataMember]
        public string COMPANY_NAME { get; set; }
        [DataMember]
        public string TRAVEL_AGENT_NAME { get; set; }
        [DataMember]
        public string SOURCE_NAME { get; set; }
        [DataMember]
        public string GROUP_NAME { get; set; }
        [DataMember]
        public int? ROOM_CATEGORY { get; set; }
        [DataMember]
        public string PAYMENT_DESC { get; set; }
        [DataMember]
        public int? RESV_NAME_ID { get; set; }
        [DataMember]
        public int? GUEST_NAME_ID { get; set; }
        [DataMember]
        public string COMPUTED_RESV_STATUS_DISPLAY { get; set; }
        [DataMember]
        public string RATE_CODE { get; set; }
        [DataMember]
        public string SPECIAL_REQUESTS { get; set; }
        [DataMember]
        public string VIP { get; set; }
        [DataMember]
        public string SHARE_NAMES { get; set; }
        [DataMember]
        public int? EXTERNAL_REFERENCE { get; set; }
        [DataMember]
        public DateTime? CHAR_DEPART { get; set; }
        [DataMember]
        public DateTime? CHAR_ARRIVAL { get; set; }
        [DataMember]
        public string PROF_ATTACHED { get; set; }
        [DataMember]
        public int? PROF_COUNT { get; set; }
        [DataMember]
        public int? RES_COUNT { get; set; }
        [DataMember]
        public string RESV_NAME_ID1 { get; set; }
        [DataMember]
        public string RESORT { get; set; }
        [DataMember]
        public string MEMBERSHIP_TYPE { get; set; }
        [DataMember]
        public string MEMBERSHIP_CARD_NO { get; set; }
        [DataMember]
        public string MEMBERSHIP_LEVEL { get; set; }
        [DataMember]
        public Guid P112DeparturesID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( IOperaP112Departure _Item )
        {
             DEPARTURE = _Item.DEPARTURE;			
             GRP_BY_COL = _Item.GRP_BY_COL;			
             GRP_BY_DESC = _Item.GRP_BY_DESC;			
             SEC_RMNO = _Item.SEC_RMNO;			
             CHAR_DEPDATE = _Item.CHAR_DEPDATE;			
             SUM_CHD = _Item.SUM_CHD;			
             SUM_ADTS = _Item.SUM_ADTS;			
             SUM_NTS = _Item.SUM_NTS;			
             SUM_RMS = _Item.SUM_RMS;			
             SUM_BALANCE = _Item.SUM_BALANCE;			
             RESORT1 = _Item.RESORT1;			
             IS_SHARED_YN = _Item.IS_SHARED_YN;			
             ROOM = _Item.ROOM;			
             NIGHTS = _Item.NIGHTS;			
             ARRIVAL = _Item.ARRIVAL;			
             NO_OF_ROOMS = _Item.NO_OF_ROOMS;			
             BALANCE = _Item.BALANCE;			
             RESV_STATUS = _Item.RESV_STATUS;			
             DEPARTURE_TIME = _Item.DEPARTURE_TIME;			
             COMPUTED_RESV_STATUS = _Item.COMPUTED_RESV_STATUS;			
             GUEST_NAME = _Item.GUEST_NAME;			
             ADULTS = _Item.ADULTS;			
             CHILDREN = _Item.CHILDREN;			
             BLOCK_CODE = _Item.BLOCK_CODE;			
             ALLOTMENT_HEADER_ID = _Item.ALLOTMENT_HEADER_ID;			
             ROOM_CATEGORY_LABEL = _Item.ROOM_CATEGORY_LABEL;			
             COMPANY_NAME = _Item.COMPANY_NAME;			
             TRAVEL_AGENT_NAME = _Item.TRAVEL_AGENT_NAME;			
             SOURCE_NAME = _Item.SOURCE_NAME;			
             GROUP_NAME = _Item.GROUP_NAME;			
             ROOM_CATEGORY = _Item.ROOM_CATEGORY;			
             PAYMENT_DESC = _Item.PAYMENT_DESC;			
             RESV_NAME_ID = _Item.RESV_NAME_ID;			
             GUEST_NAME_ID = _Item.GUEST_NAME_ID;			
             COMPUTED_RESV_STATUS_DISPLAY = _Item.COMPUTED_RESV_STATUS_DISPLAY;			
             RATE_CODE = _Item.RATE_CODE;			
             SPECIAL_REQUESTS = _Item.SPECIAL_REQUESTS;			
             VIP = _Item.VIP;			
             SHARE_NAMES = _Item.SHARE_NAMES;			
             EXTERNAL_REFERENCE = _Item.EXTERNAL_REFERENCE;			
             CHAR_DEPART = _Item.CHAR_DEPART;			
             CHAR_ARRIVAL = _Item.CHAR_ARRIVAL;			
             PROF_ATTACHED = _Item.PROF_ATTACHED;			
             PROF_COUNT = _Item.PROF_COUNT;			
             RES_COUNT = _Item.RES_COUNT;			
             RESV_NAME_ID1 = _Item.RESV_NAME_ID1;			
             RESORT = _Item.RESORT;			
             MEMBERSHIP_TYPE = _Item.MEMBERSHIP_TYPE;			
             MEMBERSHIP_CARD_NO = _Item.MEMBERSHIP_CARD_NO;			
             MEMBERSHIP_LEVEL = _Item.MEMBERSHIP_LEVEL;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new OperaP112Departure( this );
        }
    }


    /// <summary>
    /// A class which represents the OperaP112Departures table in the RenAix Database.
    /// </summary>
    public partial class OperaP112Departure : BaseDataObject<DataOperaP112Departure>, IActiveRecord, ICallOnCreated, IOperaP112Departure
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<OperaP112Departure> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<OperaP112Departure>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<OperaP112Departure> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(OperaP112Departure item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                OperaP112Departure item=new OperaP112Departure();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<OperaP112Departure> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public OperaP112Departure()
        {
            m_Internal = new DataOperaP112Departure();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.P112DeparturesID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public OperaP112Departure( bool _CallOnCreated )
        {
            m_Internal = new DataOperaP112Departure();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public OperaP112Departure(string connectionString, string providerName) 
        {
            m_Internal = new DataOperaP112Departure();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.P112DeparturesID = Guid.NewGuid( );     
        }

        public OperaP112Departure( IOperaP112Departure _Item )
        {
            m_Internal = new DataOperaP112Departure();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public OperaP112Departure( DataOperaP112Departure _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IOperaP112Departure _Item )
        {
            m_Internal.DEPARTURE = _Item.DEPARTURE;			
            m_Internal.GRP_BY_COL = _Item.GRP_BY_COL;			
            m_Internal.GRP_BY_DESC = _Item.GRP_BY_DESC;			
            m_Internal.SEC_RMNO = _Item.SEC_RMNO;			
            m_Internal.CHAR_DEPDATE = _Item.CHAR_DEPDATE;			
            m_Internal.SUM_CHD = _Item.SUM_CHD;			
            m_Internal.SUM_ADTS = _Item.SUM_ADTS;			
            m_Internal.SUM_NTS = _Item.SUM_NTS;			
            m_Internal.SUM_RMS = _Item.SUM_RMS;			
            m_Internal.SUM_BALANCE = _Item.SUM_BALANCE;			
            m_Internal.RESORT1 = _Item.RESORT1;			
            m_Internal.IS_SHARED_YN = _Item.IS_SHARED_YN;			
            m_Internal.ROOM = _Item.ROOM;			
            m_Internal.NIGHTS = _Item.NIGHTS;			
            m_Internal.ARRIVAL = _Item.ARRIVAL;			
            m_Internal.NO_OF_ROOMS = _Item.NO_OF_ROOMS;			
            m_Internal.BALANCE = _Item.BALANCE;			
            m_Internal.RESV_STATUS = _Item.RESV_STATUS;			
            m_Internal.DEPARTURE_TIME = _Item.DEPARTURE_TIME;			
            m_Internal.COMPUTED_RESV_STATUS = _Item.COMPUTED_RESV_STATUS;			
            m_Internal.GUEST_NAME = _Item.GUEST_NAME;			
            m_Internal.ADULTS = _Item.ADULTS;			
            m_Internal.CHILDREN = _Item.CHILDREN;			
            m_Internal.BLOCK_CODE = _Item.BLOCK_CODE;			
            m_Internal.ALLOTMENT_HEADER_ID = _Item.ALLOTMENT_HEADER_ID;			
            m_Internal.ROOM_CATEGORY_LABEL = _Item.ROOM_CATEGORY_LABEL;			
            m_Internal.COMPANY_NAME = _Item.COMPANY_NAME;			
            m_Internal.TRAVEL_AGENT_NAME = _Item.TRAVEL_AGENT_NAME;			
            m_Internal.SOURCE_NAME = _Item.SOURCE_NAME;			
            m_Internal.GROUP_NAME = _Item.GROUP_NAME;			
            m_Internal.ROOM_CATEGORY = _Item.ROOM_CATEGORY;			
            m_Internal.PAYMENT_DESC = _Item.PAYMENT_DESC;			
            m_Internal.RESV_NAME_ID = _Item.RESV_NAME_ID;			
            m_Internal.GUEST_NAME_ID = _Item.GUEST_NAME_ID;			
            m_Internal.COMPUTED_RESV_STATUS_DISPLAY = _Item.COMPUTED_RESV_STATUS_DISPLAY;			
            m_Internal.RATE_CODE = _Item.RATE_CODE;			
            m_Internal.SPECIAL_REQUESTS = _Item.SPECIAL_REQUESTS;			
            m_Internal.VIP = _Item.VIP;			
            m_Internal.SHARE_NAMES = _Item.SHARE_NAMES;			
            m_Internal.EXTERNAL_REFERENCE = _Item.EXTERNAL_REFERENCE;			
            m_Internal.CHAR_DEPART = _Item.CHAR_DEPART;			
            m_Internal.CHAR_ARRIVAL = _Item.CHAR_ARRIVAL;			
            m_Internal.PROF_ATTACHED = _Item.PROF_ATTACHED;			
            m_Internal.PROF_COUNT = _Item.PROF_COUNT;			
            m_Internal.RES_COUNT = _Item.RES_COUNT;			
            m_Internal.RESV_NAME_ID1 = _Item.RESV_NAME_ID1;			
            m_Internal.RESORT = _Item.RESORT;			
            m_Internal.MEMBERSHIP_TYPE = _Item.MEMBERSHIP_TYPE;			
            m_Internal.MEMBERSHIP_CARD_NO = _Item.MEMBERSHIP_CARD_NO;			
            m_Internal.MEMBERSHIP_LEVEL = _Item.MEMBERSHIP_LEVEL;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new OperaP112Departure( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.P112DeparturesID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                OperaP112Departure.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<OperaP112Departure>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public OperaP112Departure(Expression<Func<OperaP112Departure, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<OperaP112Departure> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<OperaP112Departure> _repo;
            
            if(db.TestMode)
            {
                OperaP112Departure.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<OperaP112Departure>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<OperaP112Departure> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static OperaP112Departure SingleOrDefault(Expression<Func<OperaP112Departure, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static OperaP112Departure SingleOrDefault(Expression<Func<OperaP112Departure, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<OperaP112Departure> repo = GetRepo(connectionString,providerName);
            OperaP112Departure single = repo.SingleOrDefault<OperaP112Departure>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<OperaP112Departure, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<OperaP112Departure, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyOperaP112DepartureLoaded = false;
        protected static OperaP112Departure EmptyOperaP112DepartureMember = null;

        public static OperaP112Departure GetByID(Guid? value) 
        {
            OperaP112Departure rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static OperaP112Departure GetByID(Guid value) 
        {
            OperaP112Departure rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyOperaP112DepartureLoaded )
                    {
                        rc = EmptyOperaP112DepartureMember;
                    }
                    else
                    {
                        IsEmptyOperaP112DepartureLoaded = true;
                        rc = OperaP112Departure.Find( L => L.P112DeparturesID.Equals( value ) ).FirstOrDefault( );
                        EmptyOperaP112DepartureMember = rc;
                    }
                }
                else
                {
                    rc = OperaP112Departure.Find( L => L.P112DeparturesID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<OperaP112Departure> Find(Expression<Func<OperaP112Departure, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<OperaP112Departure> Find(Expression<Func<OperaP112Departure, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<OperaP112Departure> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<OperaP112Departure> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<OperaP112Departure> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<OperaP112Departure> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<OperaP112Departure> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<OperaP112Departure> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "P112DeparturesID";
        }

        public object KeyValue()
        {
            return this.P112DeparturesID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.GRP_BY_COL )
//			{
//				rc = this.GRP_BY_COL.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is OperaP112Departure)
            {
                OperaP112Departure compare=(OperaP112Departure)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.P112DeparturesID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.GRP_BY_COL.ToString();
        }

        public string DescriptorColumn() 
        {
            return "GRP_BY_COL";
        }

        public static string GetKeyColumn()
        {
            return "P112DeparturesID";
        }        

        public static string GetDescriptorColumn()
        {
            return "GRP_BY_COL";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.P112DeparturesID;
            }
            set
            {
                m_Internal.P112DeparturesID = value;
            }
        }


//        DateTime? _DEPARTURE;
        [LocalData]
        public DateTime? DEPARTURE
        {
            get { return m_Internal.DEPARTURE; }
            set
            {
                if(m_Internal.DEPARTURE!=value){
                    m_Internal.DEPARTURE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DEPARTURE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _GRP_BY_COL;
        [LocalData]
        public string GRP_BY_COL
        {
            get { return m_Internal.GRP_BY_COL; }
            set
            {
                if(m_Internal.GRP_BY_COL!=value){
                    m_Internal.GRP_BY_COL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GRP_BY_COL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _GRP_BY_DESC;
        [LocalData]
        public string GRP_BY_DESC
        {
            get { return m_Internal.GRP_BY_DESC; }
            set
            {
                if(m_Internal.GRP_BY_DESC!=value){
                    m_Internal.GRP_BY_DESC=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GRP_BY_DESC");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _SEC_RMNO;
        [LocalData]
        public int? SEC_RMNO
        {
            get { return m_Internal.SEC_RMNO; }
            set
            {
                if(m_Internal.SEC_RMNO!=value){
                    m_Internal.SEC_RMNO=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SEC_RMNO");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _CHAR_DEPDATE;
        [LocalData]
        public DateTime? CHAR_DEPDATE
        {
            get { return m_Internal.CHAR_DEPDATE; }
            set
            {
                if(m_Internal.CHAR_DEPDATE!=value){
                    m_Internal.CHAR_DEPDATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CHAR_DEPDATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _SUM_CHD;
        [LocalData]
        public int? SUM_CHD
        {
            get { return m_Internal.SUM_CHD; }
            set
            {
                if(m_Internal.SUM_CHD!=value){
                    m_Internal.SUM_CHD=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SUM_CHD");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _SUM_ADTS;
        [LocalData]
        public int? SUM_ADTS
        {
            get { return m_Internal.SUM_ADTS; }
            set
            {
                if(m_Internal.SUM_ADTS!=value){
                    m_Internal.SUM_ADTS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SUM_ADTS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _SUM_NTS;
        [LocalData]
        public int? SUM_NTS
        {
            get { return m_Internal.SUM_NTS; }
            set
            {
                if(m_Internal.SUM_NTS!=value){
                    m_Internal.SUM_NTS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SUM_NTS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _SUM_RMS;
        [LocalData]
        public int? SUM_RMS
        {
            get { return m_Internal.SUM_RMS; }
            set
            {
                if(m_Internal.SUM_RMS!=value){
                    m_Internal.SUM_RMS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SUM_RMS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _SUM_BALANCE;
        [LocalData]
        public decimal? SUM_BALANCE
        {
            get { return m_Internal.SUM_BALANCE; }
            set
            {
                if(m_Internal.SUM_BALANCE!=value){
                    m_Internal.SUM_BALANCE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SUM_BALANCE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RESORT1;
        [LocalData]
        public string RESORT1
        {
            get { return m_Internal.RESORT1; }
            set
            {
                if(m_Internal.RESORT1!=value){
                    m_Internal.RESORT1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RESORT1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _IS_SHARED_YN;
        [LocalData]
        public string IS_SHARED_YN
        {
            get { return m_Internal.IS_SHARED_YN; }
            set
            {
                if(m_Internal.IS_SHARED_YN!=value){
                    m_Internal.IS_SHARED_YN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IS_SHARED_YN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ROOM;
        [LocalData]
        public int? ROOM
        {
            get { return m_Internal.ROOM; }
            set
            {
                if(m_Internal.ROOM!=value){
                    m_Internal.ROOM=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ROOM");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _NIGHTS;
        [LocalData]
        public int? NIGHTS
        {
            get { return m_Internal.NIGHTS; }
            set
            {
                if(m_Internal.NIGHTS!=value){
                    m_Internal.NIGHTS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NIGHTS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _ARRIVAL;
        [LocalData]
        public DateTime? ARRIVAL
        {
            get { return m_Internal.ARRIVAL; }
            set
            {
                if(m_Internal.ARRIVAL!=value){
                    m_Internal.ARRIVAL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ARRIVAL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _NO_OF_ROOMS;
        [LocalData]
        public int? NO_OF_ROOMS
        {
            get { return m_Internal.NO_OF_ROOMS; }
            set
            {
                if(m_Internal.NO_OF_ROOMS!=value){
                    m_Internal.NO_OF_ROOMS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NO_OF_ROOMS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _BALANCE;
        [LocalData]
        public decimal? BALANCE
        {
            get { return m_Internal.BALANCE; }
            set
            {
                if(m_Internal.BALANCE!=value){
                    m_Internal.BALANCE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BALANCE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RESV_STATUS;
        [LocalData]
        public string RESV_STATUS
        {
            get { return m_Internal.RESV_STATUS; }
            set
            {
                if(m_Internal.RESV_STATUS!=value){
                    m_Internal.RESV_STATUS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RESV_STATUS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _DEPARTURE_TIME;
        [LocalData]
        public DateTime? DEPARTURE_TIME
        {
            get { return m_Internal.DEPARTURE_TIME; }
            set
            {
                if(m_Internal.DEPARTURE_TIME!=value){
                    m_Internal.DEPARTURE_TIME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DEPARTURE_TIME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _COMPUTED_RESV_STATUS;
        [LocalData]
        public string COMPUTED_RESV_STATUS
        {
            get { return m_Internal.COMPUTED_RESV_STATUS; }
            set
            {
                if(m_Internal.COMPUTED_RESV_STATUS!=value){
                    m_Internal.COMPUTED_RESV_STATUS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="COMPUTED_RESV_STATUS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _GUEST_NAME;
        [LocalData]
        public string GUEST_NAME
        {
            get { return m_Internal.GUEST_NAME; }
            set
            {
                if(m_Internal.GUEST_NAME!=value){
                    m_Internal.GUEST_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GUEST_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ADULTS;
        [LocalData]
        public int? ADULTS
        {
            get { return m_Internal.ADULTS; }
            set
            {
                if(m_Internal.ADULTS!=value){
                    m_Internal.ADULTS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ADULTS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _CHILDREN;
        [LocalData]
        public int? CHILDREN
        {
            get { return m_Internal.CHILDREN; }
            set
            {
                if(m_Internal.CHILDREN!=value){
                    m_Internal.CHILDREN=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CHILDREN");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _BLOCK_CODE;
        [LocalData]
        public string BLOCK_CODE
        {
            get { return m_Internal.BLOCK_CODE; }
            set
            {
                if(m_Internal.BLOCK_CODE!=value){
                    m_Internal.BLOCK_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BLOCK_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ALLOTMENT_HEADER_ID;
        [LocalData]
        public string ALLOTMENT_HEADER_ID
        {
            get { return m_Internal.ALLOTMENT_HEADER_ID; }
            set
            {
                if(m_Internal.ALLOTMENT_HEADER_ID!=value){
                    m_Internal.ALLOTMENT_HEADER_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ALLOTMENT_HEADER_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ROOM_CATEGORY_LABEL;
        [LocalData]
        public string ROOM_CATEGORY_LABEL
        {
            get { return m_Internal.ROOM_CATEGORY_LABEL; }
            set
            {
                if(m_Internal.ROOM_CATEGORY_LABEL!=value){
                    m_Internal.ROOM_CATEGORY_LABEL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ROOM_CATEGORY_LABEL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _COMPANY_NAME;
        [LocalData]
        public string COMPANY_NAME
        {
            get { return m_Internal.COMPANY_NAME; }
            set
            {
                if(m_Internal.COMPANY_NAME!=value){
                    m_Internal.COMPANY_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="COMPANY_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TRAVEL_AGENT_NAME;
        [LocalData]
        public string TRAVEL_AGENT_NAME
        {
            get { return m_Internal.TRAVEL_AGENT_NAME; }
            set
            {
                if(m_Internal.TRAVEL_AGENT_NAME!=value){
                    m_Internal.TRAVEL_AGENT_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TRAVEL_AGENT_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SOURCE_NAME;
        [LocalData]
        public string SOURCE_NAME
        {
            get { return m_Internal.SOURCE_NAME; }
            set
            {
                if(m_Internal.SOURCE_NAME!=value){
                    m_Internal.SOURCE_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SOURCE_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _GROUP_NAME;
        [LocalData]
        public string GROUP_NAME
        {
            get { return m_Internal.GROUP_NAME; }
            set
            {
                if(m_Internal.GROUP_NAME!=value){
                    m_Internal.GROUP_NAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GROUP_NAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ROOM_CATEGORY;
        [LocalData]
        public int? ROOM_CATEGORY
        {
            get { return m_Internal.ROOM_CATEGORY; }
            set
            {
                if(m_Internal.ROOM_CATEGORY!=value){
                    m_Internal.ROOM_CATEGORY=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ROOM_CATEGORY");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PAYMENT_DESC;
        [LocalData]
        public string PAYMENT_DESC
        {
            get { return m_Internal.PAYMENT_DESC; }
            set
            {
                if(m_Internal.PAYMENT_DESC!=value){
                    m_Internal.PAYMENT_DESC=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PAYMENT_DESC");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _RESV_NAME_ID;
        [LocalData]
        public int? RESV_NAME_ID
        {
            get { return m_Internal.RESV_NAME_ID; }
            set
            {
                if(m_Internal.RESV_NAME_ID!=value){
                    m_Internal.RESV_NAME_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RESV_NAME_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _GUEST_NAME_ID;
        [LocalData]
        public int? GUEST_NAME_ID
        {
            get { return m_Internal.GUEST_NAME_ID; }
            set
            {
                if(m_Internal.GUEST_NAME_ID!=value){
                    m_Internal.GUEST_NAME_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GUEST_NAME_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _COMPUTED_RESV_STATUS_DISPLAY;
        [LocalData]
        public string COMPUTED_RESV_STATUS_DISPLAY
        {
            get { return m_Internal.COMPUTED_RESV_STATUS_DISPLAY; }
            set
            {
                if(m_Internal.COMPUTED_RESV_STATUS_DISPLAY!=value){
                    m_Internal.COMPUTED_RESV_STATUS_DISPLAY=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="COMPUTED_RESV_STATUS_DISPLAY");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RATE_CODE;
        [LocalData]
        public string RATE_CODE
        {
            get { return m_Internal.RATE_CODE; }
            set
            {
                if(m_Internal.RATE_CODE!=value){
                    m_Internal.RATE_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RATE_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SPECIAL_REQUESTS;
        [LocalData]
        public string SPECIAL_REQUESTS
        {
            get { return m_Internal.SPECIAL_REQUESTS; }
            set
            {
                if(m_Internal.SPECIAL_REQUESTS!=value){
                    m_Internal.SPECIAL_REQUESTS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SPECIAL_REQUESTS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _VIP;
        [LocalData]
        public string VIP
        {
            get { return m_Internal.VIP; }
            set
            {
                if(m_Internal.VIP!=value){
                    m_Internal.VIP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VIP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SHARE_NAMES;
        [LocalData]
        public string SHARE_NAMES
        {
            get { return m_Internal.SHARE_NAMES; }
            set
            {
                if(m_Internal.SHARE_NAMES!=value){
                    m_Internal.SHARE_NAMES=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SHARE_NAMES");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EXTERNAL_REFERENCE;
        [LocalData]
        public int? EXTERNAL_REFERENCE
        {
            get { return m_Internal.EXTERNAL_REFERENCE; }
            set
            {
                if(m_Internal.EXTERNAL_REFERENCE!=value){
                    m_Internal.EXTERNAL_REFERENCE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EXTERNAL_REFERENCE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _CHAR_DEPART;
        [LocalData]
        public DateTime? CHAR_DEPART
        {
            get { return m_Internal.CHAR_DEPART; }
            set
            {
                if(m_Internal.CHAR_DEPART!=value){
                    m_Internal.CHAR_DEPART=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CHAR_DEPART");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _CHAR_ARRIVAL;
        [LocalData]
        public DateTime? CHAR_ARRIVAL
        {
            get { return m_Internal.CHAR_ARRIVAL; }
            set
            {
                if(m_Internal.CHAR_ARRIVAL!=value){
                    m_Internal.CHAR_ARRIVAL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CHAR_ARRIVAL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PROF_ATTACHED;
        [LocalData]
        public string PROF_ATTACHED
        {
            get { return m_Internal.PROF_ATTACHED; }
            set
            {
                if(m_Internal.PROF_ATTACHED!=value){
                    m_Internal.PROF_ATTACHED=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PROF_ATTACHED");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _PROF_COUNT;
        [LocalData]
        public int? PROF_COUNT
        {
            get { return m_Internal.PROF_COUNT; }
            set
            {
                if(m_Internal.PROF_COUNT!=value){
                    m_Internal.PROF_COUNT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PROF_COUNT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _RES_COUNT;
        [LocalData]
        public int? RES_COUNT
        {
            get { return m_Internal.RES_COUNT; }
            set
            {
                if(m_Internal.RES_COUNT!=value){
                    m_Internal.RES_COUNT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RES_COUNT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RESV_NAME_ID1;
        [LocalData]
        public string RESV_NAME_ID1
        {
            get { return m_Internal.RESV_NAME_ID1; }
            set
            {
                if(m_Internal.RESV_NAME_ID1!=value){
                    m_Internal.RESV_NAME_ID1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RESV_NAME_ID1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RESORT;
        [LocalData]
        public string RESORT
        {
            get { return m_Internal.RESORT; }
            set
            {
                if(m_Internal.RESORT!=value){
                    m_Internal.RESORT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RESORT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MEMBERSHIP_TYPE;
        [LocalData]
        public string MEMBERSHIP_TYPE
        {
            get { return m_Internal.MEMBERSHIP_TYPE; }
            set
            {
                if(m_Internal.MEMBERSHIP_TYPE!=value){
                    m_Internal.MEMBERSHIP_TYPE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MEMBERSHIP_TYPE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MEMBERSHIP_CARD_NO;
        [LocalData]
        public string MEMBERSHIP_CARD_NO
        {
            get { return m_Internal.MEMBERSHIP_CARD_NO; }
            set
            {
                if(m_Internal.MEMBERSHIP_CARD_NO!=value){
                    m_Internal.MEMBERSHIP_CARD_NO=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MEMBERSHIP_CARD_NO");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MEMBERSHIP_LEVEL;
        [LocalData]
        public string MEMBERSHIP_LEVEL
        {
            get { return m_Internal.MEMBERSHIP_LEVEL; }
            set
            {
                if(m_Internal.MEMBERSHIP_LEVEL!=value){
                    m_Internal.MEMBERSHIP_LEVEL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MEMBERSHIP_LEVEL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _P112DeparturesID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid P112DeparturesID
        {
            get { return m_Internal.P112DeparturesID; }
            set
            {
                if(m_Internal.P112DeparturesID!=value){
                    m_Internal.P112DeparturesID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="P112DeparturesID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<OperaP112Departure, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IPOSTicketDatum : IWCFDataElement
    {
        
        string CheckNumber { get; set; }
        
        long CheckSequence { get; set; }
        
        DateTime TicketDate { get; set; }
        
        string TransactionID { get; set; }
        
        int DetailSequence { get; set; }
        
        string ItemDescription { get; set; }
        
        string ItemDescriptionCont { get; set; }
        
        int? SeatNumber { get; set; }
        
        int? GuestCount { get; set; }
        
        decimal TicketTotal { get; set; }
        
        decimal Tax { get; set; }
        
        decimal SubTotal { get; set; }
        
        decimal AmountDue { get; set; }
        
        string ServerNumber { get; set; }
        
        string ServerFirstName { get; set; }
        
        string ServerLastName { get; set; }
        
        string ServerCheckName { get; set; }
        
        string Department { get; set; }
        
        string Category { get; set; }
        
        Guid POSTicketDataID { get; set; }
        
        string DataSource { get; set; }

        void Copy( IPOSTicketDatum _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataPOSTicketDatum : IPOSTicketDatum
    {
        [DataMember]
        public string CheckNumber { get; set; }
        [DataMember]
        public long CheckSequence { get; set; }
        [DataMember]
        public DateTime TicketDate { get; set; }
        [DataMember]
        public string TransactionID { get; set; }
        [DataMember]
        public int DetailSequence { get; set; }
        [DataMember]
        public string ItemDescription { get; set; }
        [DataMember]
        public string ItemDescriptionCont { get; set; }
        [DataMember]
        public int? SeatNumber { get; set; }
        [DataMember]
        public int? GuestCount { get; set; }
        [DataMember]
        public decimal TicketTotal { get; set; }
        [DataMember]
        public decimal Tax { get; set; }
        [DataMember]
        public decimal SubTotal { get; set; }
        [DataMember]
        public decimal AmountDue { get; set; }
        [DataMember]
        public string ServerNumber { get; set; }
        [DataMember]
        public string ServerFirstName { get; set; }
        [DataMember]
        public string ServerLastName { get; set; }
        [DataMember]
        public string ServerCheckName { get; set; }
        [DataMember]
        public string Department { get; set; }
        [DataMember]
        public string Category { get; set; }
        [DataMember]
        public Guid POSTicketDataID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( IPOSTicketDatum _Item )
        {
             CheckNumber = _Item.CheckNumber;			
             CheckSequence = _Item.CheckSequence;			
             TicketDate = _Item.TicketDate;			
             TransactionID = _Item.TransactionID;			
             DetailSequence = _Item.DetailSequence;			
             ItemDescription = _Item.ItemDescription;			
             ItemDescriptionCont = _Item.ItemDescriptionCont;			
             SeatNumber = _Item.SeatNumber;			
             GuestCount = _Item.GuestCount;			
             TicketTotal = _Item.TicketTotal;			
             Tax = _Item.Tax;			
             SubTotal = _Item.SubTotal;			
             AmountDue = _Item.AmountDue;			
             ServerNumber = _Item.ServerNumber;			
             ServerFirstName = _Item.ServerFirstName;			
             ServerLastName = _Item.ServerLastName;			
             ServerCheckName = _Item.ServerCheckName;			
             Department = _Item.Department;			
             Category = _Item.Category;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new POSTicketDatum( this );
        }
    }


    /// <summary>
    /// A class which represents the POSTicketData table in the RenAix Database.
    /// </summary>
    public partial class POSTicketDatum : BaseDataObject<DataPOSTicketDatum>, IActiveRecord, ICallOnCreated, IPOSTicketDatum
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<POSTicketDatum> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<POSTicketDatum>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<POSTicketDatum> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(POSTicketDatum item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                POSTicketDatum item=new POSTicketDatum();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<POSTicketDatum> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public POSTicketDatum()
        {
            m_Internal = new DataPOSTicketDatum();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.POSTicketDataID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public POSTicketDatum( bool _CallOnCreated )
        {
            m_Internal = new DataPOSTicketDatum();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public POSTicketDatum(string connectionString, string providerName) 
        {
            m_Internal = new DataPOSTicketDatum();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.POSTicketDataID = Guid.NewGuid( );     
        }

        public POSTicketDatum( IPOSTicketDatum _Item )
        {
            m_Internal = new DataPOSTicketDatum();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public POSTicketDatum( DataPOSTicketDatum _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IPOSTicketDatum _Item )
        {
            m_Internal.CheckNumber = _Item.CheckNumber;			
            m_Internal.CheckSequence = _Item.CheckSequence;			
            m_Internal.TicketDate = _Item.TicketDate;			
            m_Internal.TransactionID = _Item.TransactionID;			
            m_Internal.DetailSequence = _Item.DetailSequence;			
            m_Internal.ItemDescription = _Item.ItemDescription;			
            m_Internal.ItemDescriptionCont = _Item.ItemDescriptionCont;			
            m_Internal.SeatNumber = _Item.SeatNumber;			
            m_Internal.GuestCount = _Item.GuestCount;			
            m_Internal.TicketTotal = _Item.TicketTotal;			
            m_Internal.Tax = _Item.Tax;			
            m_Internal.SubTotal = _Item.SubTotal;			
            m_Internal.AmountDue = _Item.AmountDue;			
            m_Internal.ServerNumber = _Item.ServerNumber;			
            m_Internal.ServerFirstName = _Item.ServerFirstName;			
            m_Internal.ServerLastName = _Item.ServerLastName;			
            m_Internal.ServerCheckName = _Item.ServerCheckName;			
            m_Internal.Department = _Item.Department;			
            m_Internal.Category = _Item.Category;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new POSTicketDatum( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.POSTicketDataID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                POSTicketDatum.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSTicketDatum>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public POSTicketDatum(Expression<Func<POSTicketDatum, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<POSTicketDatum> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<POSTicketDatum> _repo;
            
            if(db.TestMode)
            {
                POSTicketDatum.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSTicketDatum>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<POSTicketDatum> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static POSTicketDatum SingleOrDefault(Expression<Func<POSTicketDatum, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static POSTicketDatum SingleOrDefault(Expression<Func<POSTicketDatum, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<POSTicketDatum> repo = GetRepo(connectionString,providerName);
            POSTicketDatum single = repo.SingleOrDefault<POSTicketDatum>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<POSTicketDatum, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<POSTicketDatum, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyPOSTicketDatumLoaded = false;
        protected static POSTicketDatum EmptyPOSTicketDatumMember = null;

        public static POSTicketDatum GetByID(Guid? value) 
        {
            POSTicketDatum rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static POSTicketDatum GetByID(Guid value) 
        {
            POSTicketDatum rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyPOSTicketDatumLoaded )
                    {
                        rc = EmptyPOSTicketDatumMember;
                    }
                    else
                    {
                        IsEmptyPOSTicketDatumLoaded = true;
                        rc = POSTicketDatum.Find( L => L.POSTicketDataID.Equals( value ) ).FirstOrDefault( );
                        EmptyPOSTicketDatumMember = rc;
                    }
                }
                else
                {
                    rc = POSTicketDatum.Find( L => L.POSTicketDataID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<POSTicketDatum> Find(Expression<Func<POSTicketDatum, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<POSTicketDatum> Find(Expression<Func<POSTicketDatum, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<POSTicketDatum> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<POSTicketDatum> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<POSTicketDatum> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<POSTicketDatum> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<POSTicketDatum> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<POSTicketDatum> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "POSTicketDataID";
        }

        public object KeyValue()
        {
            return this.POSTicketDataID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.CheckNumber )
//			{
//				rc = this.CheckNumber.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is POSTicketDatum)
            {
                POSTicketDatum compare=(POSTicketDatum)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.POSTicketDataID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.CheckNumber.ToString();
        }

        public string DescriptorColumn() 
        {
            return "CheckNumber";
        }

        public static string GetKeyColumn()
        {
            return "POSTicketDataID";
        }        

        public static string GetDescriptorColumn()
        {
            return "CheckNumber";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.POSTicketDataID;
            }
            set
            {
                m_Internal.POSTicketDataID = value;
            }
        }


//        string _CheckNumber;
        [LocalData]
        public string CheckNumber
        {
            get { return m_Internal.CheckNumber; }
            set
            {
                if(m_Internal.CheckNumber!=value){
                    m_Internal.CheckNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        long _CheckSequence;
        [LocalData]
        public long CheckSequence
        {
            get { return m_Internal.CheckSequence; }
            set
            {
                if(m_Internal.CheckSequence!=value){
                    m_Internal.CheckSequence=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckSequence");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _TicketDate;
        [LocalData]
        public DateTime TicketDate
        {
            get { return m_Internal.TicketDate; }
            set
            {
                if(m_Internal.TicketDate!=value){
                    m_Internal.TicketDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TransactionID;
        [LocalData]
        public string TransactionID
        {
            get { return m_Internal.TransactionID; }
            set
            {
                if(m_Internal.TransactionID!=value){
                    m_Internal.TransactionID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _DetailSequence;
        [LocalData]
        public int DetailSequence
        {
            get { return m_Internal.DetailSequence; }
            set
            {
                if(m_Internal.DetailSequence!=value){
                    m_Internal.DetailSequence=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DetailSequence");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ItemDescription;
        [LocalData]
        public string ItemDescription
        {
            get { return m_Internal.ItemDescription; }
            set
            {
                if(m_Internal.ItemDescription!=value){
                    m_Internal.ItemDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ItemDescriptionCont;
        [LocalData]
        public string ItemDescriptionCont
        {
            get { return m_Internal.ItemDescriptionCont; }
            set
            {
                if(m_Internal.ItemDescriptionCont!=value){
                    m_Internal.ItemDescriptionCont=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemDescriptionCont");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _SeatNumber;
        [LocalData]
        public int? SeatNumber
        {
            get { return m_Internal.SeatNumber; }
            set
            {
                if(m_Internal.SeatNumber!=value){
                    m_Internal.SeatNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SeatNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _GuestCount;
        [LocalData]
        public int? GuestCount
        {
            get { return m_Internal.GuestCount; }
            set
            {
                if(m_Internal.GuestCount!=value){
                    m_Internal.GuestCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _TicketTotal;
        [LocalData]
        public decimal TicketTotal
        {
            get { return m_Internal.TicketTotal; }
            set
            {
                if(m_Internal.TicketTotal!=value){
                    m_Internal.TicketTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Tax;
        [LocalData]
        public decimal Tax
        {
            get { return m_Internal.Tax; }
            set
            {
                if(m_Internal.Tax!=value){
                    m_Internal.Tax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _SubTotal;
        [LocalData]
        public decimal SubTotal
        {
            get { return m_Internal.SubTotal; }
            set
            {
                if(m_Internal.SubTotal!=value){
                    m_Internal.SubTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _AmountDue;
        [LocalData]
        public decimal AmountDue
        {
            get { return m_Internal.AmountDue; }
            set
            {
                if(m_Internal.AmountDue!=value){
                    m_Internal.AmountDue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AmountDue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ServerNumber;
        [LocalData]
        public string ServerNumber
        {
            get { return m_Internal.ServerNumber; }
            set
            {
                if(m_Internal.ServerNumber!=value){
                    m_Internal.ServerNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServerNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ServerFirstName;
        [LocalData]
        public string ServerFirstName
        {
            get { return m_Internal.ServerFirstName; }
            set
            {
                if(m_Internal.ServerFirstName!=value){
                    m_Internal.ServerFirstName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServerFirstName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ServerLastName;
        [LocalData]
        public string ServerLastName
        {
            get { return m_Internal.ServerLastName; }
            set
            {
                if(m_Internal.ServerLastName!=value){
                    m_Internal.ServerLastName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServerLastName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ServerCheckName;
        [LocalData]
        public string ServerCheckName
        {
            get { return m_Internal.ServerCheckName; }
            set
            {
                if(m_Internal.ServerCheckName!=value){
                    m_Internal.ServerCheckName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServerCheckName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Department;
        [LocalData]
        public string Department
        {
            get { return m_Internal.Department; }
            set
            {
                if(m_Internal.Department!=value){
                    m_Internal.Department=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Department");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Category;
        [LocalData]
        public string Category
        {
            get { return m_Internal.Category; }
            set
            {
                if(m_Internal.Category!=value){
                    m_Internal.Category=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Category");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _POSTicketDataID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid POSTicketDataID
        {
            get { return m_Internal.POSTicketDataID; }
            set
            {
                if(m_Internal.POSTicketDataID!=value){
                    m_Internal.POSTicketDataID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketDataID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<POSTicketDatum, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IPS550GuestList : IWCFDataElement
    {
        
        string EmailAddress { get; set; }
        
        string FullName { get; set; }
        
        string Address1 { get; set; }
        
        string Address2 { get; set; }
        
        string Address3 { get; set; }
        
        string City { get; set; }
        
        int? PostCode { get; set; }
        
        string State { get; set; }
        
        string Territory { get; set; }
        
        string VIPCode { get; set; }
        
        string MembershipLevel { get; set; }
        
        string MemberName { get; set; }
        
        string MarketCode { get; set; }
        
        string IndustryCode { get; set; }
        
        DateTime? ArrivalDate { get; set; }
        
        DateTime? DepartureDate { get; set; }
        
        Guid PS550GuestListID { get; set; }
        
        string DataSource { get; set; }

        void Copy( IPS550GuestList _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataPS550GuestList : IPS550GuestList
    {
        [DataMember]
        public string EmailAddress { get; set; }
        [DataMember]
        public string FullName { get; set; }
        [DataMember]
        public string Address1 { get; set; }
        [DataMember]
        public string Address2 { get; set; }
        [DataMember]
        public string Address3 { get; set; }
        [DataMember]
        public string City { get; set; }
        [DataMember]
        public int? PostCode { get; set; }
        [DataMember]
        public string State { get; set; }
        [DataMember]
        public string Territory { get; set; }
        [DataMember]
        public string VIPCode { get; set; }
        [DataMember]
        public string MembershipLevel { get; set; }
        [DataMember]
        public string MemberName { get; set; }
        [DataMember]
        public string MarketCode { get; set; }
        [DataMember]
        public string IndustryCode { get; set; }
        [DataMember]
        public DateTime? ArrivalDate { get; set; }
        [DataMember]
        public DateTime? DepartureDate { get; set; }
        [DataMember]
        public Guid PS550GuestListID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( IPS550GuestList _Item )
        {
             EmailAddress = _Item.EmailAddress;			
             FullName = _Item.FullName;			
             Address1 = _Item.Address1;			
             Address2 = _Item.Address2;			
             Address3 = _Item.Address3;			
             City = _Item.City;			
             PostCode = _Item.PostCode;			
             State = _Item.State;			
             Territory = _Item.Territory;			
             VIPCode = _Item.VIPCode;			
             MembershipLevel = _Item.MembershipLevel;			
             MemberName = _Item.MemberName;			
             MarketCode = _Item.MarketCode;			
             IndustryCode = _Item.IndustryCode;			
             ArrivalDate = _Item.ArrivalDate;			
             DepartureDate = _Item.DepartureDate;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new PS550GuestList( this );
        }
    }


    /// <summary>
    /// A class which represents the PS550GuestList table in the RenAix Database.
    /// </summary>
    public partial class PS550GuestList : BaseDataObject<DataPS550GuestList>, IActiveRecord, ICallOnCreated, IPS550GuestList
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<PS550GuestList> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<PS550GuestList>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<PS550GuestList> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(PS550GuestList item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                PS550GuestList item=new PS550GuestList();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<PS550GuestList> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public PS550GuestList()
        {
            m_Internal = new DataPS550GuestList();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.PS550GuestListID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public PS550GuestList( bool _CallOnCreated )
        {
            m_Internal = new DataPS550GuestList();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public PS550GuestList(string connectionString, string providerName) 
        {
            m_Internal = new DataPS550GuestList();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.PS550GuestListID = Guid.NewGuid( );     
        }

        public PS550GuestList( IPS550GuestList _Item )
        {
            m_Internal = new DataPS550GuestList();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public PS550GuestList( DataPS550GuestList _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IPS550GuestList _Item )
        {
            m_Internal.EmailAddress = _Item.EmailAddress;			
            m_Internal.FullName = _Item.FullName;			
            m_Internal.Address1 = _Item.Address1;			
            m_Internal.Address2 = _Item.Address2;			
            m_Internal.Address3 = _Item.Address3;			
            m_Internal.City = _Item.City;			
            m_Internal.PostCode = _Item.PostCode;			
            m_Internal.State = _Item.State;			
            m_Internal.Territory = _Item.Territory;			
            m_Internal.VIPCode = _Item.VIPCode;			
            m_Internal.MembershipLevel = _Item.MembershipLevel;			
            m_Internal.MemberName = _Item.MemberName;			
            m_Internal.MarketCode = _Item.MarketCode;			
            m_Internal.IndustryCode = _Item.IndustryCode;			
            m_Internal.ArrivalDate = _Item.ArrivalDate;			
            m_Internal.DepartureDate = _Item.DepartureDate;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new PS550GuestList( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.PS550GuestListID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                PS550GuestList.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PS550GuestList>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public PS550GuestList(Expression<Func<PS550GuestList, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<PS550GuestList> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<PS550GuestList> _repo;
            
            if(db.TestMode)
            {
                PS550GuestList.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PS550GuestList>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<PS550GuestList> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static PS550GuestList SingleOrDefault(Expression<Func<PS550GuestList, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static PS550GuestList SingleOrDefault(Expression<Func<PS550GuestList, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<PS550GuestList> repo = GetRepo(connectionString,providerName);
            PS550GuestList single = repo.SingleOrDefault<PS550GuestList>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<PS550GuestList, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<PS550GuestList, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyPS550GuestListLoaded = false;
        protected static PS550GuestList EmptyPS550GuestListMember = null;

        public static PS550GuestList GetByID(Guid? value) 
        {
            PS550GuestList rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static PS550GuestList GetByID(Guid value) 
        {
            PS550GuestList rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyPS550GuestListLoaded )
                    {
                        rc = EmptyPS550GuestListMember;
                    }
                    else
                    {
                        IsEmptyPS550GuestListLoaded = true;
                        rc = PS550GuestList.Find( L => L.PS550GuestListID.Equals( value ) ).FirstOrDefault( );
                        EmptyPS550GuestListMember = rc;
                    }
                }
                else
                {
                    rc = PS550GuestList.Find( L => L.PS550GuestListID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<PS550GuestList> Find(Expression<Func<PS550GuestList, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<PS550GuestList> Find(Expression<Func<PS550GuestList, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<PS550GuestList> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<PS550GuestList> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PS550GuestList> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PS550GuestList> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PS550GuestList> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<PS550GuestList> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "PS550GuestListID";
        }

        public object KeyValue()
        {
            return this.PS550GuestListID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.EmailAddress )
//			{
//				rc = this.EmailAddress.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is PS550GuestList)
            {
                PS550GuestList compare=(PS550GuestList)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.PS550GuestListID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.EmailAddress.ToString();
        }

        public string DescriptorColumn() 
        {
            return "EmailAddress";
        }

        public static string GetKeyColumn()
        {
            return "PS550GuestListID";
        }        

        public static string GetDescriptorColumn()
        {
            return "EmailAddress";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.PS550GuestListID;
            }
            set
            {
                m_Internal.PS550GuestListID = value;
            }
        }


//        string _EmailAddress;
        [LocalData]
        public string EmailAddress
        {
            get { return m_Internal.EmailAddress; }
            set
            {
                if(m_Internal.EmailAddress!=value){
                    m_Internal.EmailAddress=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmailAddress");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _FullName;
        [LocalData]
        public string FullName
        {
            get { return m_Internal.FullName; }
            set
            {
                if(m_Internal.FullName!=value){
                    m_Internal.FullName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FullName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Address1;
        [LocalData]
        public string Address1
        {
            get { return m_Internal.Address1; }
            set
            {
                if(m_Internal.Address1!=value){
                    m_Internal.Address1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Address1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Address2;
        [LocalData]
        public string Address2
        {
            get { return m_Internal.Address2; }
            set
            {
                if(m_Internal.Address2!=value){
                    m_Internal.Address2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Address2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Address3;
        [LocalData]
        public string Address3
        {
            get { return m_Internal.Address3; }
            set
            {
                if(m_Internal.Address3!=value){
                    m_Internal.Address3=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Address3");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _City;
        [LocalData]
        public string City
        {
            get { return m_Internal.City; }
            set
            {
                if(m_Internal.City!=value){
                    m_Internal.City=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="City");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _PostCode;
        [LocalData]
        public int? PostCode
        {
            get { return m_Internal.PostCode; }
            set
            {
                if(m_Internal.PostCode!=value){
                    m_Internal.PostCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PostCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _State;
        [LocalData]
        public string State
        {
            get { return m_Internal.State; }
            set
            {
                if(m_Internal.State!=value){
                    m_Internal.State=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="State");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Territory;
        [LocalData]
        public string Territory
        {
            get { return m_Internal.Territory; }
            set
            {
                if(m_Internal.Territory!=value){
                    m_Internal.Territory=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Territory");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _VIPCode;
        [LocalData]
        public string VIPCode
        {
            get { return m_Internal.VIPCode; }
            set
            {
                if(m_Internal.VIPCode!=value){
                    m_Internal.VIPCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VIPCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MembershipLevel;
        [LocalData]
        public string MembershipLevel
        {
            get { return m_Internal.MembershipLevel; }
            set
            {
                if(m_Internal.MembershipLevel!=value){
                    m_Internal.MembershipLevel=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MembershipLevel");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MemberName;
        [LocalData]
        public string MemberName
        {
            get { return m_Internal.MemberName; }
            set
            {
                if(m_Internal.MemberName!=value){
                    m_Internal.MemberName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MemberName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MarketCode;
        [LocalData]
        public string MarketCode
        {
            get { return m_Internal.MarketCode; }
            set
            {
                if(m_Internal.MarketCode!=value){
                    m_Internal.MarketCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MarketCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _IndustryCode;
        [LocalData]
        public string IndustryCode
        {
            get { return m_Internal.IndustryCode; }
            set
            {
                if(m_Internal.IndustryCode!=value){
                    m_Internal.IndustryCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IndustryCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _ArrivalDate;
        [LocalData]
        public DateTime? ArrivalDate
        {
            get { return m_Internal.ArrivalDate; }
            set
            {
                if(m_Internal.ArrivalDate!=value){
                    m_Internal.ArrivalDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ArrivalDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _DepartureDate;
        [LocalData]
        public DateTime? DepartureDate
        {
            get { return m_Internal.DepartureDate; }
            set
            {
                if(m_Internal.DepartureDate!=value){
                    m_Internal.DepartureDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepartureDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _PS550GuestListID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid PS550GuestListID
        {
            get { return m_Internal.PS550GuestListID; }
            set
            {
                if(m_Internal.PS550GuestListID!=value){
                    m_Internal.PS550GuestListID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PS550GuestListID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<PS550GuestList, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface Irep_bh_short : IWCFDataElement
    {
        
        string BLOCK_CODE { get; set; }
        
        string RESORT { get; set; }
        
        int? ALLOTMENT_HEADER_ID { get; set; }
        
        string DESCRIPTION { get; set; }
        
        DateTime? START_DATE { get; set; }
        
        DateTime? END_DATE { get; set; }
        
        string BOOKING_STATUS { get; set; }
        
        string CAT_STATUS { get; set; }
        
        DateTime? RMS_DECISION_DATE { get; set; }
        
        DateTime? CAT_DECISION { get; set; }
        
        DateTime? CUTOFF_DATE { get; set; }
        
        DateTime? RMS_FOLLOWUP { get; set; }
        
        string RMS_OWNER_CODE { get; set; }
        
        DateTime? CAT_FOLLOWUP_DATE { get; set; }
        
        string CAT_OWNER_CODE { get; set; }
        
        string RANKING_CODE { get; set; }
        
        string CONVERSION_CODE { get; set; }
        
        decimal? RMS_BLOCKED { get; set; }
        
        decimal? REV_BLOCKED { get; set; }
        
        decimal? AVG_RATE { get; set; }
        
        decimal? TOTAL_REVENUE { get; set; }
        
        decimal? REV_TYPE1 { get; set; }
        
        decimal? REV_TYPE2 { get; set; }
        
        decimal? REV_TYPE3 { get; set; }
        
        decimal? REV_TYPE4 { get; set; }
        
        decimal? CF_TOTAL_REVENUE { get; set; }
        
        string CF_CONTACTNAME { get; set; }
        
        string CF_ACCOUNTNAME { get; set; }
        
        int? CAT_TOTAL { get; set; }
        
        Guid rep_bh_shortID { get; set; }
        
        string DataSource { get; set; }

        void Copy( Irep_bh_short _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class Datarep_bh_short : Irep_bh_short
    {
        [DataMember]
        public string BLOCK_CODE { get; set; }
        [DataMember]
        public string RESORT { get; set; }
        [DataMember]
        public int? ALLOTMENT_HEADER_ID { get; set; }
        [DataMember]
        public string DESCRIPTION { get; set; }
        [DataMember]
        public DateTime? START_DATE { get; set; }
        [DataMember]
        public DateTime? END_DATE { get; set; }
        [DataMember]
        public string BOOKING_STATUS { get; set; }
        [DataMember]
        public string CAT_STATUS { get; set; }
        [DataMember]
        public DateTime? RMS_DECISION_DATE { get; set; }
        [DataMember]
        public DateTime? CAT_DECISION { get; set; }
        [DataMember]
        public DateTime? CUTOFF_DATE { get; set; }
        [DataMember]
        public DateTime? RMS_FOLLOWUP { get; set; }
        [DataMember]
        public string RMS_OWNER_CODE { get; set; }
        [DataMember]
        public DateTime? CAT_FOLLOWUP_DATE { get; set; }
        [DataMember]
        public string CAT_OWNER_CODE { get; set; }
        [DataMember]
        public string RANKING_CODE { get; set; }
        [DataMember]
        public string CONVERSION_CODE { get; set; }
        [DataMember]
        public decimal? RMS_BLOCKED { get; set; }
        [DataMember]
        public decimal? REV_BLOCKED { get; set; }
        [DataMember]
        public decimal? AVG_RATE { get; set; }
        [DataMember]
        public decimal? TOTAL_REVENUE { get; set; }
        [DataMember]
        public decimal? REV_TYPE1 { get; set; }
        [DataMember]
        public decimal? REV_TYPE2 { get; set; }
        [DataMember]
        public decimal? REV_TYPE3 { get; set; }
        [DataMember]
        public decimal? REV_TYPE4 { get; set; }
        [DataMember]
        public decimal? CF_TOTAL_REVENUE { get; set; }
        [DataMember]
        public string CF_CONTACTNAME { get; set; }
        [DataMember]
        public string CF_ACCOUNTNAME { get; set; }
        [DataMember]
        public int? CAT_TOTAL { get; set; }
        [DataMember]
        public Guid rep_bh_shortID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( Irep_bh_short _Item )
        {
             BLOCK_CODE = _Item.BLOCK_CODE;			
             RESORT = _Item.RESORT;			
             ALLOTMENT_HEADER_ID = _Item.ALLOTMENT_HEADER_ID;			
             DESCRIPTION = _Item.DESCRIPTION;			
             START_DATE = _Item.START_DATE;			
             END_DATE = _Item.END_DATE;			
             BOOKING_STATUS = _Item.BOOKING_STATUS;			
             CAT_STATUS = _Item.CAT_STATUS;			
             RMS_DECISION_DATE = _Item.RMS_DECISION_DATE;			
             CAT_DECISION = _Item.CAT_DECISION;			
             CUTOFF_DATE = _Item.CUTOFF_DATE;			
             RMS_FOLLOWUP = _Item.RMS_FOLLOWUP;			
             RMS_OWNER_CODE = _Item.RMS_OWNER_CODE;			
             CAT_FOLLOWUP_DATE = _Item.CAT_FOLLOWUP_DATE;			
             CAT_OWNER_CODE = _Item.CAT_OWNER_CODE;			
             RANKING_CODE = _Item.RANKING_CODE;			
             CONVERSION_CODE = _Item.CONVERSION_CODE;			
             RMS_BLOCKED = _Item.RMS_BLOCKED;			
             REV_BLOCKED = _Item.REV_BLOCKED;			
             AVG_RATE = _Item.AVG_RATE;			
             TOTAL_REVENUE = _Item.TOTAL_REVENUE;			
             REV_TYPE1 = _Item.REV_TYPE1;			
             REV_TYPE2 = _Item.REV_TYPE2;			
             REV_TYPE3 = _Item.REV_TYPE3;			
             REV_TYPE4 = _Item.REV_TYPE4;			
             CF_TOTAL_REVENUE = _Item.CF_TOTAL_REVENUE;			
             CF_CONTACTNAME = _Item.CF_CONTACTNAME;			
             CF_ACCOUNTNAME = _Item.CF_ACCOUNTNAME;			
             CAT_TOTAL = _Item.CAT_TOTAL;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new rep_bh_short( this );
        }
    }


    /// <summary>
    /// A class which represents the rep_bh_short table in the RenAix Database.
    /// </summary>
    public partial class rep_bh_short : BaseDataObject<Datarep_bh_short>, IActiveRecord, ICallOnCreated, Irep_bh_short
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<rep_bh_short> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<rep_bh_short>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<rep_bh_short> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(rep_bh_short item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                rep_bh_short item=new rep_bh_short();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<rep_bh_short> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public rep_bh_short()
        {
            m_Internal = new Datarep_bh_short();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.rep_bh_shortID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public rep_bh_short( bool _CallOnCreated )
        {
            m_Internal = new Datarep_bh_short();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public rep_bh_short(string connectionString, string providerName) 
        {
            m_Internal = new Datarep_bh_short();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.rep_bh_shortID = Guid.NewGuid( );     
        }

        public rep_bh_short( Irep_bh_short _Item )
        {
            m_Internal = new Datarep_bh_short();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public rep_bh_short( Datarep_bh_short _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( Irep_bh_short _Item )
        {
            m_Internal.BLOCK_CODE = _Item.BLOCK_CODE;			
            m_Internal.RESORT = _Item.RESORT;			
            m_Internal.ALLOTMENT_HEADER_ID = _Item.ALLOTMENT_HEADER_ID;			
            m_Internal.DESCRIPTION = _Item.DESCRIPTION;			
            m_Internal.START_DATE = _Item.START_DATE;			
            m_Internal.END_DATE = _Item.END_DATE;			
            m_Internal.BOOKING_STATUS = _Item.BOOKING_STATUS;			
            m_Internal.CAT_STATUS = _Item.CAT_STATUS;			
            m_Internal.RMS_DECISION_DATE = _Item.RMS_DECISION_DATE;			
            m_Internal.CAT_DECISION = _Item.CAT_DECISION;			
            m_Internal.CUTOFF_DATE = _Item.CUTOFF_DATE;			
            m_Internal.RMS_FOLLOWUP = _Item.RMS_FOLLOWUP;			
            m_Internal.RMS_OWNER_CODE = _Item.RMS_OWNER_CODE;			
            m_Internal.CAT_FOLLOWUP_DATE = _Item.CAT_FOLLOWUP_DATE;			
            m_Internal.CAT_OWNER_CODE = _Item.CAT_OWNER_CODE;			
            m_Internal.RANKING_CODE = _Item.RANKING_CODE;			
            m_Internal.CONVERSION_CODE = _Item.CONVERSION_CODE;			
            m_Internal.RMS_BLOCKED = _Item.RMS_BLOCKED;			
            m_Internal.REV_BLOCKED = _Item.REV_BLOCKED;			
            m_Internal.AVG_RATE = _Item.AVG_RATE;			
            m_Internal.TOTAL_REVENUE = _Item.TOTAL_REVENUE;			
            m_Internal.REV_TYPE1 = _Item.REV_TYPE1;			
            m_Internal.REV_TYPE2 = _Item.REV_TYPE2;			
            m_Internal.REV_TYPE3 = _Item.REV_TYPE3;			
            m_Internal.REV_TYPE4 = _Item.REV_TYPE4;			
            m_Internal.CF_TOTAL_REVENUE = _Item.CF_TOTAL_REVENUE;			
            m_Internal.CF_CONTACTNAME = _Item.CF_CONTACTNAME;			
            m_Internal.CF_ACCOUNTNAME = _Item.CF_ACCOUNTNAME;			
            m_Internal.CAT_TOTAL = _Item.CAT_TOTAL;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new rep_bh_short( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.rep_bh_shortID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                rep_bh_short.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rep_bh_short>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public rep_bh_short(Expression<Func<rep_bh_short, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<rep_bh_short> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<rep_bh_short> _repo;
            
            if(db.TestMode)
            {
                rep_bh_short.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rep_bh_short>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<rep_bh_short> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static rep_bh_short SingleOrDefault(Expression<Func<rep_bh_short, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static rep_bh_short SingleOrDefault(Expression<Func<rep_bh_short, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<rep_bh_short> repo = GetRepo(connectionString,providerName);
            rep_bh_short single = repo.SingleOrDefault<rep_bh_short>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<rep_bh_short, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<rep_bh_short, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyrep_bh_shortLoaded = false;
        protected static rep_bh_short Emptyrep_bh_shortMember = null;

        public static rep_bh_short GetByID(Guid? value) 
        {
            rep_bh_short rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static rep_bh_short GetByID(Guid value) 
        {
            rep_bh_short rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyrep_bh_shortLoaded )
                    {
                        rc = Emptyrep_bh_shortMember;
                    }
                    else
                    {
                        IsEmptyrep_bh_shortLoaded = true;
                        rc = rep_bh_short.Find( L => L.rep_bh_shortID.Equals( value ) ).FirstOrDefault( );
                        Emptyrep_bh_shortMember = rc;
                    }
                }
                else
                {
                    rc = rep_bh_short.Find( L => L.rep_bh_shortID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<rep_bh_short> Find(Expression<Func<rep_bh_short, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<rep_bh_short> Find(Expression<Func<rep_bh_short, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<rep_bh_short> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<rep_bh_short> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<rep_bh_short> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<rep_bh_short> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<rep_bh_short> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<rep_bh_short> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "rep_bh_shortID";
        }

        public object KeyValue()
        {
            return this.rep_bh_shortID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.BLOCK_CODE )
//			{
//				rc = this.BLOCK_CODE.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is rep_bh_short)
            {
                rep_bh_short compare=(rep_bh_short)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.rep_bh_shortID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.BLOCK_CODE.ToString();
        }

        public string DescriptorColumn() 
        {
            return "BLOCK_CODE";
        }

        public static string GetKeyColumn()
        {
            return "rep_bh_shortID";
        }        

        public static string GetDescriptorColumn()
        {
            return "BLOCK_CODE";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.rep_bh_shortID;
            }
            set
            {
                m_Internal.rep_bh_shortID = value;
            }
        }


//        string _BLOCK_CODE;
        [LocalData]
        public string BLOCK_CODE
        {
            get { return m_Internal.BLOCK_CODE; }
            set
            {
                if(m_Internal.BLOCK_CODE!=value){
                    m_Internal.BLOCK_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BLOCK_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RESORT;
        [LocalData]
        public string RESORT
        {
            get { return m_Internal.RESORT; }
            set
            {
                if(m_Internal.RESORT!=value){
                    m_Internal.RESORT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RESORT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ALLOTMENT_HEADER_ID;
        [LocalData]
        public int? ALLOTMENT_HEADER_ID
        {
            get { return m_Internal.ALLOTMENT_HEADER_ID; }
            set
            {
                if(m_Internal.ALLOTMENT_HEADER_ID!=value){
                    m_Internal.ALLOTMENT_HEADER_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ALLOTMENT_HEADER_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DESCRIPTION;
        [LocalData]
        public string DESCRIPTION
        {
            get { return m_Internal.DESCRIPTION; }
            set
            {
                if(m_Internal.DESCRIPTION!=value){
                    m_Internal.DESCRIPTION=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DESCRIPTION");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _START_DATE;
        [LocalData]
        public DateTime? START_DATE
        {
            get { return m_Internal.START_DATE; }
            set
            {
                if(m_Internal.START_DATE!=value){
                    m_Internal.START_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="START_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _END_DATE;
        [LocalData]
        public DateTime? END_DATE
        {
            get { return m_Internal.END_DATE; }
            set
            {
                if(m_Internal.END_DATE!=value){
                    m_Internal.END_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="END_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _BOOKING_STATUS;
        [LocalData]
        public string BOOKING_STATUS
        {
            get { return m_Internal.BOOKING_STATUS; }
            set
            {
                if(m_Internal.BOOKING_STATUS!=value){
                    m_Internal.BOOKING_STATUS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BOOKING_STATUS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CAT_STATUS;
        [LocalData]
        public string CAT_STATUS
        {
            get { return m_Internal.CAT_STATUS; }
            set
            {
                if(m_Internal.CAT_STATUS!=value){
                    m_Internal.CAT_STATUS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CAT_STATUS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _RMS_DECISION_DATE;
        [LocalData]
        public DateTime? RMS_DECISION_DATE
        {
            get { return m_Internal.RMS_DECISION_DATE; }
            set
            {
                if(m_Internal.RMS_DECISION_DATE!=value){
                    m_Internal.RMS_DECISION_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RMS_DECISION_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _CAT_DECISION;
        [LocalData]
        public DateTime? CAT_DECISION
        {
            get { return m_Internal.CAT_DECISION; }
            set
            {
                if(m_Internal.CAT_DECISION!=value){
                    m_Internal.CAT_DECISION=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CAT_DECISION");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _CUTOFF_DATE;
        [LocalData]
        public DateTime? CUTOFF_DATE
        {
            get { return m_Internal.CUTOFF_DATE; }
            set
            {
                if(m_Internal.CUTOFF_DATE!=value){
                    m_Internal.CUTOFF_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CUTOFF_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _RMS_FOLLOWUP;
        [LocalData]
        public DateTime? RMS_FOLLOWUP
        {
            get { return m_Internal.RMS_FOLLOWUP; }
            set
            {
                if(m_Internal.RMS_FOLLOWUP!=value){
                    m_Internal.RMS_FOLLOWUP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RMS_FOLLOWUP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RMS_OWNER_CODE;
        [LocalData]
        public string RMS_OWNER_CODE
        {
            get { return m_Internal.RMS_OWNER_CODE; }
            set
            {
                if(m_Internal.RMS_OWNER_CODE!=value){
                    m_Internal.RMS_OWNER_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RMS_OWNER_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _CAT_FOLLOWUP_DATE;
        [LocalData]
        public DateTime? CAT_FOLLOWUP_DATE
        {
            get { return m_Internal.CAT_FOLLOWUP_DATE; }
            set
            {
                if(m_Internal.CAT_FOLLOWUP_DATE!=value){
                    m_Internal.CAT_FOLLOWUP_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CAT_FOLLOWUP_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CAT_OWNER_CODE;
        [LocalData]
        public string CAT_OWNER_CODE
        {
            get { return m_Internal.CAT_OWNER_CODE; }
            set
            {
                if(m_Internal.CAT_OWNER_CODE!=value){
                    m_Internal.CAT_OWNER_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CAT_OWNER_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RANKING_CODE;
        [LocalData]
        public string RANKING_CODE
        {
            get { return m_Internal.RANKING_CODE; }
            set
            {
                if(m_Internal.RANKING_CODE!=value){
                    m_Internal.RANKING_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RANKING_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CONVERSION_CODE;
        [LocalData]
        public string CONVERSION_CODE
        {
            get { return m_Internal.CONVERSION_CODE; }
            set
            {
                if(m_Internal.CONVERSION_CODE!=value){
                    m_Internal.CONVERSION_CODE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CONVERSION_CODE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _RMS_BLOCKED;
        [LocalData]
        public decimal? RMS_BLOCKED
        {
            get { return m_Internal.RMS_BLOCKED; }
            set
            {
                if(m_Internal.RMS_BLOCKED!=value){
                    m_Internal.RMS_BLOCKED=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RMS_BLOCKED");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _REV_BLOCKED;
        [LocalData]
        public decimal? REV_BLOCKED
        {
            get { return m_Internal.REV_BLOCKED; }
            set
            {
                if(m_Internal.REV_BLOCKED!=value){
                    m_Internal.REV_BLOCKED=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REV_BLOCKED");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _AVG_RATE;
        [LocalData]
        public decimal? AVG_RATE
        {
            get { return m_Internal.AVG_RATE; }
            set
            {
                if(m_Internal.AVG_RATE!=value){
                    m_Internal.AVG_RATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AVG_RATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TOTAL_REVENUE;
        [LocalData]
        public decimal? TOTAL_REVENUE
        {
            get { return m_Internal.TOTAL_REVENUE; }
            set
            {
                if(m_Internal.TOTAL_REVENUE!=value){
                    m_Internal.TOTAL_REVENUE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TOTAL_REVENUE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _REV_TYPE1;
        [LocalData]
        public decimal? REV_TYPE1
        {
            get { return m_Internal.REV_TYPE1; }
            set
            {
                if(m_Internal.REV_TYPE1!=value){
                    m_Internal.REV_TYPE1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REV_TYPE1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _REV_TYPE2;
        [LocalData]
        public decimal? REV_TYPE2
        {
            get { return m_Internal.REV_TYPE2; }
            set
            {
                if(m_Internal.REV_TYPE2!=value){
                    m_Internal.REV_TYPE2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REV_TYPE2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _REV_TYPE3;
        [LocalData]
        public decimal? REV_TYPE3
        {
            get { return m_Internal.REV_TYPE3; }
            set
            {
                if(m_Internal.REV_TYPE3!=value){
                    m_Internal.REV_TYPE3=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REV_TYPE3");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _REV_TYPE4;
        [LocalData]
        public decimal? REV_TYPE4
        {
            get { return m_Internal.REV_TYPE4; }
            set
            {
                if(m_Internal.REV_TYPE4!=value){
                    m_Internal.REV_TYPE4=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="REV_TYPE4");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _CF_TOTAL_REVENUE;
        [LocalData]
        public decimal? CF_TOTAL_REVENUE
        {
            get { return m_Internal.CF_TOTAL_REVENUE; }
            set
            {
                if(m_Internal.CF_TOTAL_REVENUE!=value){
                    m_Internal.CF_TOTAL_REVENUE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_TOTAL_REVENUE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_CONTACTNAME;
        [LocalData]
        public string CF_CONTACTNAME
        {
            get { return m_Internal.CF_CONTACTNAME; }
            set
            {
                if(m_Internal.CF_CONTACTNAME!=value){
                    m_Internal.CF_CONTACTNAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_CONTACTNAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CF_ACCOUNTNAME;
        [LocalData]
        public string CF_ACCOUNTNAME
        {
            get { return m_Internal.CF_ACCOUNTNAME; }
            set
            {
                if(m_Internal.CF_ACCOUNTNAME!=value){
                    m_Internal.CF_ACCOUNTNAME=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CF_ACCOUNTNAME");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _CAT_TOTAL;
        [LocalData]
        public int? CAT_TOTAL
        {
            get { return m_Internal.CAT_TOTAL; }
            set
            {
                if(m_Internal.CAT_TOTAL!=value){
                    m_Internal.CAT_TOTAL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CAT_TOTAL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _rep_bh_shortID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid rep_bh_shortID
        {
            get { return m_Internal.rep_bh_shortID; }
            set
            {
                if(m_Internal.rep_bh_shortID!=value){
                    m_Internal.rep_bh_shortID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="rep_bh_shortID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<rep_bh_short, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface Iv_R_kds_chk_dtl : IWCFDataElement
    {
        
        string business_date { get; set; }
        
        int? rvc_num { get; set; }
        
        int? time_period_num { get; set; }
        
        string time_period_name { get; set; }
        
        int? emp_num { get; set; }
        
        int? chk_seq { get; set; }
        
        Guid v_R_kds_chk_dtlID { get; set; }
        
        string DataSource { get; set; }

        void Copy( Iv_R_kds_chk_dtl _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class Datav_R_kds_chk_dtl : Iv_R_kds_chk_dtl
    {
        [DataMember]
        public string business_date { get; set; }
        [DataMember]
        public int? rvc_num { get; set; }
        [DataMember]
        public int? time_period_num { get; set; }
        [DataMember]
        public string time_period_name { get; set; }
        [DataMember]
        public int? emp_num { get; set; }
        [DataMember]
        public int? chk_seq { get; set; }
        [DataMember]
        public Guid v_R_kds_chk_dtlID { get; set; }
        [DataMember]
        public string DataSource { get; set; }

        public void Copy( Iv_R_kds_chk_dtl _Item )
        {
             business_date = _Item.business_date;			
             rvc_num = _Item.rvc_num;			
             time_period_num = _Item.time_period_num;			
             time_period_name = _Item.time_period_name;			
             emp_num = _Item.emp_num;			
             chk_seq = _Item.chk_seq;			
             DataSource = _Item.DataSource;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new v_R_kds_chk_dtl( this );
        }
    }


    /// <summary>
    /// A class which represents the v_R_kds_chk_dtl table in the RenAix Database.
    /// </summary>
    public partial class v_R_kds_chk_dtl : BaseDataObject<Datav_R_kds_chk_dtl>, IActiveRecord, ICallOnCreated, Iv_R_kds_chk_dtl
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<v_R_kds_chk_dtl> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<v_R_kds_chk_dtl>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<v_R_kds_chk_dtl> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(v_R_kds_chk_dtl item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                v_R_kds_chk_dtl item=new v_R_kds_chk_dtl();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<v_R_kds_chk_dtl> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public v_R_kds_chk_dtl()
        {
            m_Internal = new Datav_R_kds_chk_dtl();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
            this.v_R_kds_chk_dtlID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public v_R_kds_chk_dtl( bool _CallOnCreated )
        {
            m_Internal = new Datav_R_kds_chk_dtl();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public v_R_kds_chk_dtl(string connectionString, string providerName) 
        {
            m_Internal = new Datav_R_kds_chk_dtl();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
            this.v_R_kds_chk_dtlID = Guid.NewGuid( );     
        }

        public v_R_kds_chk_dtl( Iv_R_kds_chk_dtl _Item )
        {
            m_Internal = new Datav_R_kds_chk_dtl();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public v_R_kds_chk_dtl( Datav_R_kds_chk_dtl _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( Iv_R_kds_chk_dtl _Item )
        {
            m_Internal.business_date = _Item.business_date;			
            m_Internal.rvc_num = _Item.rvc_num;			
            m_Internal.time_period_num = _Item.time_period_num;			
            m_Internal.time_period_name = _Item.time_period_name;			
            m_Internal.emp_num = _Item.emp_num;			
            m_Internal.chk_seq = _Item.chk_seq;			
            m_Internal.DataSource = _Item.DataSource;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new v_R_kds_chk_dtl( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.v_R_kds_chk_dtlID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                v_R_kds_chk_dtl.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<v_R_kds_chk_dtl>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public v_R_kds_chk_dtl(Expression<Func<v_R_kds_chk_dtl, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<v_R_kds_chk_dtl> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<v_R_kds_chk_dtl> _repo;
            
            if(db.TestMode)
            {
                v_R_kds_chk_dtl.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<v_R_kds_chk_dtl>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<v_R_kds_chk_dtl> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static v_R_kds_chk_dtl SingleOrDefault(Expression<Func<v_R_kds_chk_dtl, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static v_R_kds_chk_dtl SingleOrDefault(Expression<Func<v_R_kds_chk_dtl, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<v_R_kds_chk_dtl> repo = GetRepo(connectionString,providerName);
            v_R_kds_chk_dtl single = repo.SingleOrDefault<v_R_kds_chk_dtl>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<v_R_kds_chk_dtl, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<v_R_kds_chk_dtl, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyv_R_kds_chk_dtlLoaded = false;
        protected static v_R_kds_chk_dtl Emptyv_R_kds_chk_dtlMember = null;

        public static v_R_kds_chk_dtl GetByID(Guid? value) 
        {
            v_R_kds_chk_dtl rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static v_R_kds_chk_dtl GetByID(Guid value) 
        {
            v_R_kds_chk_dtl rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyv_R_kds_chk_dtlLoaded )
                    {
                        rc = Emptyv_R_kds_chk_dtlMember;
                    }
                    else
                    {
                        IsEmptyv_R_kds_chk_dtlLoaded = true;
                        rc = v_R_kds_chk_dtl.Find( L => L.v_R_kds_chk_dtlID.Equals( value ) ).FirstOrDefault( );
                        Emptyv_R_kds_chk_dtlMember = rc;
                    }
                }
                else
                {
                    rc = v_R_kds_chk_dtl.Find( L => L.v_R_kds_chk_dtlID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<v_R_kds_chk_dtl> Find(Expression<Func<v_R_kds_chk_dtl, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<v_R_kds_chk_dtl> Find(Expression<Func<v_R_kds_chk_dtl, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<v_R_kds_chk_dtl> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<v_R_kds_chk_dtl> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<v_R_kds_chk_dtl> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<v_R_kds_chk_dtl> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<v_R_kds_chk_dtl> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<v_R_kds_chk_dtl> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "v_R_kds_chk_dtlID";
        }

        public object KeyValue()
        {
            return this.v_R_kds_chk_dtlID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.business_date )
//			{
//				rc = this.business_date.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is v_R_kds_chk_dtl)
            {
                v_R_kds_chk_dtl compare=(v_R_kds_chk_dtl)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.v_R_kds_chk_dtlID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.business_date.ToString();
        }

        public string DescriptorColumn() 
        {
            return "business_date";
        }

        public static string GetKeyColumn()
        {
            return "v_R_kds_chk_dtlID";
        }        

        public static string GetDescriptorColumn()
        {
            return "business_date";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.v_R_kds_chk_dtlID;
            }
            set
            {
                m_Internal.v_R_kds_chk_dtlID = value;
            }
        }


//        string _business_date;
        [LocalData]
        public string business_date
        {
            get { return m_Internal.business_date; }
            set
            {
                if(m_Internal.business_date!=value){
                    m_Internal.business_date=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="business_date");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _rvc_num;
        [LocalData]
        public int? rvc_num
        {
            get { return m_Internal.rvc_num; }
            set
            {
                if(m_Internal.rvc_num!=value){
                    m_Internal.rvc_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="rvc_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _time_period_num;
        [LocalData]
        public int? time_period_num
        {
            get { return m_Internal.time_period_num; }
            set
            {
                if(m_Internal.time_period_num!=value){
                    m_Internal.time_period_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="time_period_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _time_period_name;
        [LocalData]
        public string time_period_name
        {
            get { return m_Internal.time_period_name; }
            set
            {
                if(m_Internal.time_period_name!=value){
                    m_Internal.time_period_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="time_period_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _emp_num;
        [LocalData]
        public int? emp_num
        {
            get { return m_Internal.emp_num; }
            set
            {
                if(m_Internal.emp_num!=value){
                    m_Internal.emp_num=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="emp_num");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _chk_seq;
        [LocalData]
        public int? chk_seq
        {
            get { return m_Internal.chk_seq; }
            set
            {
                if(m_Internal.chk_seq!=value){
                    m_Internal.chk_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="chk_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _v_R_kds_chk_dtlID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid v_R_kds_chk_dtlID
        {
            get { return m_Internal.v_R_kds_chk_dtlID; }
            set
            {
                if(m_Internal.v_R_kds_chk_dtlID!=value){
                    m_Internal.v_R_kds_chk_dtlID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="v_R_kds_chk_dtlID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataSource;
        [LocalData]
        public string DataSource
        {
            get { return m_Internal.DataSource; }
            set
            {
                if(m_Internal.DataSource!=value){
                    m_Internal.DataSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<v_R_kds_chk_dtl, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IDailyPOSTopTen : IWCFDataElement
    {
        
        DateTime BUSINESS_DATE { get; set; }
        
        string ESTABLISHMENT { get; set; }
        
        string PRODUCT { get; set; }
        
        decimal? TotalPrice { get; set; }
        
        int? TotalItems { get; set; }
        
        int? OrderedItems { get; set; }
        
        int? ReturnedItems { get; set; }
        
        long? RowNum { get; set; }

        void Copy( IDailyPOSTopTen _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DataDailyPOSTopTen : IDailyPOSTopTen
    {
        [DataMember]
        public DateTime BUSINESS_DATE { get; set; }
        [DataMember]
        public string ESTABLISHMENT { get; set; }
        [DataMember]
        public string PRODUCT { get; set; }
        [DataMember]
        public decimal? TotalPrice { get; set; }
        [DataMember]
        public int? TotalItems { get; set; }
        [DataMember]
        public int? OrderedItems { get; set; }
        [DataMember]
        public int? ReturnedItems { get; set; }
        [DataMember]
        public long? RowNum { get; set; }

        public void Copy( IDailyPOSTopTen _Item )
        {
             ESTABLISHMENT = _Item.ESTABLISHMENT;			
             PRODUCT = _Item.PRODUCT;			
             TotalPrice = _Item.TotalPrice;			
             TotalItems = _Item.TotalItems;			
             OrderedItems = _Item.OrderedItems;			
             ReturnedItems = _Item.ReturnedItems;			
             RowNum = _Item.RowNum;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new DailyPOSTopTen( this );
        }
    }


    /// <summary>
    /// A class which represents the DailyPOSTopTen table in the RenAix Database.
    /// </summary>
    public partial class DailyPOSTopTen : BaseDataObject<DataDailyPOSTopTen>, IActiveRecord, ICallOnCreated, IDailyPOSTopTen
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<DailyPOSTopTen> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<DailyPOSTopTen>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<DailyPOSTopTen> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(DailyPOSTopTen item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                DailyPOSTopTen item=new DailyPOSTopTen();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<DailyPOSTopTen> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public DailyPOSTopTen()
        {
            m_Internal = new DataDailyPOSTopTen();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public DailyPOSTopTen( bool _CallOnCreated )
        {
            m_Internal = new DataDailyPOSTopTen();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public DailyPOSTopTen(string connectionString, string providerName) 
        {
            m_Internal = new DataDailyPOSTopTen();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public DailyPOSTopTen( IDailyPOSTopTen _Item )
        {
            m_Internal = new DataDailyPOSTopTen();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public DailyPOSTopTen( DataDailyPOSTopTen _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IDailyPOSTopTen _Item )
        {
            m_Internal.ESTABLISHMENT = _Item.ESTABLISHMENT;			
            m_Internal.PRODUCT = _Item.PRODUCT;			
            m_Internal.TotalPrice = _Item.TotalPrice;			
            m_Internal.TotalItems = _Item.TotalItems;			
            m_Internal.OrderedItems = _Item.OrderedItems;			
            m_Internal.ReturnedItems = _Item.ReturnedItems;			
            m_Internal.RowNum = _Item.RowNum;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new DailyPOSTopTen( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                DailyPOSTopTen.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DailyPOSTopTen>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public DailyPOSTopTen(Expression<Func<DailyPOSTopTen, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<DailyPOSTopTen> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<DailyPOSTopTen> _repo;
            
            if(db.TestMode)
            {
                DailyPOSTopTen.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DailyPOSTopTen>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<DailyPOSTopTen> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static DailyPOSTopTen SingleOrDefault(Expression<Func<DailyPOSTopTen, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static DailyPOSTopTen SingleOrDefault(Expression<Func<DailyPOSTopTen, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<DailyPOSTopTen> repo = GetRepo(connectionString,providerName);
            DailyPOSTopTen single = repo.SingleOrDefault<DailyPOSTopTen>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<DailyPOSTopTen, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<DailyPOSTopTen, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static DailyPOSTopTen GetByID(DateTime value) 
        {
            return DailyPOSTopTen.Find( L => L.BUSINESS_DATE.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<DailyPOSTopTen> Find(Expression<Func<DailyPOSTopTen, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<DailyPOSTopTen> Find(Expression<Func<DailyPOSTopTen, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<DailyPOSTopTen> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<DailyPOSTopTen> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<DailyPOSTopTen> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<DailyPOSTopTen> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<DailyPOSTopTen> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<DailyPOSTopTen> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "BUSINESS_DATE";
        }

        public object KeyValue()
        {
            return this.BUSINESS_DATE;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.ESTABLISHMENT )
//			{
//				rc = this.ESTABLISHMENT.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is DailyPOSTopTen)
            {
                DailyPOSTopTen compare=(DailyPOSTopTen)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.ESTABLISHMENT.ToString();
        }

        public string DescriptorColumn() 
        {
            return "ESTABLISHMENT";
        }

        public static string GetKeyColumn()
        {
            return "BUSINESS_DATE";
        }        

        public static string GetDescriptorColumn()
        {
            return "ESTABLISHMENT";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _BUSINESS_DATE;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime BUSINESS_DATE
        {
            get { return m_Internal.BUSINESS_DATE; }
            set
            {
                if(m_Internal.BUSINESS_DATE!=value){
                    m_Internal.BUSINESS_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BUSINESS_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ESTABLISHMENT;
        [LocalData]
        public string ESTABLISHMENT
        {
            get { return m_Internal.ESTABLISHMENT; }
            set
            {
                if(m_Internal.ESTABLISHMENT!=value){
                    m_Internal.ESTABLISHMENT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ESTABLISHMENT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PRODUCT;
        [LocalData]
        public string PRODUCT
        {
            get { return m_Internal.PRODUCT; }
            set
            {
                if(m_Internal.PRODUCT!=value){
                    m_Internal.PRODUCT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PRODUCT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalPrice;
        [LocalData]
        public decimal? TotalPrice
        {
            get { return m_Internal.TotalPrice; }
            set
            {
                if(m_Internal.TotalPrice!=value){
                    m_Internal.TotalPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalItems;
        [LocalData]
        public int? TotalItems
        {
            get { return m_Internal.TotalItems; }
            set
            {
                if(m_Internal.TotalItems!=value){
                    m_Internal.TotalItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _OrderedItems;
        [LocalData]
        public int? OrderedItems
        {
            get { return m_Internal.OrderedItems; }
            set
            {
                if(m_Internal.OrderedItems!=value){
                    m_Internal.OrderedItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderedItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ReturnedItems;
        [LocalData]
        public int? ReturnedItems
        {
            get { return m_Internal.ReturnedItems; }
            set
            {
                if(m_Internal.ReturnedItems!=value){
                    m_Internal.ReturnedItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReturnedItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        long? _RowNum;
        [LocalData]
        public long? RowNum
        {
            get { return m_Internal.RowNum; }
            set
            {
                if(m_Internal.RowNum!=value){
                    m_Internal.RowNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RowNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<DailyPOSTopTen, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwDailyOperaTotal : IWCFDataElement
    {
        
        string Establishment { get; set; }
        
        int? TicketCount { get; set; }
        
        int TotalGuests { get; set; }
        
        decimal? MinTicket { get; set; }
        
        decimal? MaxTicket { get; set; }
        
        int SumDiscounts { get; set; }
        
        decimal? MinibarLost { get; set; }
        
        int Aminities { get; set; }
        
        decimal? TicketTotal { get; set; }
        
        int Tips { get; set; }
        
        decimal? TotalCredits { get; set; }
        
        decimal? PaymentTotal { get; set; }
        
        int? EstablishmentNumber { get; set; }
        
        DateTime? BusinessDate { get; set; }

        void Copy( IvwDailyOperaTotal _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwDailyOperaTotal : IvwDailyOperaTotal
    {
        [DataMember]
        public string Establishment { get; set; }
        [DataMember]
        public int? TicketCount { get; set; }
        [DataMember]
        public int TotalGuests { get; set; }
        [DataMember]
        public decimal? MinTicket { get; set; }
        [DataMember]
        public decimal? MaxTicket { get; set; }
        [DataMember]
        public int SumDiscounts { get; set; }
        [DataMember]
        public decimal? MinibarLost { get; set; }
        [DataMember]
        public int Aminities { get; set; }
        [DataMember]
        public decimal? TicketTotal { get; set; }
        [DataMember]
        public int Tips { get; set; }
        [DataMember]
        public decimal? TotalCredits { get; set; }
        [DataMember]
        public decimal? PaymentTotal { get; set; }
        [DataMember]
        public int? EstablishmentNumber { get; set; }
        [DataMember]
        public DateTime? BusinessDate { get; set; }

        public void Copy( IvwDailyOperaTotal _Item )
        {
             TicketCount = _Item.TicketCount;			
             TotalGuests = _Item.TotalGuests;			
             MinTicket = _Item.MinTicket;			
             MaxTicket = _Item.MaxTicket;			
             SumDiscounts = _Item.SumDiscounts;			
             MinibarLost = _Item.MinibarLost;			
             Aminities = _Item.Aminities;			
             TicketTotal = _Item.TicketTotal;			
             Tips = _Item.Tips;			
             TotalCredits = _Item.TotalCredits;			
             PaymentTotal = _Item.PaymentTotal;			
             EstablishmentNumber = _Item.EstablishmentNumber;			
             BusinessDate = _Item.BusinessDate;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDailyOperaTotal( this );
        }
    }


    /// <summary>
    /// A class which represents the vwDailyOperaTotals table in the RenAix Database.
    /// </summary>
    public partial class vwDailyOperaTotal : BaseDataObject<DatavwDailyOperaTotal>, IActiveRecord, ICallOnCreated, IvwDailyOperaTotal
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwDailyOperaTotal> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwDailyOperaTotal>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwDailyOperaTotal> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwDailyOperaTotal item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwDailyOperaTotal item=new vwDailyOperaTotal();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwDailyOperaTotal> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwDailyOperaTotal()
        {
            m_Internal = new DatavwDailyOperaTotal();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwDailyOperaTotal( bool _CallOnCreated )
        {
            m_Internal = new DatavwDailyOperaTotal();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwDailyOperaTotal(string connectionString, string providerName) 
        {
            m_Internal = new DatavwDailyOperaTotal();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwDailyOperaTotal( IvwDailyOperaTotal _Item )
        {
            m_Internal = new DatavwDailyOperaTotal();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwDailyOperaTotal( DatavwDailyOperaTotal _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwDailyOperaTotal _Item )
        {
            m_Internal.TicketCount = _Item.TicketCount;			
            m_Internal.TotalGuests = _Item.TotalGuests;			
            m_Internal.MinTicket = _Item.MinTicket;			
            m_Internal.MaxTicket = _Item.MaxTicket;			
            m_Internal.SumDiscounts = _Item.SumDiscounts;			
            m_Internal.MinibarLost = _Item.MinibarLost;			
            m_Internal.Aminities = _Item.Aminities;			
            m_Internal.TicketTotal = _Item.TicketTotal;			
            m_Internal.Tips = _Item.Tips;			
            m_Internal.TotalCredits = _Item.TotalCredits;			
            m_Internal.PaymentTotal = _Item.PaymentTotal;			
            m_Internal.EstablishmentNumber = _Item.EstablishmentNumber;			
            m_Internal.BusinessDate = _Item.BusinessDate;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDailyOperaTotal( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwDailyOperaTotal.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDailyOperaTotal>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwDailyOperaTotal(Expression<Func<vwDailyOperaTotal, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwDailyOperaTotal> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwDailyOperaTotal> _repo;
            
            if(db.TestMode)
            {
                vwDailyOperaTotal.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDailyOperaTotal>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwDailyOperaTotal> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwDailyOperaTotal SingleOrDefault(Expression<Func<vwDailyOperaTotal, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwDailyOperaTotal SingleOrDefault(Expression<Func<vwDailyOperaTotal, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwDailyOperaTotal> repo = GetRepo(connectionString,providerName);
            vwDailyOperaTotal single = repo.SingleOrDefault<vwDailyOperaTotal>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwDailyOperaTotal, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwDailyOperaTotal, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwDailyOperaTotal GetByID(string value) 
        {
            return vwDailyOperaTotal.Find( L => L.Establishment.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwDailyOperaTotal> Find(Expression<Func<vwDailyOperaTotal, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwDailyOperaTotal> Find(Expression<Func<vwDailyOperaTotal, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwDailyOperaTotal> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwDailyOperaTotal> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwDailyOperaTotal> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwDailyOperaTotal> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwDailyOperaTotal> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwDailyOperaTotal> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Establishment";
        }

        public object KeyValue()
        {
            return this.Establishment;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Establishment )
//			{
//				rc = this.Establishment.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwDailyOperaTotal)
            {
                vwDailyOperaTotal compare=(vwDailyOperaTotal)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Establishment.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Establishment";
        }

        public static string GetKeyColumn()
        {
            return "Establishment";
        }        

        public static string GetDescriptorColumn()
        {
            return "Establishment";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _Establishment;
        [SubSonicPrimaryKey]
        [LocalData]
        public string Establishment
        {
            get { return m_Internal.Establishment; }
            set
            {
                if(m_Internal.Establishment!=value){
                    m_Internal.Establishment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Establishment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TicketCount;
        [LocalData]
        public int? TicketCount
        {
            get { return m_Internal.TicketCount; }
            set
            {
                if(m_Internal.TicketCount!=value){
                    m_Internal.TicketCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _TotalGuests;
        [LocalData]
        public int TotalGuests
        {
            get { return m_Internal.TotalGuests; }
            set
            {
                if(m_Internal.TotalGuests!=value){
                    m_Internal.TotalGuests=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalGuests");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _MinTicket;
        [LocalData]
        public decimal? MinTicket
        {
            get { return m_Internal.MinTicket; }
            set
            {
                if(m_Internal.MinTicket!=value){
                    m_Internal.MinTicket=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinTicket");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _MaxTicket;
        [LocalData]
        public decimal? MaxTicket
        {
            get { return m_Internal.MaxTicket; }
            set
            {
                if(m_Internal.MaxTicket!=value){
                    m_Internal.MaxTicket=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaxTicket");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _SumDiscounts;
        [LocalData]
        public int SumDiscounts
        {
            get { return m_Internal.SumDiscounts; }
            set
            {
                if(m_Internal.SumDiscounts!=value){
                    m_Internal.SumDiscounts=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SumDiscounts");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _MinibarLost;
        [LocalData]
        public decimal? MinibarLost
        {
            get { return m_Internal.MinibarLost; }
            set
            {
                if(m_Internal.MinibarLost!=value){
                    m_Internal.MinibarLost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinibarLost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Aminities;
        [LocalData]
        public int Aminities
        {
            get { return m_Internal.Aminities; }
            set
            {
                if(m_Internal.Aminities!=value){
                    m_Internal.Aminities=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Aminities");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TicketTotal;
        [LocalData]
        public decimal? TicketTotal
        {
            get { return m_Internal.TicketTotal; }
            set
            {
                if(m_Internal.TicketTotal!=value){
                    m_Internal.TicketTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Tips;
        [LocalData]
        public int Tips
        {
            get { return m_Internal.Tips; }
            set
            {
                if(m_Internal.Tips!=value){
                    m_Internal.Tips=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tips");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalCredits;
        [LocalData]
        public decimal? TotalCredits
        {
            get { return m_Internal.TotalCredits; }
            set
            {
                if(m_Internal.TotalCredits!=value){
                    m_Internal.TotalCredits=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalCredits");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _PaymentTotal;
        [LocalData]
        public decimal? PaymentTotal
        {
            get { return m_Internal.PaymentTotal; }
            set
            {
                if(m_Internal.PaymentTotal!=value){
                    m_Internal.PaymentTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaymentTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EstablishmentNumber;
        [LocalData]
        public int? EstablishmentNumber
        {
            get { return m_Internal.EstablishmentNumber; }
            set
            {
                if(m_Internal.EstablishmentNumber!=value){
                    m_Internal.EstablishmentNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EstablishmentNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _BusinessDate;
        [LocalData]
        public DateTime? BusinessDate
        {
            get { return m_Internal.BusinessDate; }
            set
            {
                if(m_Internal.BusinessDate!=value){
                    m_Internal.BusinessDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BusinessDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwDailyOperaTotal, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwDailyPOSItemSummary : IWCFDataElement
    {
        
        DateTime BUSINESS_DATE { get; set; }
        
        string ESTABLISHMENT { get; set; }
        
        string PRODUCT { get; set; }
        
        decimal? TotalPrice { get; set; }
        
        int? TotalItems { get; set; }
        
        int? OrderedItems { get; set; }
        
        int? ReturnedItems { get; set; }
        
        string Name { get; set; }
        
        string maj_grp_seq { get; set; }

        void Copy( IvwDailyPOSItemSummary _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwDailyPOSItemSummary : IvwDailyPOSItemSummary
    {
        [DataMember]
        public DateTime BUSINESS_DATE { get; set; }
        [DataMember]
        public string ESTABLISHMENT { get; set; }
        [DataMember]
        public string PRODUCT { get; set; }
        [DataMember]
        public decimal? TotalPrice { get; set; }
        [DataMember]
        public int? TotalItems { get; set; }
        [DataMember]
        public int? OrderedItems { get; set; }
        [DataMember]
        public int? ReturnedItems { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string maj_grp_seq { get; set; }

        public void Copy( IvwDailyPOSItemSummary _Item )
        {
             ESTABLISHMENT = _Item.ESTABLISHMENT;			
             PRODUCT = _Item.PRODUCT;			
             TotalPrice = _Item.TotalPrice;			
             TotalItems = _Item.TotalItems;			
             OrderedItems = _Item.OrderedItems;			
             ReturnedItems = _Item.ReturnedItems;			
             Name = _Item.Name;			
             maj_grp_seq = _Item.maj_grp_seq;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDailyPOSItemSummary( this );
        }
    }


    /// <summary>
    /// A class which represents the vwDailyPOSItemSummary table in the RenAix Database.
    /// </summary>
    public partial class vwDailyPOSItemSummary : BaseDataObject<DatavwDailyPOSItemSummary>, IActiveRecord, ICallOnCreated, IvwDailyPOSItemSummary
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwDailyPOSItemSummary> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwDailyPOSItemSummary>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwDailyPOSItemSummary> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwDailyPOSItemSummary item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwDailyPOSItemSummary item=new vwDailyPOSItemSummary();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwDailyPOSItemSummary> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwDailyPOSItemSummary()
        {
            m_Internal = new DatavwDailyPOSItemSummary();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwDailyPOSItemSummary( bool _CallOnCreated )
        {
            m_Internal = new DatavwDailyPOSItemSummary();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwDailyPOSItemSummary(string connectionString, string providerName) 
        {
            m_Internal = new DatavwDailyPOSItemSummary();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwDailyPOSItemSummary( IvwDailyPOSItemSummary _Item )
        {
            m_Internal = new DatavwDailyPOSItemSummary();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwDailyPOSItemSummary( DatavwDailyPOSItemSummary _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwDailyPOSItemSummary _Item )
        {
            m_Internal.ESTABLISHMENT = _Item.ESTABLISHMENT;			
            m_Internal.PRODUCT = _Item.PRODUCT;			
            m_Internal.TotalPrice = _Item.TotalPrice;			
            m_Internal.TotalItems = _Item.TotalItems;			
            m_Internal.OrderedItems = _Item.OrderedItems;			
            m_Internal.ReturnedItems = _Item.ReturnedItems;			
            m_Internal.Name = _Item.Name;			
            m_Internal.maj_grp_seq = _Item.maj_grp_seq;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDailyPOSItemSummary( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwDailyPOSItemSummary.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDailyPOSItemSummary>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwDailyPOSItemSummary(Expression<Func<vwDailyPOSItemSummary, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwDailyPOSItemSummary> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwDailyPOSItemSummary> _repo;
            
            if(db.TestMode)
            {
                vwDailyPOSItemSummary.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDailyPOSItemSummary>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwDailyPOSItemSummary> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwDailyPOSItemSummary SingleOrDefault(Expression<Func<vwDailyPOSItemSummary, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwDailyPOSItemSummary SingleOrDefault(Expression<Func<vwDailyPOSItemSummary, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwDailyPOSItemSummary> repo = GetRepo(connectionString,providerName);
            vwDailyPOSItemSummary single = repo.SingleOrDefault<vwDailyPOSItemSummary>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwDailyPOSItemSummary, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwDailyPOSItemSummary, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwDailyPOSItemSummary GetByID(DateTime value) 
        {
            return vwDailyPOSItemSummary.Find( L => L.BUSINESS_DATE.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwDailyPOSItemSummary> Find(Expression<Func<vwDailyPOSItemSummary, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwDailyPOSItemSummary> Find(Expression<Func<vwDailyPOSItemSummary, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwDailyPOSItemSummary> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwDailyPOSItemSummary> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwDailyPOSItemSummary> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwDailyPOSItemSummary> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwDailyPOSItemSummary> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwDailyPOSItemSummary> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "BUSINESS_DATE";
        }

        public object KeyValue()
        {
            return this.BUSINESS_DATE;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.ESTABLISHMENT )
//			{
//				rc = this.ESTABLISHMENT.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwDailyPOSItemSummary)
            {
                vwDailyPOSItemSummary compare=(vwDailyPOSItemSummary)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.ESTABLISHMENT.ToString();
        }

        public string DescriptorColumn() 
        {
            return "ESTABLISHMENT";
        }

        public static string GetKeyColumn()
        {
            return "BUSINESS_DATE";
        }        

        public static string GetDescriptorColumn()
        {
            return "ESTABLISHMENT";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _BUSINESS_DATE;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime BUSINESS_DATE
        {
            get { return m_Internal.BUSINESS_DATE; }
            set
            {
                if(m_Internal.BUSINESS_DATE!=value){
                    m_Internal.BUSINESS_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BUSINESS_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ESTABLISHMENT;
        [LocalData]
        public string ESTABLISHMENT
        {
            get { return m_Internal.ESTABLISHMENT; }
            set
            {
                if(m_Internal.ESTABLISHMENT!=value){
                    m_Internal.ESTABLISHMENT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ESTABLISHMENT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PRODUCT;
        [LocalData]
        public string PRODUCT
        {
            get { return m_Internal.PRODUCT; }
            set
            {
                if(m_Internal.PRODUCT!=value){
                    m_Internal.PRODUCT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PRODUCT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalPrice;
        [LocalData]
        public decimal? TotalPrice
        {
            get { return m_Internal.TotalPrice; }
            set
            {
                if(m_Internal.TotalPrice!=value){
                    m_Internal.TotalPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalItems;
        [LocalData]
        public int? TotalItems
        {
            get { return m_Internal.TotalItems; }
            set
            {
                if(m_Internal.TotalItems!=value){
                    m_Internal.TotalItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _OrderedItems;
        [LocalData]
        public int? OrderedItems
        {
            get { return m_Internal.OrderedItems; }
            set
            {
                if(m_Internal.OrderedItems!=value){
                    m_Internal.OrderedItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderedItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ReturnedItems;
        [LocalData]
        public int? ReturnedItems
        {
            get { return m_Internal.ReturnedItems; }
            set
            {
                if(m_Internal.ReturnedItems!=value){
                    m_Internal.ReturnedItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReturnedItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _maj_grp_seq;
        [LocalData]
        public string maj_grp_seq
        {
            get { return m_Internal.maj_grp_seq; }
            set
            {
                if(m_Internal.maj_grp_seq!=value){
                    m_Internal.maj_grp_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="maj_grp_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwDailyPOSItemSummary, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwDailyPOSTopTen : IWCFDataElement
    {
        
        DateTime BUSINESS_DATE { get; set; }
        
        string ESTABLISHMENT { get; set; }
        
        string PRODUCT { get; set; }
        
        decimal? TotalPrice { get; set; }
        
        int? TotalItems { get; set; }
        
        int? OrderedItems { get; set; }
        
        int? ReturnedItems { get; set; }
        
        long? RowNum { get; set; }

        void Copy( IvwDailyPOSTopTen _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwDailyPOSTopTen : IvwDailyPOSTopTen
    {
        [DataMember]
        public DateTime BUSINESS_DATE { get; set; }
        [DataMember]
        public string ESTABLISHMENT { get; set; }
        [DataMember]
        public string PRODUCT { get; set; }
        [DataMember]
        public decimal? TotalPrice { get; set; }
        [DataMember]
        public int? TotalItems { get; set; }
        [DataMember]
        public int? OrderedItems { get; set; }
        [DataMember]
        public int? ReturnedItems { get; set; }
        [DataMember]
        public long? RowNum { get; set; }

        public void Copy( IvwDailyPOSTopTen _Item )
        {
             ESTABLISHMENT = _Item.ESTABLISHMENT;			
             PRODUCT = _Item.PRODUCT;			
             TotalPrice = _Item.TotalPrice;			
             TotalItems = _Item.TotalItems;			
             OrderedItems = _Item.OrderedItems;			
             ReturnedItems = _Item.ReturnedItems;			
             RowNum = _Item.RowNum;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDailyPOSTopTen( this );
        }
    }


    /// <summary>
    /// A class which represents the vwDailyPOSTopTen table in the RenAix Database.
    /// </summary>
    public partial class vwDailyPOSTopTen : BaseDataObject<DatavwDailyPOSTopTen>, IActiveRecord, ICallOnCreated, IvwDailyPOSTopTen
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwDailyPOSTopTen> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwDailyPOSTopTen>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwDailyPOSTopTen> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwDailyPOSTopTen item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwDailyPOSTopTen item=new vwDailyPOSTopTen();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwDailyPOSTopTen> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwDailyPOSTopTen()
        {
            m_Internal = new DatavwDailyPOSTopTen();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwDailyPOSTopTen( bool _CallOnCreated )
        {
            m_Internal = new DatavwDailyPOSTopTen();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwDailyPOSTopTen(string connectionString, string providerName) 
        {
            m_Internal = new DatavwDailyPOSTopTen();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwDailyPOSTopTen( IvwDailyPOSTopTen _Item )
        {
            m_Internal = new DatavwDailyPOSTopTen();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwDailyPOSTopTen( DatavwDailyPOSTopTen _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwDailyPOSTopTen _Item )
        {
            m_Internal.ESTABLISHMENT = _Item.ESTABLISHMENT;			
            m_Internal.PRODUCT = _Item.PRODUCT;			
            m_Internal.TotalPrice = _Item.TotalPrice;			
            m_Internal.TotalItems = _Item.TotalItems;			
            m_Internal.OrderedItems = _Item.OrderedItems;			
            m_Internal.ReturnedItems = _Item.ReturnedItems;			
            m_Internal.RowNum = _Item.RowNum;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDailyPOSTopTen( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwDailyPOSTopTen.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDailyPOSTopTen>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwDailyPOSTopTen(Expression<Func<vwDailyPOSTopTen, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwDailyPOSTopTen> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwDailyPOSTopTen> _repo;
            
            if(db.TestMode)
            {
                vwDailyPOSTopTen.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDailyPOSTopTen>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwDailyPOSTopTen> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwDailyPOSTopTen SingleOrDefault(Expression<Func<vwDailyPOSTopTen, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwDailyPOSTopTen SingleOrDefault(Expression<Func<vwDailyPOSTopTen, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwDailyPOSTopTen> repo = GetRepo(connectionString,providerName);
            vwDailyPOSTopTen single = repo.SingleOrDefault<vwDailyPOSTopTen>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwDailyPOSTopTen, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwDailyPOSTopTen, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwDailyPOSTopTen GetByID(DateTime value) 
        {
            return vwDailyPOSTopTen.Find( L => L.BUSINESS_DATE.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwDailyPOSTopTen> Find(Expression<Func<vwDailyPOSTopTen, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwDailyPOSTopTen> Find(Expression<Func<vwDailyPOSTopTen, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwDailyPOSTopTen> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwDailyPOSTopTen> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwDailyPOSTopTen> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwDailyPOSTopTen> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwDailyPOSTopTen> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwDailyPOSTopTen> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "BUSINESS_DATE";
        }

        public object KeyValue()
        {
            return this.BUSINESS_DATE;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.ESTABLISHMENT )
//			{
//				rc = this.ESTABLISHMENT.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwDailyPOSTopTen)
            {
                vwDailyPOSTopTen compare=(vwDailyPOSTopTen)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.ESTABLISHMENT.ToString();
        }

        public string DescriptorColumn() 
        {
            return "ESTABLISHMENT";
        }

        public static string GetKeyColumn()
        {
            return "BUSINESS_DATE";
        }        

        public static string GetDescriptorColumn()
        {
            return "ESTABLISHMENT";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _BUSINESS_DATE;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime BUSINESS_DATE
        {
            get { return m_Internal.BUSINESS_DATE; }
            set
            {
                if(m_Internal.BUSINESS_DATE!=value){
                    m_Internal.BUSINESS_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BUSINESS_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ESTABLISHMENT;
        [LocalData]
        public string ESTABLISHMENT
        {
            get { return m_Internal.ESTABLISHMENT; }
            set
            {
                if(m_Internal.ESTABLISHMENT!=value){
                    m_Internal.ESTABLISHMENT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ESTABLISHMENT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PRODUCT;
        [LocalData]
        public string PRODUCT
        {
            get { return m_Internal.PRODUCT; }
            set
            {
                if(m_Internal.PRODUCT!=value){
                    m_Internal.PRODUCT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PRODUCT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalPrice;
        [LocalData]
        public decimal? TotalPrice
        {
            get { return m_Internal.TotalPrice; }
            set
            {
                if(m_Internal.TotalPrice!=value){
                    m_Internal.TotalPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalItems;
        [LocalData]
        public int? TotalItems
        {
            get { return m_Internal.TotalItems; }
            set
            {
                if(m_Internal.TotalItems!=value){
                    m_Internal.TotalItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _OrderedItems;
        [LocalData]
        public int? OrderedItems
        {
            get { return m_Internal.OrderedItems; }
            set
            {
                if(m_Internal.OrderedItems!=value){
                    m_Internal.OrderedItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderedItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ReturnedItems;
        [LocalData]
        public int? ReturnedItems
        {
            get { return m_Internal.ReturnedItems; }
            set
            {
                if(m_Internal.ReturnedItems!=value){
                    m_Internal.ReturnedItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReturnedItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        long? _RowNum;
        [LocalData]
        public long? RowNum
        {
            get { return m_Internal.RowNum; }
            set
            {
                if(m_Internal.RowNum!=value){
                    m_Internal.RowNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RowNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwDailyPOSTopTen, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwDailyPOSTotal : IWCFDataElement
    {
        
        string Establishment { get; set; }
        
        int? TicketCount { get; set; }
        
        int? TotalGuests { get; set; }
        
        decimal? MinTicket { get; set; }
        
        decimal? MaxTicket { get; set; }
        
        decimal? SumDiscounts { get; set; }
        
        decimal? MinibarLost { get; set; }
        
        decimal? Aminities { get; set; }
        
        decimal? TicketTotal { get; set; }
        
        decimal? Tips { get; set; }
        
        decimal? TotalCredits { get; set; }
        
        decimal? PaymentTotal { get; set; }
        
        int? EstablishmentNumber { get; set; }
        
        DateTime? BusinessDate { get; set; }

        void Copy( IvwDailyPOSTotal _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwDailyPOSTotal : IvwDailyPOSTotal
    {
        [DataMember]
        public string Establishment { get; set; }
        [DataMember]
        public int? TicketCount { get; set; }
        [DataMember]
        public int? TotalGuests { get; set; }
        [DataMember]
        public decimal? MinTicket { get; set; }
        [DataMember]
        public decimal? MaxTicket { get; set; }
        [DataMember]
        public decimal? SumDiscounts { get; set; }
        [DataMember]
        public decimal? MinibarLost { get; set; }
        [DataMember]
        public decimal? Aminities { get; set; }
        [DataMember]
        public decimal? TicketTotal { get; set; }
        [DataMember]
        public decimal? Tips { get; set; }
        [DataMember]
        public decimal? TotalCredits { get; set; }
        [DataMember]
        public decimal? PaymentTotal { get; set; }
        [DataMember]
        public int? EstablishmentNumber { get; set; }
        [DataMember]
        public DateTime? BusinessDate { get; set; }

        public void Copy( IvwDailyPOSTotal _Item )
        {
             TicketCount = _Item.TicketCount;			
             TotalGuests = _Item.TotalGuests;			
             MinTicket = _Item.MinTicket;			
             MaxTicket = _Item.MaxTicket;			
             SumDiscounts = _Item.SumDiscounts;			
             MinibarLost = _Item.MinibarLost;			
             Aminities = _Item.Aminities;			
             TicketTotal = _Item.TicketTotal;			
             Tips = _Item.Tips;			
             TotalCredits = _Item.TotalCredits;			
             PaymentTotal = _Item.PaymentTotal;			
             EstablishmentNumber = _Item.EstablishmentNumber;			
             BusinessDate = _Item.BusinessDate;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDailyPOSTotal( this );
        }
    }


    /// <summary>
    /// A class which represents the vwDailyPOSTotals table in the RenAix Database.
    /// </summary>
    public partial class vwDailyPOSTotal : BaseDataObject<DatavwDailyPOSTotal>, IActiveRecord, ICallOnCreated, IvwDailyPOSTotal
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwDailyPOSTotal> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwDailyPOSTotal>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwDailyPOSTotal> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwDailyPOSTotal item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwDailyPOSTotal item=new vwDailyPOSTotal();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwDailyPOSTotal> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwDailyPOSTotal()
        {
            m_Internal = new DatavwDailyPOSTotal();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwDailyPOSTotal( bool _CallOnCreated )
        {
            m_Internal = new DatavwDailyPOSTotal();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwDailyPOSTotal(string connectionString, string providerName) 
        {
            m_Internal = new DatavwDailyPOSTotal();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwDailyPOSTotal( IvwDailyPOSTotal _Item )
        {
            m_Internal = new DatavwDailyPOSTotal();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwDailyPOSTotal( DatavwDailyPOSTotal _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwDailyPOSTotal _Item )
        {
            m_Internal.TicketCount = _Item.TicketCount;			
            m_Internal.TotalGuests = _Item.TotalGuests;			
            m_Internal.MinTicket = _Item.MinTicket;			
            m_Internal.MaxTicket = _Item.MaxTicket;			
            m_Internal.SumDiscounts = _Item.SumDiscounts;			
            m_Internal.MinibarLost = _Item.MinibarLost;			
            m_Internal.Aminities = _Item.Aminities;			
            m_Internal.TicketTotal = _Item.TicketTotal;			
            m_Internal.Tips = _Item.Tips;			
            m_Internal.TotalCredits = _Item.TotalCredits;			
            m_Internal.PaymentTotal = _Item.PaymentTotal;			
            m_Internal.EstablishmentNumber = _Item.EstablishmentNumber;			
            m_Internal.BusinessDate = _Item.BusinessDate;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDailyPOSTotal( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwDailyPOSTotal.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDailyPOSTotal>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwDailyPOSTotal(Expression<Func<vwDailyPOSTotal, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwDailyPOSTotal> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwDailyPOSTotal> _repo;
            
            if(db.TestMode)
            {
                vwDailyPOSTotal.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDailyPOSTotal>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwDailyPOSTotal> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwDailyPOSTotal SingleOrDefault(Expression<Func<vwDailyPOSTotal, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwDailyPOSTotal SingleOrDefault(Expression<Func<vwDailyPOSTotal, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwDailyPOSTotal> repo = GetRepo(connectionString,providerName);
            vwDailyPOSTotal single = repo.SingleOrDefault<vwDailyPOSTotal>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwDailyPOSTotal, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwDailyPOSTotal, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwDailyPOSTotal GetByID(string value) 
        {
            return vwDailyPOSTotal.Find( L => L.Establishment.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwDailyPOSTotal> Find(Expression<Func<vwDailyPOSTotal, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwDailyPOSTotal> Find(Expression<Func<vwDailyPOSTotal, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwDailyPOSTotal> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwDailyPOSTotal> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwDailyPOSTotal> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwDailyPOSTotal> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwDailyPOSTotal> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwDailyPOSTotal> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Establishment";
        }

        public object KeyValue()
        {
            return this.Establishment;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Establishment )
//			{
//				rc = this.Establishment.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwDailyPOSTotal)
            {
                vwDailyPOSTotal compare=(vwDailyPOSTotal)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Establishment.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Establishment";
        }

        public static string GetKeyColumn()
        {
            return "Establishment";
        }        

        public static string GetDescriptorColumn()
        {
            return "Establishment";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _Establishment;
        [SubSonicPrimaryKey]
        [LocalData]
        public string Establishment
        {
            get { return m_Internal.Establishment; }
            set
            {
                if(m_Internal.Establishment!=value){
                    m_Internal.Establishment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Establishment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TicketCount;
        [LocalData]
        public int? TicketCount
        {
            get { return m_Internal.TicketCount; }
            set
            {
                if(m_Internal.TicketCount!=value){
                    m_Internal.TicketCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalGuests;
        [LocalData]
        public int? TotalGuests
        {
            get { return m_Internal.TotalGuests; }
            set
            {
                if(m_Internal.TotalGuests!=value){
                    m_Internal.TotalGuests=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalGuests");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _MinTicket;
        [LocalData]
        public decimal? MinTicket
        {
            get { return m_Internal.MinTicket; }
            set
            {
                if(m_Internal.MinTicket!=value){
                    m_Internal.MinTicket=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinTicket");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _MaxTicket;
        [LocalData]
        public decimal? MaxTicket
        {
            get { return m_Internal.MaxTicket; }
            set
            {
                if(m_Internal.MaxTicket!=value){
                    m_Internal.MaxTicket=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaxTicket");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _SumDiscounts;
        [LocalData]
        public decimal? SumDiscounts
        {
            get { return m_Internal.SumDiscounts; }
            set
            {
                if(m_Internal.SumDiscounts!=value){
                    m_Internal.SumDiscounts=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SumDiscounts");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _MinibarLost;
        [LocalData]
        public decimal? MinibarLost
        {
            get { return m_Internal.MinibarLost; }
            set
            {
                if(m_Internal.MinibarLost!=value){
                    m_Internal.MinibarLost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinibarLost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Aminities;
        [LocalData]
        public decimal? Aminities
        {
            get { return m_Internal.Aminities; }
            set
            {
                if(m_Internal.Aminities!=value){
                    m_Internal.Aminities=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Aminities");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TicketTotal;
        [LocalData]
        public decimal? TicketTotal
        {
            get { return m_Internal.TicketTotal; }
            set
            {
                if(m_Internal.TicketTotal!=value){
                    m_Internal.TicketTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Tips;
        [LocalData]
        public decimal? Tips
        {
            get { return m_Internal.Tips; }
            set
            {
                if(m_Internal.Tips!=value){
                    m_Internal.Tips=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tips");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalCredits;
        [LocalData]
        public decimal? TotalCredits
        {
            get { return m_Internal.TotalCredits; }
            set
            {
                if(m_Internal.TotalCredits!=value){
                    m_Internal.TotalCredits=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalCredits");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _PaymentTotal;
        [LocalData]
        public decimal? PaymentTotal
        {
            get { return m_Internal.PaymentTotal; }
            set
            {
                if(m_Internal.PaymentTotal!=value){
                    m_Internal.PaymentTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaymentTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EstablishmentNumber;
        [LocalData]
        public int? EstablishmentNumber
        {
            get { return m_Internal.EstablishmentNumber; }
            set
            {
                if(m_Internal.EstablishmentNumber!=value){
                    m_Internal.EstablishmentNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EstablishmentNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _BusinessDate;
        [LocalData]
        public DateTime? BusinessDate
        {
            get { return m_Internal.BusinessDate; }
            set
            {
                if(m_Internal.BusinessDate!=value){
                    m_Internal.BusinessDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BusinessDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwDailyPOSTotal, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwDiscountedItemsByReasonPO : IWCFDataElement
    {
        
        string reason_name { get; set; }
        
        int? ItemCount { get; set; }
        
        decimal? TotalDiscount { get; set; }
        
        decimal? AverageDiscount { get; set; }
        
        DateTime? StartDate { get; set; }
        
        DateTime? EndDate { get; set; }

        void Copy( IvwDiscountedItemsByReasonPO _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwDiscountedItemsByReasonPO : IvwDiscountedItemsByReasonPO
    {
        [DataMember]
        public string reason_name { get; set; }
        [DataMember]
        public int? ItemCount { get; set; }
        [DataMember]
        public decimal? TotalDiscount { get; set; }
        [DataMember]
        public decimal? AverageDiscount { get; set; }
        [DataMember]
        public DateTime? StartDate { get; set; }
        [DataMember]
        public DateTime? EndDate { get; set; }

        public void Copy( IvwDiscountedItemsByReasonPO _Item )
        {
             ItemCount = _Item.ItemCount;			
             TotalDiscount = _Item.TotalDiscount;			
             AverageDiscount = _Item.AverageDiscount;			
             StartDate = _Item.StartDate;			
             EndDate = _Item.EndDate;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDiscountedItemsByReasonPO( this );
        }
    }


    /// <summary>
    /// A class which represents the vwDiscountedItemsByReasonPOS table in the RenAix Database.
    /// </summary>
    public partial class vwDiscountedItemsByReasonPO : BaseDataObject<DatavwDiscountedItemsByReasonPO>, IActiveRecord, ICallOnCreated, IvwDiscountedItemsByReasonPO
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwDiscountedItemsByReasonPO> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwDiscountedItemsByReasonPO>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwDiscountedItemsByReasonPO> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwDiscountedItemsByReasonPO item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwDiscountedItemsByReasonPO item=new vwDiscountedItemsByReasonPO();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwDiscountedItemsByReasonPO> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwDiscountedItemsByReasonPO()
        {
            m_Internal = new DatavwDiscountedItemsByReasonPO();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwDiscountedItemsByReasonPO( bool _CallOnCreated )
        {
            m_Internal = new DatavwDiscountedItemsByReasonPO();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwDiscountedItemsByReasonPO(string connectionString, string providerName) 
        {
            m_Internal = new DatavwDiscountedItemsByReasonPO();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwDiscountedItemsByReasonPO( IvwDiscountedItemsByReasonPO _Item )
        {
            m_Internal = new DatavwDiscountedItemsByReasonPO();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwDiscountedItemsByReasonPO( DatavwDiscountedItemsByReasonPO _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwDiscountedItemsByReasonPO _Item )
        {
            m_Internal.ItemCount = _Item.ItemCount;			
            m_Internal.TotalDiscount = _Item.TotalDiscount;			
            m_Internal.AverageDiscount = _Item.AverageDiscount;			
            m_Internal.StartDate = _Item.StartDate;			
            m_Internal.EndDate = _Item.EndDate;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDiscountedItemsByReasonPO( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwDiscountedItemsByReasonPO.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDiscountedItemsByReasonPO>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwDiscountedItemsByReasonPO(Expression<Func<vwDiscountedItemsByReasonPO, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwDiscountedItemsByReasonPO> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwDiscountedItemsByReasonPO> _repo;
            
            if(db.TestMode)
            {
                vwDiscountedItemsByReasonPO.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDiscountedItemsByReasonPO>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwDiscountedItemsByReasonPO> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwDiscountedItemsByReasonPO SingleOrDefault(Expression<Func<vwDiscountedItemsByReasonPO, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwDiscountedItemsByReasonPO SingleOrDefault(Expression<Func<vwDiscountedItemsByReasonPO, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwDiscountedItemsByReasonPO> repo = GetRepo(connectionString,providerName);
            vwDiscountedItemsByReasonPO single = repo.SingleOrDefault<vwDiscountedItemsByReasonPO>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwDiscountedItemsByReasonPO, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwDiscountedItemsByReasonPO, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwDiscountedItemsByReasonPO GetByID(string value) 
        {
            return vwDiscountedItemsByReasonPO.Find( L => L.reason_name.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwDiscountedItemsByReasonPO> Find(Expression<Func<vwDiscountedItemsByReasonPO, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwDiscountedItemsByReasonPO> Find(Expression<Func<vwDiscountedItemsByReasonPO, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwDiscountedItemsByReasonPO> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwDiscountedItemsByReasonPO> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwDiscountedItemsByReasonPO> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwDiscountedItemsByReasonPO> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwDiscountedItemsByReasonPO> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwDiscountedItemsByReasonPO> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "reason_name";
        }

        public object KeyValue()
        {
            return this.reason_name;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.reason_name )
//			{
//				rc = this.reason_name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwDiscountedItemsByReasonPO)
            {
                vwDiscountedItemsByReasonPO compare=(vwDiscountedItemsByReasonPO)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.reason_name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "reason_name";
        }

        public static string GetKeyColumn()
        {
            return "reason_name";
        }        

        public static string GetDescriptorColumn()
        {
            return "reason_name";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _reason_name;
        [SubSonicPrimaryKey]
        [LocalData]
        public string reason_name
        {
            get { return m_Internal.reason_name; }
            set
            {
                if(m_Internal.reason_name!=value){
                    m_Internal.reason_name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="reason_name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ItemCount;
        [LocalData]
        public int? ItemCount
        {
            get { return m_Internal.ItemCount; }
            set
            {
                if(m_Internal.ItemCount!=value){
                    m_Internal.ItemCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalDiscount;
        [LocalData]
        public decimal? TotalDiscount
        {
            get { return m_Internal.TotalDiscount; }
            set
            {
                if(m_Internal.TotalDiscount!=value){
                    m_Internal.TotalDiscount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalDiscount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _AverageDiscount;
        [LocalData]
        public decimal? AverageDiscount
        {
            get { return m_Internal.AverageDiscount; }
            set
            {
                if(m_Internal.AverageDiscount!=value){
                    m_Internal.AverageDiscount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AverageDiscount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _StartDate;
        [LocalData]
        public DateTime? StartDate
        {
            get { return m_Internal.StartDate; }
            set
            {
                if(m_Internal.StartDate!=value){
                    m_Internal.StartDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StartDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _EndDate;
        [LocalData]
        public DateTime? EndDate
        {
            get { return m_Internal.EndDate; }
            set
            {
                if(m_Internal.EndDate!=value){
                    m_Internal.EndDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EndDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwDiscountedItemsByReasonPO, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwOpera214Daily : IWCFDataElement
    {
        
        int RoomNo { get; set; }
        
        string RoomType { get; set; }
        
        string Name { get; set; }
        
        string ReservationPreferences { get; set; }
        
        string SpecialRequests { get; set; }
        
        int? Adults { get; set; }
        
        int? Children { get; set; }
        
        int? NumOfStays { get; set; }
        
        string VIP { get; set; }
        
        string MembershipLevel { get; set; }
        
        string RateCode { get; set; }
        
        int? EffectiveRate { get; set; }
        
        DateTime? Arrival { get; set; }
        
        DateTime? ArrivalTime { get; set; }
        
        DateTime? Departure { get; set; }
        
        string PayMtd { get; set; }
        
        string Market { get; set; }
        
        int? Nights { get; set; }
        
        string Company { get; set; }
        
        string TravelAgent { get; set; }
        
        string Source { get; set; }
        
        string Comments { get; set; }
        
        int? NoOfRooms { get; set; }
        
        string FixedCharges { get; set; }

        void Copy( IvwOpera214Daily _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwOpera214Daily : IvwOpera214Daily
    {
        [DataMember]
        public int RoomNo { get; set; }
        [DataMember]
        public string RoomType { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string ReservationPreferences { get; set; }
        [DataMember]
        public string SpecialRequests { get; set; }
        [DataMember]
        public int? Adults { get; set; }
        [DataMember]
        public int? Children { get; set; }
        [DataMember]
        public int? NumOfStays { get; set; }
        [DataMember]
        public string VIP { get; set; }
        [DataMember]
        public string MembershipLevel { get; set; }
        [DataMember]
        public string RateCode { get; set; }
        [DataMember]
        public int? EffectiveRate { get; set; }
        [DataMember]
        public DateTime? Arrival { get; set; }
        [DataMember]
        public DateTime? ArrivalTime { get; set; }
        [DataMember]
        public DateTime? Departure { get; set; }
        [DataMember]
        public string PayMtd { get; set; }
        [DataMember]
        public string Market { get; set; }
        [DataMember]
        public int? Nights { get; set; }
        [DataMember]
        public string Company { get; set; }
        [DataMember]
        public string TravelAgent { get; set; }
        [DataMember]
        public string Source { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public int? NoOfRooms { get; set; }
        [DataMember]
        public string FixedCharges { get; set; }

        public void Copy( IvwOpera214Daily _Item )
        {
             RoomType = _Item.RoomType;			
             Name = _Item.Name;			
             ReservationPreferences = _Item.ReservationPreferences;			
             SpecialRequests = _Item.SpecialRequests;			
             Adults = _Item.Adults;			
             Children = _Item.Children;			
             NumOfStays = _Item.NumOfStays;			
             VIP = _Item.VIP;			
             MembershipLevel = _Item.MembershipLevel;			
             RateCode = _Item.RateCode;			
             EffectiveRate = _Item.EffectiveRate;			
             Arrival = _Item.Arrival;			
             ArrivalTime = _Item.ArrivalTime;			
             Departure = _Item.Departure;			
             PayMtd = _Item.PayMtd;			
             Market = _Item.Market;			
             Nights = _Item.Nights;			
             Company = _Item.Company;			
             TravelAgent = _Item.TravelAgent;			
             Source = _Item.Source;			
             Comments = _Item.Comments;			
             NoOfRooms = _Item.NoOfRooms;			
             FixedCharges = _Item.FixedCharges;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwOpera214Daily( this );
        }
    }


    /// <summary>
    /// A class which represents the vwOpera214Daily table in the RenAix Database.
    /// </summary>
    public partial class vwOpera214Daily : BaseDataObject<DatavwOpera214Daily>, IActiveRecord, ICallOnCreated, IvwOpera214Daily
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwOpera214Daily> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwOpera214Daily>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwOpera214Daily> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwOpera214Daily item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwOpera214Daily item=new vwOpera214Daily();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwOpera214Daily> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwOpera214Daily()
        {
            m_Internal = new DatavwOpera214Daily();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwOpera214Daily( bool _CallOnCreated )
        {
            m_Internal = new DatavwOpera214Daily();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwOpera214Daily(string connectionString, string providerName) 
        {
            m_Internal = new DatavwOpera214Daily();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwOpera214Daily( IvwOpera214Daily _Item )
        {
            m_Internal = new DatavwOpera214Daily();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwOpera214Daily( DatavwOpera214Daily _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwOpera214Daily _Item )
        {
            m_Internal.RoomType = _Item.RoomType;			
            m_Internal.Name = _Item.Name;			
            m_Internal.ReservationPreferences = _Item.ReservationPreferences;			
            m_Internal.SpecialRequests = _Item.SpecialRequests;			
            m_Internal.Adults = _Item.Adults;			
            m_Internal.Children = _Item.Children;			
            m_Internal.NumOfStays = _Item.NumOfStays;			
            m_Internal.VIP = _Item.VIP;			
            m_Internal.MembershipLevel = _Item.MembershipLevel;			
            m_Internal.RateCode = _Item.RateCode;			
            m_Internal.EffectiveRate = _Item.EffectiveRate;			
            m_Internal.Arrival = _Item.Arrival;			
            m_Internal.ArrivalTime = _Item.ArrivalTime;			
            m_Internal.Departure = _Item.Departure;			
            m_Internal.PayMtd = _Item.PayMtd;			
            m_Internal.Market = _Item.Market;			
            m_Internal.Nights = _Item.Nights;			
            m_Internal.Company = _Item.Company;			
            m_Internal.TravelAgent = _Item.TravelAgent;			
            m_Internal.Source = _Item.Source;			
            m_Internal.Comments = _Item.Comments;			
            m_Internal.NoOfRooms = _Item.NoOfRooms;			
            m_Internal.FixedCharges = _Item.FixedCharges;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwOpera214Daily( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwOpera214Daily.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwOpera214Daily>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwOpera214Daily(Expression<Func<vwOpera214Daily, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwOpera214Daily> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwOpera214Daily> _repo;
            
            if(db.TestMode)
            {
                vwOpera214Daily.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwOpera214Daily>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwOpera214Daily> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwOpera214Daily SingleOrDefault(Expression<Func<vwOpera214Daily, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwOpera214Daily SingleOrDefault(Expression<Func<vwOpera214Daily, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwOpera214Daily> repo = GetRepo(connectionString,providerName);
            vwOpera214Daily single = repo.SingleOrDefault<vwOpera214Daily>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwOpera214Daily, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwOpera214Daily, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwOpera214Daily GetByID(int value) 
        {
            return vwOpera214Daily.Find( L => L.RoomNo.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwOpera214Daily> Find(Expression<Func<vwOpera214Daily, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwOpera214Daily> Find(Expression<Func<vwOpera214Daily, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwOpera214Daily> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwOpera214Daily> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwOpera214Daily> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwOpera214Daily> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwOpera214Daily> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwOpera214Daily> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "RoomNo";
        }

        public object KeyValue()
        {
            return this.RoomNo;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.RoomType )
//			{
//				rc = this.RoomType.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwOpera214Daily)
            {
                vwOpera214Daily compare=(vwOpera214Daily)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public override int GetHashCode() 
        {
            return this.RoomNo;
        }


        public string DescriptorValue()
        {
            return this.RoomType.ToString();
        }

        public string DescriptorColumn() 
        {
            return "RoomType";
        }

        public static string GetKeyColumn()
        {
            return "RoomNo";
        }        

        public static string GetDescriptorColumn()
        {
            return "RoomType";
        }
        
        #region ' Foreign Keys '
        #endregion



//        int? _RoomNo;
        [SubSonicPrimaryKey]
        [LocalData]
        public int RoomNo
        {
            get { return m_Internal.RoomNo; }
            set
            {
                if(m_Internal.RoomNo!=value){
                    m_Internal.RoomNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoomNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RoomType;
        [LocalData]
        public string RoomType
        {
            get { return m_Internal.RoomType; }
            set
            {
                if(m_Internal.RoomType!=value){
                    m_Internal.RoomType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoomType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ReservationPreferences;
        [LocalData]
        public string ReservationPreferences
        {
            get { return m_Internal.ReservationPreferences; }
            set
            {
                if(m_Internal.ReservationPreferences!=value){
                    m_Internal.ReservationPreferences=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReservationPreferences");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SpecialRequests;
        [LocalData]
        public string SpecialRequests
        {
            get { return m_Internal.SpecialRequests; }
            set
            {
                if(m_Internal.SpecialRequests!=value){
                    m_Internal.SpecialRequests=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SpecialRequests");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Adults;
        [LocalData]
        public int? Adults
        {
            get { return m_Internal.Adults; }
            set
            {
                if(m_Internal.Adults!=value){
                    m_Internal.Adults=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Adults");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Children;
        [LocalData]
        public int? Children
        {
            get { return m_Internal.Children; }
            set
            {
                if(m_Internal.Children!=value){
                    m_Internal.Children=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Children");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _NumOfStays;
        [LocalData]
        public int? NumOfStays
        {
            get { return m_Internal.NumOfStays; }
            set
            {
                if(m_Internal.NumOfStays!=value){
                    m_Internal.NumOfStays=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NumOfStays");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _VIP;
        [LocalData]
        public string VIP
        {
            get { return m_Internal.VIP; }
            set
            {
                if(m_Internal.VIP!=value){
                    m_Internal.VIP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VIP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _MembershipLevel;
        [LocalData]
        public string MembershipLevel
        {
            get { return m_Internal.MembershipLevel; }
            set
            {
                if(m_Internal.MembershipLevel!=value){
                    m_Internal.MembershipLevel=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MembershipLevel");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RateCode;
        [LocalData]
        public string RateCode
        {
            get { return m_Internal.RateCode; }
            set
            {
                if(m_Internal.RateCode!=value){
                    m_Internal.RateCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RateCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EffectiveRate;
        [LocalData]
        public int? EffectiveRate
        {
            get { return m_Internal.EffectiveRate; }
            set
            {
                if(m_Internal.EffectiveRate!=value){
                    m_Internal.EffectiveRate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EffectiveRate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _Arrival;
        [LocalData]
        public DateTime? Arrival
        {
            get { return m_Internal.Arrival; }
            set
            {
                if(m_Internal.Arrival!=value){
                    m_Internal.Arrival=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Arrival");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _ArrivalTime;
        [LocalData]
        public DateTime? ArrivalTime
        {
            get { return m_Internal.ArrivalTime; }
            set
            {
                if(m_Internal.ArrivalTime!=value){
                    m_Internal.ArrivalTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ArrivalTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _Departure;
        [LocalData]
        public DateTime? Departure
        {
            get { return m_Internal.Departure; }
            set
            {
                if(m_Internal.Departure!=value){
                    m_Internal.Departure=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Departure");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PayMtd;
        [LocalData]
        public string PayMtd
        {
            get { return m_Internal.PayMtd; }
            set
            {
                if(m_Internal.PayMtd!=value){
                    m_Internal.PayMtd=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PayMtd");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Market;
        [LocalData]
        public string Market
        {
            get { return m_Internal.Market; }
            set
            {
                if(m_Internal.Market!=value){
                    m_Internal.Market=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Market");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Nights;
        [LocalData]
        public int? Nights
        {
            get { return m_Internal.Nights; }
            set
            {
                if(m_Internal.Nights!=value){
                    m_Internal.Nights=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Nights");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Company;
        [LocalData]
        public string Company
        {
            get { return m_Internal.Company; }
            set
            {
                if(m_Internal.Company!=value){
                    m_Internal.Company=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Company");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TravelAgent;
        [LocalData]
        public string TravelAgent
        {
            get { return m_Internal.TravelAgent; }
            set
            {
                if(m_Internal.TravelAgent!=value){
                    m_Internal.TravelAgent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TravelAgent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Source;
        [LocalData]
        public string Source
        {
            get { return m_Internal.Source; }
            set
            {
                if(m_Internal.Source!=value){
                    m_Internal.Source=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Source");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Comments;
        [LocalData]
        public string Comments
        {
            get { return m_Internal.Comments; }
            set
            {
                if(m_Internal.Comments!=value){
                    m_Internal.Comments=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comments");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _NoOfRooms;
        [LocalData]
        public int? NoOfRooms
        {
            get { return m_Internal.NoOfRooms; }
            set
            {
                if(m_Internal.NoOfRooms!=value){
                    m_Internal.NoOfRooms=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NoOfRooms");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _FixedCharges;
        [LocalData]
        public string FixedCharges
        {
            get { return m_Internal.FixedCharges; }
            set
            {
                if(m_Internal.FixedCharges!=value){
                    m_Internal.FixedCharges=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FixedCharges");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwOpera214Daily, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwPackageLoss : IWCFDataElement
    {
        
        DateTime BUSINESS_DATE { get; set; }
        
        DateTime? BUSINESS_MONTH { get; set; }
        
        int? ROOM { get; set; }
        
        string ROOM_CLASS { get; set; }
        
        decimal? CASHIER_DEBIT { get; set; }
        
        decimal? ChargedPrice { get; set; }
        
        decimal? ListPrice { get; set; }
        
        string Type { get; set; }
        
        decimal? GuestCount { get; set; }

        void Copy( IvwPackageLoss _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwPackageLoss : IvwPackageLoss
    {
        [DataMember]
        public DateTime BUSINESS_DATE { get; set; }
        [DataMember]
        public DateTime? BUSINESS_MONTH { get; set; }
        [DataMember]
        public int? ROOM { get; set; }
        [DataMember]
        public string ROOM_CLASS { get; set; }
        [DataMember]
        public decimal? CASHIER_DEBIT { get; set; }
        [DataMember]
        public decimal? ChargedPrice { get; set; }
        [DataMember]
        public decimal? ListPrice { get; set; }
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public decimal? GuestCount { get; set; }

        public void Copy( IvwPackageLoss _Item )
        {
             BUSINESS_MONTH = _Item.BUSINESS_MONTH;			
             ROOM = _Item.ROOM;			
             ROOM_CLASS = _Item.ROOM_CLASS;			
             CASHIER_DEBIT = _Item.CASHIER_DEBIT;			
             ChargedPrice = _Item.ChargedPrice;			
             ListPrice = _Item.ListPrice;			
             Type = _Item.Type;			
             GuestCount = _Item.GuestCount;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPackageLoss( this );
        }
    }


    /// <summary>
    /// A class which represents the vwPackageLoss table in the RenAix Database.
    /// </summary>
    public partial class vwPackageLoss : BaseDataObject<DatavwPackageLoss>, IActiveRecord, ICallOnCreated, IvwPackageLoss
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwPackageLoss> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwPackageLoss>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwPackageLoss> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwPackageLoss item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwPackageLoss item=new vwPackageLoss();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwPackageLoss> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwPackageLoss()
        {
            m_Internal = new DatavwPackageLoss();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwPackageLoss( bool _CallOnCreated )
        {
            m_Internal = new DatavwPackageLoss();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwPackageLoss(string connectionString, string providerName) 
        {
            m_Internal = new DatavwPackageLoss();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwPackageLoss( IvwPackageLoss _Item )
        {
            m_Internal = new DatavwPackageLoss();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwPackageLoss( DatavwPackageLoss _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwPackageLoss _Item )
        {
            m_Internal.BUSINESS_MONTH = _Item.BUSINESS_MONTH;			
            m_Internal.ROOM = _Item.ROOM;			
            m_Internal.ROOM_CLASS = _Item.ROOM_CLASS;			
            m_Internal.CASHIER_DEBIT = _Item.CASHIER_DEBIT;			
            m_Internal.ChargedPrice = _Item.ChargedPrice;			
            m_Internal.ListPrice = _Item.ListPrice;			
            m_Internal.Type = _Item.Type;			
            m_Internal.GuestCount = _Item.GuestCount;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPackageLoss( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwPackageLoss.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPackageLoss>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwPackageLoss(Expression<Func<vwPackageLoss, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwPackageLoss> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwPackageLoss> _repo;
            
            if(db.TestMode)
            {
                vwPackageLoss.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPackageLoss>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwPackageLoss> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwPackageLoss SingleOrDefault(Expression<Func<vwPackageLoss, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwPackageLoss SingleOrDefault(Expression<Func<vwPackageLoss, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwPackageLoss> repo = GetRepo(connectionString,providerName);
            vwPackageLoss single = repo.SingleOrDefault<vwPackageLoss>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwPackageLoss, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwPackageLoss, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwPackageLoss GetByID(DateTime value) 
        {
            return vwPackageLoss.Find( L => L.BUSINESS_DATE.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwPackageLoss> Find(Expression<Func<vwPackageLoss, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwPackageLoss> Find(Expression<Func<vwPackageLoss, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwPackageLoss> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwPackageLoss> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwPackageLoss> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwPackageLoss> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwPackageLoss> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwPackageLoss> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "BUSINESS_DATE";
        }

        public object KeyValue()
        {
            return this.BUSINESS_DATE;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.ROOM_CLASS )
//			{
//				rc = this.ROOM_CLASS.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwPackageLoss)
            {
                vwPackageLoss compare=(vwPackageLoss)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.ROOM_CLASS.ToString();
        }

        public string DescriptorColumn() 
        {
            return "ROOM_CLASS";
        }

        public static string GetKeyColumn()
        {
            return "BUSINESS_DATE";
        }        

        public static string GetDescriptorColumn()
        {
            return "ROOM_CLASS";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _BUSINESS_DATE;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime BUSINESS_DATE
        {
            get { return m_Internal.BUSINESS_DATE; }
            set
            {
                if(m_Internal.BUSINESS_DATE!=value){
                    m_Internal.BUSINESS_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BUSINESS_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _BUSINESS_MONTH;
        [LocalData]
        public DateTime? BUSINESS_MONTH
        {
            get { return m_Internal.BUSINESS_MONTH; }
            set
            {
                if(m_Internal.BUSINESS_MONTH!=value){
                    m_Internal.BUSINESS_MONTH=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BUSINESS_MONTH");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ROOM;
        [LocalData]
        public int? ROOM
        {
            get { return m_Internal.ROOM; }
            set
            {
                if(m_Internal.ROOM!=value){
                    m_Internal.ROOM=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ROOM");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ROOM_CLASS;
        [LocalData]
        public string ROOM_CLASS
        {
            get { return m_Internal.ROOM_CLASS; }
            set
            {
                if(m_Internal.ROOM_CLASS!=value){
                    m_Internal.ROOM_CLASS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ROOM_CLASS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _CASHIER_DEBIT;
        [LocalData]
        public decimal? CASHIER_DEBIT
        {
            get { return m_Internal.CASHIER_DEBIT; }
            set
            {
                if(m_Internal.CASHIER_DEBIT!=value){
                    m_Internal.CASHIER_DEBIT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CASHIER_DEBIT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _ChargedPrice;
        [LocalData]
        public decimal? ChargedPrice
        {
            get { return m_Internal.ChargedPrice; }
            set
            {
                if(m_Internal.ChargedPrice!=value){
                    m_Internal.ChargedPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ChargedPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _ListPrice;
        [LocalData]
        public decimal? ListPrice
        {
            get { return m_Internal.ListPrice; }
            set
            {
                if(m_Internal.ListPrice!=value){
                    m_Internal.ListPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ListPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Type;
        [LocalData]
        public string Type
        {
            get { return m_Internal.Type; }
            set
            {
                if(m_Internal.Type!=value){
                    m_Internal.Type=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Type");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _GuestCount;
        [LocalData]
        public decimal? GuestCount
        {
            get { return m_Internal.GuestCount; }
            set
            {
                if(m_Internal.GuestCount!=value){
                    m_Internal.GuestCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwPackageLoss, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwPackageLossByParsedDatum : IWCFDataElement
    {
        
        DateTime BUSINESS_MONTH { get; set; }
        
        decimal? Loss { get; set; }
        
        decimal? Profit { get; set; }
        
        decimal? Potental { get; set; }
        
        decimal? TotalCount { get; set; }
        
        decimal? Difference { get; set; }
        
        int? SixEuroDiscount { get; set; }
        
        int? OtherDiscount { get; set; }
        
        int? TotalComp { get; set; }
        
        int? RowCounts { get; set; }
        
        decimal? GuestCount { get; set; }

        void Copy( IvwPackageLossByParsedDatum _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwPackageLossByParsedDatum : IvwPackageLossByParsedDatum
    {
        [DataMember]
        public DateTime BUSINESS_MONTH { get; set; }
        [DataMember]
        public decimal? Loss { get; set; }
        [DataMember]
        public decimal? Profit { get; set; }
        [DataMember]
        public decimal? Potental { get; set; }
        [DataMember]
        public decimal? TotalCount { get; set; }
        [DataMember]
        public decimal? Difference { get; set; }
        [DataMember]
        public int? SixEuroDiscount { get; set; }
        [DataMember]
        public int? OtherDiscount { get; set; }
        [DataMember]
        public int? TotalComp { get; set; }
        [DataMember]
        public int? RowCounts { get; set; }
        [DataMember]
        public decimal? GuestCount { get; set; }

        public void Copy( IvwPackageLossByParsedDatum _Item )
        {
             Loss = _Item.Loss;			
             Profit = _Item.Profit;			
             Potental = _Item.Potental;			
             TotalCount = _Item.TotalCount;			
             Difference = _Item.Difference;			
             SixEuroDiscount = _Item.SixEuroDiscount;			
             OtherDiscount = _Item.OtherDiscount;			
             TotalComp = _Item.TotalComp;			
             RowCounts = _Item.RowCounts;			
             GuestCount = _Item.GuestCount;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPackageLossByParsedDatum( this );
        }
    }


    /// <summary>
    /// A class which represents the vwPackageLossByParsedData table in the RenAix Database.
    /// </summary>
    public partial class vwPackageLossByParsedDatum : BaseDataObject<DatavwPackageLossByParsedDatum>, IActiveRecord, ICallOnCreated, IvwPackageLossByParsedDatum
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwPackageLossByParsedDatum> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwPackageLossByParsedDatum>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwPackageLossByParsedDatum> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwPackageLossByParsedDatum item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwPackageLossByParsedDatum item=new vwPackageLossByParsedDatum();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwPackageLossByParsedDatum> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwPackageLossByParsedDatum()
        {
            m_Internal = new DatavwPackageLossByParsedDatum();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwPackageLossByParsedDatum( bool _CallOnCreated )
        {
            m_Internal = new DatavwPackageLossByParsedDatum();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwPackageLossByParsedDatum(string connectionString, string providerName) 
        {
            m_Internal = new DatavwPackageLossByParsedDatum();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwPackageLossByParsedDatum( IvwPackageLossByParsedDatum _Item )
        {
            m_Internal = new DatavwPackageLossByParsedDatum();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwPackageLossByParsedDatum( DatavwPackageLossByParsedDatum _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwPackageLossByParsedDatum _Item )
        {
            m_Internal.Loss = _Item.Loss;			
            m_Internal.Profit = _Item.Profit;			
            m_Internal.Potental = _Item.Potental;			
            m_Internal.TotalCount = _Item.TotalCount;			
            m_Internal.Difference = _Item.Difference;			
            m_Internal.SixEuroDiscount = _Item.SixEuroDiscount;			
            m_Internal.OtherDiscount = _Item.OtherDiscount;			
            m_Internal.TotalComp = _Item.TotalComp;			
            m_Internal.RowCounts = _Item.RowCounts;			
            m_Internal.GuestCount = _Item.GuestCount;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPackageLossByParsedDatum( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwPackageLossByParsedDatum.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPackageLossByParsedDatum>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwPackageLossByParsedDatum(Expression<Func<vwPackageLossByParsedDatum, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwPackageLossByParsedDatum> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwPackageLossByParsedDatum> _repo;
            
            if(db.TestMode)
            {
                vwPackageLossByParsedDatum.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPackageLossByParsedDatum>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwPackageLossByParsedDatum> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwPackageLossByParsedDatum SingleOrDefault(Expression<Func<vwPackageLossByParsedDatum, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwPackageLossByParsedDatum SingleOrDefault(Expression<Func<vwPackageLossByParsedDatum, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwPackageLossByParsedDatum> repo = GetRepo(connectionString,providerName);
            vwPackageLossByParsedDatum single = repo.SingleOrDefault<vwPackageLossByParsedDatum>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwPackageLossByParsedDatum, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwPackageLossByParsedDatum, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwPackageLossByParsedDatum GetByID(DateTime value) 
        {
            return vwPackageLossByParsedDatum.Find( L => L.BUSINESS_MONTH.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwPackageLossByParsedDatum> Find(Expression<Func<vwPackageLossByParsedDatum, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwPackageLossByParsedDatum> Find(Expression<Func<vwPackageLossByParsedDatum, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwPackageLossByParsedDatum> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwPackageLossByParsedDatum> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwPackageLossByParsedDatum> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwPackageLossByParsedDatum> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwPackageLossByParsedDatum> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwPackageLossByParsedDatum> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "BUSINESS_MONTH";
        }

        public object KeyValue()
        {
            return this.BUSINESS_MONTH;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Loss )
//			{
//				rc = this.Loss.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwPackageLossByParsedDatum)
            {
                vwPackageLossByParsedDatum compare=(vwPackageLossByParsedDatum)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Loss.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Loss";
        }

        public static string GetKeyColumn()
        {
            return "BUSINESS_MONTH";
        }        

        public static string GetDescriptorColumn()
        {
            return "Loss";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _BUSINESS_MONTH;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime BUSINESS_MONTH
        {
            get { return m_Internal.BUSINESS_MONTH; }
            set
            {
                if(m_Internal.BUSINESS_MONTH!=value){
                    m_Internal.BUSINESS_MONTH=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BUSINESS_MONTH");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Loss;
        [LocalData]
        public decimal? Loss
        {
            get { return m_Internal.Loss; }
            set
            {
                if(m_Internal.Loss!=value){
                    m_Internal.Loss=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Loss");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Profit;
        [LocalData]
        public decimal? Profit
        {
            get { return m_Internal.Profit; }
            set
            {
                if(m_Internal.Profit!=value){
                    m_Internal.Profit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Profit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Potental;
        [LocalData]
        public decimal? Potental
        {
            get { return m_Internal.Potental; }
            set
            {
                if(m_Internal.Potental!=value){
                    m_Internal.Potental=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Potental");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalCount;
        [LocalData]
        public decimal? TotalCount
        {
            get { return m_Internal.TotalCount; }
            set
            {
                if(m_Internal.TotalCount!=value){
                    m_Internal.TotalCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Difference;
        [LocalData]
        public decimal? Difference
        {
            get { return m_Internal.Difference; }
            set
            {
                if(m_Internal.Difference!=value){
                    m_Internal.Difference=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Difference");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _SixEuroDiscount;
        [LocalData]
        public int? SixEuroDiscount
        {
            get { return m_Internal.SixEuroDiscount; }
            set
            {
                if(m_Internal.SixEuroDiscount!=value){
                    m_Internal.SixEuroDiscount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SixEuroDiscount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _OtherDiscount;
        [LocalData]
        public int? OtherDiscount
        {
            get { return m_Internal.OtherDiscount; }
            set
            {
                if(m_Internal.OtherDiscount!=value){
                    m_Internal.OtherDiscount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OtherDiscount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalComp;
        [LocalData]
        public int? TotalComp
        {
            get { return m_Internal.TotalComp; }
            set
            {
                if(m_Internal.TotalComp!=value){
                    m_Internal.TotalComp=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalComp");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _RowCounts;
        [LocalData]
        public int? RowCounts
        {
            get { return m_Internal.RowCounts; }
            set
            {
                if(m_Internal.RowCounts!=value){
                    m_Internal.RowCounts=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RowCounts");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _GuestCount;
        [LocalData]
        public decimal? GuestCount
        {
            get { return m_Internal.GuestCount; }
            set
            {
                if(m_Internal.GuestCount!=value){
                    m_Internal.GuestCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwPackageLossByParsedDatum, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwPercentItemsReturned : IWCFDataElement
    {
        
        string Establishment { get; set; }
        
        string Product { get; set; }
        
        int? TotalReturnedItems { get; set; }
        
        int? TotalOrderedItems { get; set; }
        
        int? TotalItems { get; set; }
        
        decimal? PercentReturned { get; set; }

        void Copy( IvwPercentItemsReturned _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwPercentItemsReturned : IvwPercentItemsReturned
    {
        [DataMember]
        public string Establishment { get; set; }
        [DataMember]
        public string Product { get; set; }
        [DataMember]
        public int? TotalReturnedItems { get; set; }
        [DataMember]
        public int? TotalOrderedItems { get; set; }
        [DataMember]
        public int? TotalItems { get; set; }
        [DataMember]
        public decimal? PercentReturned { get; set; }

        public void Copy( IvwPercentItemsReturned _Item )
        {
             Product = _Item.Product;			
             TotalReturnedItems = _Item.TotalReturnedItems;			
             TotalOrderedItems = _Item.TotalOrderedItems;			
             TotalItems = _Item.TotalItems;			
             PercentReturned = _Item.PercentReturned;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPercentItemsReturned( this );
        }
    }


    /// <summary>
    /// A class which represents the vwPercentItemsReturned table in the RenAix Database.
    /// </summary>
    public partial class vwPercentItemsReturned : BaseDataObject<DatavwPercentItemsReturned>, IActiveRecord, ICallOnCreated, IvwPercentItemsReturned
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwPercentItemsReturned> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwPercentItemsReturned>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwPercentItemsReturned> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwPercentItemsReturned item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwPercentItemsReturned item=new vwPercentItemsReturned();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwPercentItemsReturned> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwPercentItemsReturned()
        {
            m_Internal = new DatavwPercentItemsReturned();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwPercentItemsReturned( bool _CallOnCreated )
        {
            m_Internal = new DatavwPercentItemsReturned();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwPercentItemsReturned(string connectionString, string providerName) 
        {
            m_Internal = new DatavwPercentItemsReturned();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwPercentItemsReturned( IvwPercentItemsReturned _Item )
        {
            m_Internal = new DatavwPercentItemsReturned();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwPercentItemsReturned( DatavwPercentItemsReturned _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwPercentItemsReturned _Item )
        {
            m_Internal.Product = _Item.Product;			
            m_Internal.TotalReturnedItems = _Item.TotalReturnedItems;			
            m_Internal.TotalOrderedItems = _Item.TotalOrderedItems;			
            m_Internal.TotalItems = _Item.TotalItems;			
            m_Internal.PercentReturned = _Item.PercentReturned;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPercentItemsReturned( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwPercentItemsReturned.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPercentItemsReturned>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwPercentItemsReturned(Expression<Func<vwPercentItemsReturned, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwPercentItemsReturned> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwPercentItemsReturned> _repo;
            
            if(db.TestMode)
            {
                vwPercentItemsReturned.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPercentItemsReturned>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwPercentItemsReturned> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwPercentItemsReturned SingleOrDefault(Expression<Func<vwPercentItemsReturned, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwPercentItemsReturned SingleOrDefault(Expression<Func<vwPercentItemsReturned, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwPercentItemsReturned> repo = GetRepo(connectionString,providerName);
            vwPercentItemsReturned single = repo.SingleOrDefault<vwPercentItemsReturned>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwPercentItemsReturned, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwPercentItemsReturned, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwPercentItemsReturned GetByID(string value) 
        {
            return vwPercentItemsReturned.Find( L => L.Establishment.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwPercentItemsReturned> Find(Expression<Func<vwPercentItemsReturned, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwPercentItemsReturned> Find(Expression<Func<vwPercentItemsReturned, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwPercentItemsReturned> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwPercentItemsReturned> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwPercentItemsReturned> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwPercentItemsReturned> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwPercentItemsReturned> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwPercentItemsReturned> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Establishment";
        }

        public object KeyValue()
        {
            return this.Establishment;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Establishment )
//			{
//				rc = this.Establishment.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwPercentItemsReturned)
            {
                vwPercentItemsReturned compare=(vwPercentItemsReturned)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Establishment.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Establishment";
        }

        public static string GetKeyColumn()
        {
            return "Establishment";
        }        

        public static string GetDescriptorColumn()
        {
            return "Establishment";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _Establishment;
        [SubSonicPrimaryKey]
        [LocalData]
        public string Establishment
        {
            get { return m_Internal.Establishment; }
            set
            {
                if(m_Internal.Establishment!=value){
                    m_Internal.Establishment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Establishment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Product;
        [LocalData]
        public string Product
        {
            get { return m_Internal.Product; }
            set
            {
                if(m_Internal.Product!=value){
                    m_Internal.Product=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Product");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalReturnedItems;
        [LocalData]
        public int? TotalReturnedItems
        {
            get { return m_Internal.TotalReturnedItems; }
            set
            {
                if(m_Internal.TotalReturnedItems!=value){
                    m_Internal.TotalReturnedItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalReturnedItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalOrderedItems;
        [LocalData]
        public int? TotalOrderedItems
        {
            get { return m_Internal.TotalOrderedItems; }
            set
            {
                if(m_Internal.TotalOrderedItems!=value){
                    m_Internal.TotalOrderedItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalOrderedItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalItems;
        [LocalData]
        public int? TotalItems
        {
            get { return m_Internal.TotalItems; }
            set
            {
                if(m_Internal.TotalItems!=value){
                    m_Internal.TotalItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _PercentReturned;
        [LocalData]
        public decimal? PercentReturned
        {
            get { return m_Internal.PercentReturned; }
            set
            {
                if(m_Internal.PercentReturned!=value){
                    m_Internal.PercentReturned=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PercentReturned");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwPercentItemsReturned, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwPercentItemsReturnedMonthly : IWCFDataElement
    {
        
        DateTime BusinessMonth { get; set; }
        
        string Establishment { get; set; }
        
        string Product { get; set; }
        
        int? TotalReturnedItems { get; set; }
        
        int? TotalOrderedItems { get; set; }
        
        int? TotalItems { get; set; }
        
        decimal? PercentReturned { get; set; }

        void Copy( IvwPercentItemsReturnedMonthly _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwPercentItemsReturnedMonthly : IvwPercentItemsReturnedMonthly
    {
        [DataMember]
        public DateTime BusinessMonth { get; set; }
        [DataMember]
        public string Establishment { get; set; }
        [DataMember]
        public string Product { get; set; }
        [DataMember]
        public int? TotalReturnedItems { get; set; }
        [DataMember]
        public int? TotalOrderedItems { get; set; }
        [DataMember]
        public int? TotalItems { get; set; }
        [DataMember]
        public decimal? PercentReturned { get; set; }

        public void Copy( IvwPercentItemsReturnedMonthly _Item )
        {
             Establishment = _Item.Establishment;			
             Product = _Item.Product;			
             TotalReturnedItems = _Item.TotalReturnedItems;			
             TotalOrderedItems = _Item.TotalOrderedItems;			
             TotalItems = _Item.TotalItems;			
             PercentReturned = _Item.PercentReturned;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPercentItemsReturnedMonthly( this );
        }
    }


    /// <summary>
    /// A class which represents the vwPercentItemsReturnedMonthly table in the RenAix Database.
    /// </summary>
    public partial class vwPercentItemsReturnedMonthly : BaseDataObject<DatavwPercentItemsReturnedMonthly>, IActiveRecord, ICallOnCreated, IvwPercentItemsReturnedMonthly
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwPercentItemsReturnedMonthly> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwPercentItemsReturnedMonthly>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwPercentItemsReturnedMonthly> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwPercentItemsReturnedMonthly item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwPercentItemsReturnedMonthly item=new vwPercentItemsReturnedMonthly();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwPercentItemsReturnedMonthly> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwPercentItemsReturnedMonthly()
        {
            m_Internal = new DatavwPercentItemsReturnedMonthly();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwPercentItemsReturnedMonthly( bool _CallOnCreated )
        {
            m_Internal = new DatavwPercentItemsReturnedMonthly();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwPercentItemsReturnedMonthly(string connectionString, string providerName) 
        {
            m_Internal = new DatavwPercentItemsReturnedMonthly();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwPercentItemsReturnedMonthly( IvwPercentItemsReturnedMonthly _Item )
        {
            m_Internal = new DatavwPercentItemsReturnedMonthly();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwPercentItemsReturnedMonthly( DatavwPercentItemsReturnedMonthly _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwPercentItemsReturnedMonthly _Item )
        {
            m_Internal.Establishment = _Item.Establishment;			
            m_Internal.Product = _Item.Product;			
            m_Internal.TotalReturnedItems = _Item.TotalReturnedItems;			
            m_Internal.TotalOrderedItems = _Item.TotalOrderedItems;			
            m_Internal.TotalItems = _Item.TotalItems;			
            m_Internal.PercentReturned = _Item.PercentReturned;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPercentItemsReturnedMonthly( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwPercentItemsReturnedMonthly.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPercentItemsReturnedMonthly>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwPercentItemsReturnedMonthly(Expression<Func<vwPercentItemsReturnedMonthly, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwPercentItemsReturnedMonthly> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwPercentItemsReturnedMonthly> _repo;
            
            if(db.TestMode)
            {
                vwPercentItemsReturnedMonthly.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPercentItemsReturnedMonthly>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwPercentItemsReturnedMonthly> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwPercentItemsReturnedMonthly SingleOrDefault(Expression<Func<vwPercentItemsReturnedMonthly, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwPercentItemsReturnedMonthly SingleOrDefault(Expression<Func<vwPercentItemsReturnedMonthly, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwPercentItemsReturnedMonthly> repo = GetRepo(connectionString,providerName);
            vwPercentItemsReturnedMonthly single = repo.SingleOrDefault<vwPercentItemsReturnedMonthly>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwPercentItemsReturnedMonthly, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwPercentItemsReturnedMonthly, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwPercentItemsReturnedMonthly GetByID(DateTime value) 
        {
            return vwPercentItemsReturnedMonthly.Find( L => L.BusinessMonth.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwPercentItemsReturnedMonthly> Find(Expression<Func<vwPercentItemsReturnedMonthly, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwPercentItemsReturnedMonthly> Find(Expression<Func<vwPercentItemsReturnedMonthly, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwPercentItemsReturnedMonthly> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwPercentItemsReturnedMonthly> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwPercentItemsReturnedMonthly> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwPercentItemsReturnedMonthly> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwPercentItemsReturnedMonthly> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwPercentItemsReturnedMonthly> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "BusinessMonth";
        }

        public object KeyValue()
        {
            return this.BusinessMonth;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Establishment )
//			{
//				rc = this.Establishment.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwPercentItemsReturnedMonthly)
            {
                vwPercentItemsReturnedMonthly compare=(vwPercentItemsReturnedMonthly)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Establishment.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Establishment";
        }

        public static string GetKeyColumn()
        {
            return "BusinessMonth";
        }        

        public static string GetDescriptorColumn()
        {
            return "Establishment";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _BusinessMonth;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime BusinessMonth
        {
            get { return m_Internal.BusinessMonth; }
            set
            {
                if(m_Internal.BusinessMonth!=value){
                    m_Internal.BusinessMonth=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BusinessMonth");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Establishment;
        [LocalData]
        public string Establishment
        {
            get { return m_Internal.Establishment; }
            set
            {
                if(m_Internal.Establishment!=value){
                    m_Internal.Establishment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Establishment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Product;
        [LocalData]
        public string Product
        {
            get { return m_Internal.Product; }
            set
            {
                if(m_Internal.Product!=value){
                    m_Internal.Product=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Product");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalReturnedItems;
        [LocalData]
        public int? TotalReturnedItems
        {
            get { return m_Internal.TotalReturnedItems; }
            set
            {
                if(m_Internal.TotalReturnedItems!=value){
                    m_Internal.TotalReturnedItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalReturnedItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalOrderedItems;
        [LocalData]
        public int? TotalOrderedItems
        {
            get { return m_Internal.TotalOrderedItems; }
            set
            {
                if(m_Internal.TotalOrderedItems!=value){
                    m_Internal.TotalOrderedItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalOrderedItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalItems;
        [LocalData]
        public int? TotalItems
        {
            get { return m_Internal.TotalItems; }
            set
            {
                if(m_Internal.TotalItems!=value){
                    m_Internal.TotalItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _PercentReturned;
        [LocalData]
        public decimal? PercentReturned
        {
            get { return m_Internal.PercentReturned; }
            set
            {
                if(m_Internal.PercentReturned!=value){
                    m_Internal.PercentReturned=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PercentReturned");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwPercentItemsReturnedMonthly, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwPOSItemSummary : IWCFDataElement
    {
        
        DateTime BUSINESS_DATE { get; set; }
        
        string ESTABLISHMENT { get; set; }
        
        string PRODUCT { get; set; }
        
        decimal? TotalPrice { get; set; }
        
        int? TotalItems { get; set; }
        
        int? OrderedItems { get; set; }
        
        int? ReturnedItems { get; set; }
        
        string Name { get; set; }
        
        string maj_grp_seq { get; set; }

        void Copy( IvwPOSItemSummary _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwPOSItemSummary : IvwPOSItemSummary
    {
        [DataMember]
        public DateTime BUSINESS_DATE { get; set; }
        [DataMember]
        public string ESTABLISHMENT { get; set; }
        [DataMember]
        public string PRODUCT { get; set; }
        [DataMember]
        public decimal? TotalPrice { get; set; }
        [DataMember]
        public int? TotalItems { get; set; }
        [DataMember]
        public int? OrderedItems { get; set; }
        [DataMember]
        public int? ReturnedItems { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string maj_grp_seq { get; set; }

        public void Copy( IvwPOSItemSummary _Item )
        {
             ESTABLISHMENT = _Item.ESTABLISHMENT;			
             PRODUCT = _Item.PRODUCT;			
             TotalPrice = _Item.TotalPrice;			
             TotalItems = _Item.TotalItems;			
             OrderedItems = _Item.OrderedItems;			
             ReturnedItems = _Item.ReturnedItems;			
             Name = _Item.Name;			
             maj_grp_seq = _Item.maj_grp_seq;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPOSItemSummary( this );
        }
    }


    /// <summary>
    /// A class which represents the vwPOSItemSummary table in the RenAix Database.
    /// </summary>
    public partial class vwPOSItemSummary : BaseDataObject<DatavwPOSItemSummary>, IActiveRecord, ICallOnCreated, IvwPOSItemSummary
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwPOSItemSummary> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwPOSItemSummary>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwPOSItemSummary> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwPOSItemSummary item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwPOSItemSummary item=new vwPOSItemSummary();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwPOSItemSummary> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwPOSItemSummary()
        {
            m_Internal = new DatavwPOSItemSummary();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwPOSItemSummary( bool _CallOnCreated )
        {
            m_Internal = new DatavwPOSItemSummary();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwPOSItemSummary(string connectionString, string providerName) 
        {
            m_Internal = new DatavwPOSItemSummary();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwPOSItemSummary( IvwPOSItemSummary _Item )
        {
            m_Internal = new DatavwPOSItemSummary();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwPOSItemSummary( DatavwPOSItemSummary _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwPOSItemSummary _Item )
        {
            m_Internal.ESTABLISHMENT = _Item.ESTABLISHMENT;			
            m_Internal.PRODUCT = _Item.PRODUCT;			
            m_Internal.TotalPrice = _Item.TotalPrice;			
            m_Internal.TotalItems = _Item.TotalItems;			
            m_Internal.OrderedItems = _Item.OrderedItems;			
            m_Internal.ReturnedItems = _Item.ReturnedItems;			
            m_Internal.Name = _Item.Name;			
            m_Internal.maj_grp_seq = _Item.maj_grp_seq;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPOSItemSummary( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwPOSItemSummary.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPOSItemSummary>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwPOSItemSummary(Expression<Func<vwPOSItemSummary, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwPOSItemSummary> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwPOSItemSummary> _repo;
            
            if(db.TestMode)
            {
                vwPOSItemSummary.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPOSItemSummary>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwPOSItemSummary> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwPOSItemSummary SingleOrDefault(Expression<Func<vwPOSItemSummary, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwPOSItemSummary SingleOrDefault(Expression<Func<vwPOSItemSummary, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwPOSItemSummary> repo = GetRepo(connectionString,providerName);
            vwPOSItemSummary single = repo.SingleOrDefault<vwPOSItemSummary>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwPOSItemSummary, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwPOSItemSummary, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwPOSItemSummary GetByID(DateTime value) 
        {
            return vwPOSItemSummary.Find( L => L.BUSINESS_DATE.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwPOSItemSummary> Find(Expression<Func<vwPOSItemSummary, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwPOSItemSummary> Find(Expression<Func<vwPOSItemSummary, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwPOSItemSummary> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwPOSItemSummary> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwPOSItemSummary> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwPOSItemSummary> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwPOSItemSummary> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwPOSItemSummary> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "BUSINESS_DATE";
        }

        public object KeyValue()
        {
            return this.BUSINESS_DATE;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.ESTABLISHMENT )
//			{
//				rc = this.ESTABLISHMENT.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwPOSItemSummary)
            {
                vwPOSItemSummary compare=(vwPOSItemSummary)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.ESTABLISHMENT.ToString();
        }

        public string DescriptorColumn() 
        {
            return "ESTABLISHMENT";
        }

        public static string GetKeyColumn()
        {
            return "BUSINESS_DATE";
        }        

        public static string GetDescriptorColumn()
        {
            return "ESTABLISHMENT";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _BUSINESS_DATE;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime BUSINESS_DATE
        {
            get { return m_Internal.BUSINESS_DATE; }
            set
            {
                if(m_Internal.BUSINESS_DATE!=value){
                    m_Internal.BUSINESS_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BUSINESS_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ESTABLISHMENT;
        [LocalData]
        public string ESTABLISHMENT
        {
            get { return m_Internal.ESTABLISHMENT; }
            set
            {
                if(m_Internal.ESTABLISHMENT!=value){
                    m_Internal.ESTABLISHMENT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ESTABLISHMENT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PRODUCT;
        [LocalData]
        public string PRODUCT
        {
            get { return m_Internal.PRODUCT; }
            set
            {
                if(m_Internal.PRODUCT!=value){
                    m_Internal.PRODUCT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PRODUCT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalPrice;
        [LocalData]
        public decimal? TotalPrice
        {
            get { return m_Internal.TotalPrice; }
            set
            {
                if(m_Internal.TotalPrice!=value){
                    m_Internal.TotalPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalItems;
        [LocalData]
        public int? TotalItems
        {
            get { return m_Internal.TotalItems; }
            set
            {
                if(m_Internal.TotalItems!=value){
                    m_Internal.TotalItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _OrderedItems;
        [LocalData]
        public int? OrderedItems
        {
            get { return m_Internal.OrderedItems; }
            set
            {
                if(m_Internal.OrderedItems!=value){
                    m_Internal.OrderedItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderedItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ReturnedItems;
        [LocalData]
        public int? ReturnedItems
        {
            get { return m_Internal.ReturnedItems; }
            set
            {
                if(m_Internal.ReturnedItems!=value){
                    m_Internal.ReturnedItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReturnedItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _maj_grp_seq;
        [LocalData]
        public string maj_grp_seq
        {
            get { return m_Internal.maj_grp_seq; }
            set
            {
                if(m_Internal.maj_grp_seq!=value){
                    m_Internal.maj_grp_seq=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="maj_grp_seq");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwPOSItemSummary, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwPOSTopTen : IWCFDataElement
    {
        
        DateTime BUSINESS_DATE { get; set; }
        
        string ESTABLISHMENT { get; set; }
        
        string PRODUCT { get; set; }
        
        decimal? TotalPrice { get; set; }
        
        int? TotalItems { get; set; }
        
        int? OrderedItems { get; set; }
        
        int? ReturnedItems { get; set; }
        
        long? RowNum { get; set; }

        void Copy( IvwPOSTopTen _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwPOSTopTen : IvwPOSTopTen
    {
        [DataMember]
        public DateTime BUSINESS_DATE { get; set; }
        [DataMember]
        public string ESTABLISHMENT { get; set; }
        [DataMember]
        public string PRODUCT { get; set; }
        [DataMember]
        public decimal? TotalPrice { get; set; }
        [DataMember]
        public int? TotalItems { get; set; }
        [DataMember]
        public int? OrderedItems { get; set; }
        [DataMember]
        public int? ReturnedItems { get; set; }
        [DataMember]
        public long? RowNum { get; set; }

        public void Copy( IvwPOSTopTen _Item )
        {
             ESTABLISHMENT = _Item.ESTABLISHMENT;			
             PRODUCT = _Item.PRODUCT;			
             TotalPrice = _Item.TotalPrice;			
             TotalItems = _Item.TotalItems;			
             OrderedItems = _Item.OrderedItems;			
             ReturnedItems = _Item.ReturnedItems;			
             RowNum = _Item.RowNum;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPOSTopTen( this );
        }
    }


    /// <summary>
    /// A class which represents the vwPOSTopTen table in the RenAix Database.
    /// </summary>
    public partial class vwPOSTopTen : BaseDataObject<DatavwPOSTopTen>, IActiveRecord, ICallOnCreated, IvwPOSTopTen
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwPOSTopTen> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwPOSTopTen>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwPOSTopTen> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwPOSTopTen item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwPOSTopTen item=new vwPOSTopTen();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwPOSTopTen> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwPOSTopTen()
        {
            m_Internal = new DatavwPOSTopTen();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwPOSTopTen( bool _CallOnCreated )
        {
            m_Internal = new DatavwPOSTopTen();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwPOSTopTen(string connectionString, string providerName) 
        {
            m_Internal = new DatavwPOSTopTen();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwPOSTopTen( IvwPOSTopTen _Item )
        {
            m_Internal = new DatavwPOSTopTen();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwPOSTopTen( DatavwPOSTopTen _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwPOSTopTen _Item )
        {
            m_Internal.ESTABLISHMENT = _Item.ESTABLISHMENT;			
            m_Internal.PRODUCT = _Item.PRODUCT;			
            m_Internal.TotalPrice = _Item.TotalPrice;			
            m_Internal.TotalItems = _Item.TotalItems;			
            m_Internal.OrderedItems = _Item.OrderedItems;			
            m_Internal.ReturnedItems = _Item.ReturnedItems;			
            m_Internal.RowNum = _Item.RowNum;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPOSTopTen( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwPOSTopTen.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPOSTopTen>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwPOSTopTen(Expression<Func<vwPOSTopTen, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwPOSTopTen> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwPOSTopTen> _repo;
            
            if(db.TestMode)
            {
                vwPOSTopTen.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPOSTopTen>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwPOSTopTen> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwPOSTopTen SingleOrDefault(Expression<Func<vwPOSTopTen, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwPOSTopTen SingleOrDefault(Expression<Func<vwPOSTopTen, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwPOSTopTen> repo = GetRepo(connectionString,providerName);
            vwPOSTopTen single = repo.SingleOrDefault<vwPOSTopTen>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwPOSTopTen, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwPOSTopTen, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwPOSTopTen GetByID(DateTime value) 
        {
            return vwPOSTopTen.Find( L => L.BUSINESS_DATE.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwPOSTopTen> Find(Expression<Func<vwPOSTopTen, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwPOSTopTen> Find(Expression<Func<vwPOSTopTen, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwPOSTopTen> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwPOSTopTen> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwPOSTopTen> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwPOSTopTen> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwPOSTopTen> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwPOSTopTen> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "BUSINESS_DATE";
        }

        public object KeyValue()
        {
            return this.BUSINESS_DATE;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.ESTABLISHMENT )
//			{
//				rc = this.ESTABLISHMENT.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwPOSTopTen)
            {
                vwPOSTopTen compare=(vwPOSTopTen)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.ESTABLISHMENT.ToString();
        }

        public string DescriptorColumn() 
        {
            return "ESTABLISHMENT";
        }

        public static string GetKeyColumn()
        {
            return "BUSINESS_DATE";
        }        

        public static string GetDescriptorColumn()
        {
            return "ESTABLISHMENT";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime? _BUSINESS_DATE;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime BUSINESS_DATE
        {
            get { return m_Internal.BUSINESS_DATE; }
            set
            {
                if(m_Internal.BUSINESS_DATE!=value){
                    m_Internal.BUSINESS_DATE=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BUSINESS_DATE");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ESTABLISHMENT;
        [LocalData]
        public string ESTABLISHMENT
        {
            get { return m_Internal.ESTABLISHMENT; }
            set
            {
                if(m_Internal.ESTABLISHMENT!=value){
                    m_Internal.ESTABLISHMENT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ESTABLISHMENT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PRODUCT;
        [LocalData]
        public string PRODUCT
        {
            get { return m_Internal.PRODUCT; }
            set
            {
                if(m_Internal.PRODUCT!=value){
                    m_Internal.PRODUCT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PRODUCT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalPrice;
        [LocalData]
        public decimal? TotalPrice
        {
            get { return m_Internal.TotalPrice; }
            set
            {
                if(m_Internal.TotalPrice!=value){
                    m_Internal.TotalPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalItems;
        [LocalData]
        public int? TotalItems
        {
            get { return m_Internal.TotalItems; }
            set
            {
                if(m_Internal.TotalItems!=value){
                    m_Internal.TotalItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _OrderedItems;
        [LocalData]
        public int? OrderedItems
        {
            get { return m_Internal.OrderedItems; }
            set
            {
                if(m_Internal.OrderedItems!=value){
                    m_Internal.OrderedItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderedItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ReturnedItems;
        [LocalData]
        public int? ReturnedItems
        {
            get { return m_Internal.ReturnedItems; }
            set
            {
                if(m_Internal.ReturnedItems!=value){
                    m_Internal.ReturnedItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReturnedItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        long? _RowNum;
        [LocalData]
        public long? RowNum
        {
            get { return m_Internal.RowNum; }
            set
            {
                if(m_Internal.RowNum!=value){
                    m_Internal.RowNum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RowNum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwPOSTopTen, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

// Interface
    public interface IvwPOSTotal : IWCFDataElement
    {
        
        string Establishment { get; set; }
        
        int? TicketCount { get; set; }
        
        int? TotalGuests { get; set; }
        
        decimal? MinTicket { get; set; }
        
        decimal? MaxTicket { get; set; }
        
        decimal? SumDiscounts { get; set; }
        
        decimal? MinibarLost { get; set; }
        
        decimal? Aminities { get; set; }
        
        decimal? TicketTotal { get; set; }
        
        decimal? Tips { get; set; }
        
        decimal? TotalCredits { get; set; }
        
        decimal? PaymentTotal { get; set; }
        
        int? EstablishmentNumber { get; set; }
        
        DateTime? BusinessDate { get; set; }

        void Copy( IvwPOSTotal _Item );
		IBaseDataObject CreateDBObject( );
    }


////Data Object
    [DataContract]
    public partial class DatavwPOSTotal : IvwPOSTotal
    {
        [DataMember]
        public string Establishment { get; set; }
        [DataMember]
        public int? TicketCount { get; set; }
        [DataMember]
        public int? TotalGuests { get; set; }
        [DataMember]
        public decimal? MinTicket { get; set; }
        [DataMember]
        public decimal? MaxTicket { get; set; }
        [DataMember]
        public decimal? SumDiscounts { get; set; }
        [DataMember]
        public decimal? MinibarLost { get; set; }
        [DataMember]
        public decimal? Aminities { get; set; }
        [DataMember]
        public decimal? TicketTotal { get; set; }
        [DataMember]
        public decimal? Tips { get; set; }
        [DataMember]
        public decimal? TotalCredits { get; set; }
        [DataMember]
        public decimal? PaymentTotal { get; set; }
        [DataMember]
        public int? EstablishmentNumber { get; set; }
        [DataMember]
        public DateTime? BusinessDate { get; set; }

        public void Copy( IvwPOSTotal _Item )
        {
             TicketCount = _Item.TicketCount;			
             TotalGuests = _Item.TotalGuests;			
             MinTicket = _Item.MinTicket;			
             MaxTicket = _Item.MaxTicket;			
             SumDiscounts = _Item.SumDiscounts;			
             MinibarLost = _Item.MinibarLost;			
             Aminities = _Item.Aminities;			
             TicketTotal = _Item.TicketTotal;			
             Tips = _Item.Tips;			
             TotalCredits = _Item.TotalCredits;			
             PaymentTotal = _Item.PaymentTotal;			
             EstablishmentNumber = _Item.EstablishmentNumber;			
             BusinessDate = _Item.BusinessDate;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPOSTotal( this );
        }
    }


    /// <summary>
    /// A class which represents the vwPOSTotals table in the RenAix Database.
    /// </summary>
    public partial class vwPOSTotal : BaseDataObject<DatavwPOSTotal>, IActiveRecord, ICallOnCreated, IvwPOSTotal
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwPOSTotal> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwPOSTotal>(new Jaxis.POS.Data.RenAixDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwPOSTotal> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwPOSTotal item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwPOSTotal item=new vwPOSTotal();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        
		IRepository<vwPOSTotal> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        
		Jaxis.POS.Data.RenAixDB _db;
        
        public vwPOSTotal()
        {
            m_Internal = new DatavwPOSTotal();
             _db=new Jaxis.POS.Data.RenAixDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwPOSTotal( bool _CallOnCreated )
        {
            m_Internal = new DatavwPOSTotal();
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwPOSTotal(string connectionString, string providerName) 
        {
            m_Internal = new DatavwPOSTotal();
            _db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            Init();            
        }

        public vwPOSTotal( IvwPOSTotal _Item )
        {
            m_Internal = new DatavwPOSTotal();
            Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }

        public vwPOSTotal( DatavwPOSTotal _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.POS.Data.RenAixDB();
            Init();            
        }         
         
        public void Copy( IvwPOSTotal _Item )
        {
            m_Internal.TicketCount = _Item.TicketCount;			
            m_Internal.TotalGuests = _Item.TotalGuests;			
            m_Internal.MinTicket = _Item.MinTicket;			
            m_Internal.MaxTicket = _Item.MaxTicket;			
            m_Internal.SumDiscounts = _Item.SumDiscounts;			
            m_Internal.MinibarLost = _Item.MinibarLost;			
            m_Internal.Aminities = _Item.Aminities;			
            m_Internal.TicketTotal = _Item.TicketTotal;			
            m_Internal.Tips = _Item.Tips;			
            m_Internal.TotalCredits = _Item.TotalCredits;			
            m_Internal.PaymentTotal = _Item.PaymentTotal;			
            m_Internal.EstablishmentNumber = _Item.EstablishmentNumber;			
            m_Internal.BusinessDate = _Item.BusinessDate;			
        }         

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPOSTotal( this );
        }

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwPOSTotal.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPOSTotal>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwPOSTotal(Expression<Func<vwPOSTotal, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwPOSTotal> GetRepo(string connectionString, string providerName)
        {
            Jaxis.POS.Data.RenAixDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.POS.Data.RenAixDB() : new Jaxis.POS.Data.RenAixDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.POS.Data.RenAixDB();
            }
            else
            {
                db=new Jaxis.POS.Data.RenAixDB(connectionString, providerName);
            }
            */

            IRepository<vwPOSTotal> _repo;
            
            if(db.TestMode)
            {
                vwPOSTotal.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPOSTotal>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwPOSTotal> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwPOSTotal SingleOrDefault(Expression<Func<vwPOSTotal, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwPOSTotal SingleOrDefault(Expression<Func<vwPOSTotal, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwPOSTotal> repo = GetRepo(connectionString,providerName);
            vwPOSTotal single = repo.SingleOrDefault<vwPOSTotal>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwPOSTotal, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwPOSTotal, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwPOSTotal GetByID(string value) 
        {
            return vwPOSTotal.Find( L => L.Establishment.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwPOSTotal> Find(Expression<Func<vwPOSTotal, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwPOSTotal> Find(Expression<Func<vwPOSTotal, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwPOSTotal> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwPOSTotal> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwPOSTotal> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwPOSTotal> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwPOSTotal> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwPOSTotal> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Establishment";
        }

        public object KeyValue()
        {
            return this.Establishment;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Establishment )
//			{
//				rc = this.Establishment.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwPOSTotal)
            {
                vwPOSTotal compare=(vwPOSTotal)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Establishment.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Establishment";
        }

        public static string GetKeyColumn()
        {
            return "Establishment";
        }        

        public static string GetDescriptorColumn()
        {
            return "Establishment";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _Establishment;
        [SubSonicPrimaryKey]
        [LocalData]
        public string Establishment
        {
            get { return m_Internal.Establishment; }
            set
            {
                if(m_Internal.Establishment!=value){
                    m_Internal.Establishment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Establishment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TicketCount;
        [LocalData]
        public int? TicketCount
        {
            get { return m_Internal.TicketCount; }
            set
            {
                if(m_Internal.TicketCount!=value){
                    m_Internal.TicketCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalGuests;
        [LocalData]
        public int? TotalGuests
        {
            get { return m_Internal.TotalGuests; }
            set
            {
                if(m_Internal.TotalGuests!=value){
                    m_Internal.TotalGuests=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalGuests");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _MinTicket;
        [LocalData]
        public decimal? MinTicket
        {
            get { return m_Internal.MinTicket; }
            set
            {
                if(m_Internal.MinTicket!=value){
                    m_Internal.MinTicket=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinTicket");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _MaxTicket;
        [LocalData]
        public decimal? MaxTicket
        {
            get { return m_Internal.MaxTicket; }
            set
            {
                if(m_Internal.MaxTicket!=value){
                    m_Internal.MaxTicket=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaxTicket");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _SumDiscounts;
        [LocalData]
        public decimal? SumDiscounts
        {
            get { return m_Internal.SumDiscounts; }
            set
            {
                if(m_Internal.SumDiscounts!=value){
                    m_Internal.SumDiscounts=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SumDiscounts");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _MinibarLost;
        [LocalData]
        public decimal? MinibarLost
        {
            get { return m_Internal.MinibarLost; }
            set
            {
                if(m_Internal.MinibarLost!=value){
                    m_Internal.MinibarLost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinibarLost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Aminities;
        [LocalData]
        public decimal? Aminities
        {
            get { return m_Internal.Aminities; }
            set
            {
                if(m_Internal.Aminities!=value){
                    m_Internal.Aminities=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Aminities");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TicketTotal;
        [LocalData]
        public decimal? TicketTotal
        {
            get { return m_Internal.TicketTotal; }
            set
            {
                if(m_Internal.TicketTotal!=value){
                    m_Internal.TicketTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Tips;
        [LocalData]
        public decimal? Tips
        {
            get { return m_Internal.Tips; }
            set
            {
                if(m_Internal.Tips!=value){
                    m_Internal.Tips=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tips");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalCredits;
        [LocalData]
        public decimal? TotalCredits
        {
            get { return m_Internal.TotalCredits; }
            set
            {
                if(m_Internal.TotalCredits!=value){
                    m_Internal.TotalCredits=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalCredits");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _PaymentTotal;
        [LocalData]
        public decimal? PaymentTotal
        {
            get { return m_Internal.PaymentTotal; }
            set
            {
                if(m_Internal.PaymentTotal!=value){
                    m_Internal.PaymentTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaymentTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _EstablishmentNumber;
        [LocalData]
        public int? EstablishmentNumber
        {
            get { return m_Internal.EstablishmentNumber; }
            set
            {
                if(m_Internal.EstablishmentNumber!=value){
                    m_Internal.EstablishmentNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EstablishmentNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _BusinessDate;
        [LocalData]
        public DateTime? BusinessDate
        {
            get { return m_Internal.BusinessDate; }
            set
            {
                if(m_Internal.BusinessDate!=value){
                    m_Internal.BusinessDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BusinessDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwPOSTotal, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 
}
